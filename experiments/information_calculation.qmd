---
title: "Experiment1"
format: html
editor: visual
---

```{r}
steps <- seq(0, 100, length.out = 10)
N1 <- round(steps)
remaining <- 100 - N1
N2 <- round(remaining / 3)
N3 <- round(remaining / 3)
N4 <- remaining - N2 - N3  
df <- data.frame(N1, N2, N3, N4)

df$Total_Percent <- rowSums(df)

# Crop off the top and bottom rows
df_cropped <- df[-c(1, nrow(df)), ]

# Print the cropped data frame
print(df_cropped)


```

```{r}
increments <- seq(5, 35, length.out = 6)

# Initialize an empty data frame to store results
df_final <- data.frame()

# Loop to copy and assign Total_information values
for (i in increments) {
  df_temp <- df_cropped
  df_temp$Total_information <- i  # Assign the increment value to all rows
  df_final <- rbind(df_final, df_temp)
}
df_final$true_probability <- 0.7
# Print the final data frame
print(df_final)


```

```{r}
new_df <- df_final[rep(seq_len(nrow(df_final)), 6), ]

# Create the mle_distance column with values incremented by 0.16 (0/6, 1/6, ..., 5/6)
increments <- seq(0, 0.7, length.out = 6)
new_df$mle_distance <- rep(increments, each = nrow(df_final))

# Check the new dataframe
print(new_df)
```

```{r}
write.csv(new_df, "hardcoded_values.csv", row.names = FALSE)
```

```{r}
install.packages("jsonlite")
library(jsonlite)
write_json(new_df, "hardcoded_values.json", pretty = TRUE)
```
