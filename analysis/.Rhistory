mutate(error = abs(guess-AvgPercent))%>%
mutate(treatmentPercent = ifelse(.[[6]] == "experiment1-0.3", 30, 70))  %>%
mutate(treatmentError = guess-treatmentPercent)
d.guesses %>%
filter(!(playerID %in% confused)) %>%
group_by(treatmentName, idx) %>%
tidyboot::tidyboot_mean(error) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
View(d.guesses)
d.guesses <- d.guesses %>%
mutate(wisError = guess-AvgPercent)%>%
mutate(treatmentPercent = ifelse(.[[6]] == "experiment1-0.3", 30, 70))  %>%
mutate(treatmentError = guess-treatmentPercent)
d.guesses %>%
filter(!(gameID %in% sampleLess)) %>%
filter(!(playerID %in% confused)) %>%
group_by(treatmentName, idx) %>%
tidyboot::tidyboot_mean(error) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses %>%
filter(!(gameID %in% sampleLess)) %>%
filter(!(playerID %in% confused)) %>%
group_by(treatmentName, idx) %>%
tidyboot::tidyboot_mean(wisError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses <- d.guesses %>%
mutate(wisError = guess-AvgPercent)%>%
mutate(treatmentPercent = ifelse(.[[6]] == "experiment1-0.3", 30, 70))  %>%
mutate(wisTreatmentError = guess-treatmentPercent)
d.guesses %>%
filter(!(gameID %in% sampleLess)) %>%
filter(!(playerID %in% confused)) %>%
group_by(treatmentName, idx) %>%
tidyboot::tidyboot_mean(wisError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses %>%
filter(!(gameID %in% sampleLess)) %>%
filter(!(playerID %in% confused)) %>%
group_by(treatmentName, idx) %>%
tidyboot::tidyboot_mean(wisTreatmentError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses %>%
filter(!(playerID %in% confused)) %>%
group_by(treatmentName, idx) %>%
tidyboot::tidyboot_mean(wisError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses %>%
filter(!(playerID %in% confused)) %>%
group_by(treatmentName, idx) %>%
tidyboot::tidyboot_mean(wisTreatmentError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
unique_gameIDs <- unique(d.guesses$gameID)
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
# Subset data for the current gameID
subset_df <- d.guesses[d.guesses$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <- ggplot(subset_df, aes(x = idx, y = wisError, color = as.factor(playerID))) +
geom_line() +
labs(title = paste("GameID:", gameID, "- Error Over idx by playerID"), x = "idx", y = "Error") +
theme_minimal()
# Print the plot
print(plot)
}
d.gameError <- d.guesses %>%
group_by(gameID) %>%
summarize(gameError = (wisError))
d.guesses <- left_join(d.guesses, d.gameError, by = "gameID",suffixes = c("", ""))
rm(list = ls())
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
ParseJSONColumn <- function(x) {
str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>%
fromJSON(flatten = T)
}
# map game IDs to their treatments
d.treatments <- read_csv(here('data/experiment1/games.csv')) %>%
select(gameID = id, treatmentName) %>%
distinct()
# map game IDs to their treatments
d.players <- read_csv(here('data/experiment1/players.csv')) %>%
mutate(nSquirrels = str_count(emojiArray, '🐿️'),
nRabbits = str_count(emojiArray, '🐇')) %>%
select(playerID = id, gameID, nSquirrels, nRabbits) %>%
distinct()
# map round IDs to their indices
d.rounds <- read_csv(here('data/experiment1/rounds.csv')) %>%
select(gameID, roundID = id, idx) %>%
distinct()
# create long-form dataframe of all messages sent in each game
d.msgs <- read_csv(here('data/experiment1/games.csv')) %>%
mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
select(gameID = id, treatmentName, messages) %>%
filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
unnest(messages) %>% unnest(messages)
# create long-form dataframe of all guesses made in each game
d.guesses <- read_csv(here('data/experiment1/playerStages.csv')) %>%
filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>%
filter(!is.na(guess)) %>%
select(gameID, roundID, playerID, guess) %>%
left_join(d.rounds) %>%
left_join(d.treatments) %>%
left_join(d.players) %>%
distinct()
confused <- d.guesses %>%
filter(idx == 1) %>%
mutate(mleEstimate = ifelse(nRabbits > 0 & nSquirrels == 0, 100,
ifelse(nSquirrels > 0 & nRabbits == 0, 1,
ifelse(nRabbits + nSquirrels == 0, 0,
floor((nRabbits / (nRabbits + nSquirrels)) * 100))))) %>%
filter(mleEstimate != 0) %>%
mutate(discrepency = abs(guess - mleEstimate)) %>%
filter(discrepency > 70) %>%
pull(playerID)
confused2 <- d.guesses %>%
filter(idx == 1) %>%
mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
mutate(discrepency = abs(guess - mleEstimate)) %>%
filter(discrepency > 70) %>%
pull(playerID)
print(confused)
print(confused2)
d.guesses <- d.guesses %>%
mutate(wisError = guess-AvgPercent)%>%
mutate(treatmentPercent = ifelse(.[[6]] == "experiment1-0.3", 30, 70))  %>%
mutate(wisTreatmentError = guess-treatmentPercent)
d.guesses <- d.guesses %>%
mutate(indvPercent = ifelse(nRabbits > 0 & nSquirrels == 0, 100,
ifelse(nSquirrels > 0 & nRabbits == 0, 1,
ifelse(nRabbits + nSquirrels == 0, 0,
floor((nRabbits / (nRabbits + nSquirrels)) * 100)))))
d.gameAvg <- d.guesses %>%
group_by(gameID) %>%
summarize(AvgPercent = floor(mean(indvPercent[indvPercent != 0])))
d.guesses <- left_join(d.guesses, d.gameAvg, by = "gameID",suffixes = c("", ""))
d.guesses <- d.guesses %>%
mutate(wisError = guess-AvgPercent)%>%
mutate(treatmentPercent = ifelse(.[[6]] == "experiment1-0.3", 30, 70))  %>%
mutate(wisTreatmentError = guess-treatmentPercent)
View(d.guesses)
d.guesses %>%
filter(!(playerID %in% confused)) %>%
group_by(treatmentName, idx) %>%
tidyboot::tidyboot_mean(wisError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses %>%
filter(!(playerID %in% confused)) %>%
group_by(treatmentName, idx) %>%
tidyboot::tidyboot_mean(wisTreatmentError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.gameError <- d.guesses %>%
group_by(gameID) %>%
summarize(gameError = mean(wisError))
d.guesses <- left_join(d.guesses, d.gameError, by = "gameID",suffixes = c("", ""))
d.guesses7 %>%
filter(!(playerID %in% confused)) %>%
group_by(gameID, idx) %>%
tidyboot::tidyboot_mean(gameError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses7 <-d.guesses %>% filter(!(treatmentName = experiment1-0.3))
d.guesses7 <-d.guesses %>% filter(!(treatmentName = "experiment1-0.3"))
d.guesses7 <-d.guesses %>% filter((treatmentName = "experiment1-0.7"))
d.guesses7 <-d.guesses %>% filter(treatmentName = "experiment1-0.7")
d.guesses7 <-d.guesses %>% filter(treatmentName == "experiment1-0.7")
d.guesses3 <-d.guesses %>% filter(treatmentName == "experiment1-0.3")
View(d.guesses7)
d.guesses7 %>%
filter(!(playerID %in% confused)) %>%
group_by(gameID, idx) %>%
tidyboot::tidyboot_mean(gameError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses7 %>%
filter(!(playerID %in% confused)) %>%
group_by(idx) %>%
tidyboot::tidyboot_mean(gameError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses7 %>%
filter(!(playerID %in% confused)) %>%
group_by(.,idx) %>%
tidyboot::tidyboot_mean(gameError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses7 %>%
filter(!(playerID %in% confused)) %>%
group_by(.,idx) %>%
tidyboot::tidyboot_mean(gameError) %>%
ggplot(aes(x = idx, y = empirical_stat)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses %>%
filter(!(playerID %in% confused)) %>%
group_by(.=treatmentName,idx) %>%
tidyboot::tidyboot_mean(gameError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses %>%
filter(!(playerID %in% confused)) %>%
group_by(treatmentName,idx) %>%
tidyboot::tidyboot_mean(gameError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses %>%
filter(!(playerID %in% confused)) %>%
group_by(treatmentName,idx) %>%
tidyboot::tidyboot_mean(gameError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
{r}
unique_gameIDs <- unique(d.guesses$gameID)
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
filter(!(playerID %in% confused)) %>%
subset_df <- d.guesses[d.guesses$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <- subset_df %>%
tidyboot::tidyboot_mean(wisError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(gameError), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <- subset_df %>%
tidyboot::tidyboot_mean(wisError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(gameError), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Get the constant gameError value for the current gameID
gameError_value <- subset_df$gameError[1]  # Assuming it's the same for all rows
# Create a ggplot for error over idx, faceted by playerID
plot <- subset_df %>%
tidyboot::tidyboot_mean(wisError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = gameError_value, linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
View(subset_df)
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <- subset_df %>%
tidyboot::tidyboot_mean(wisError) %>%
ggplot(aes(x = idx, y = mean, color = treatmentName)) +  # Assuming mean is the column name returned by tidyboot_mean
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <- ggplot(subset_df, aes(x = idx, y = mean, color = treatmentName)) +  # Assuming mean is the column name returned by tidyboot_mean
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <- ggplot(subset_df, aes(x = idx, y = empirical_stat, color = treatmentName)) +  # Assuming mean is the column name returned by tidyboot_mean
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <-
tidyboot::tidyboot_mean(wisError) %>%
ggplot(subset_df, aes(x = idx, y = empirical_stat, color = treatmentName)) +  # Assuming mean is the column name returned by tidyboot_mean
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <-
ggplot(subset_df, aes(x = idx, y = wisError, color = treatmentName)) +  # Assuming mean is the column name returned by tidyboot_mean
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <-
ggplot(subset_df, aes(x = idx, y = wisError)) +  # Assuming mean is the column name returned by tidyboot_mean
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <-
ggplot(subset_df, aes(x = idx, y = wisError)) +  # Assuming mean is the column name returned by tidyboot_mean
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
print(plot)
# Print the plot
}
