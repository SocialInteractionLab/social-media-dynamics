d.msgs <- read_csv(here('data/experiment1/games.csv')) %>%
mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
select(gameID = id, treatmentName, messages) %>%
filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
unnest(messages) %>% unnest(messages)
# create long-form dataframe of all guesses made in each game
d.guesses <- read_csv(here('data/experiment1/playerStages.csv')) %>%
filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>%
filter(!is.na(guess)) %>%
select(gameID, roundID, playerID, guess) %>%
left_join(d.rounds) %>%
left_join(d.treatments) %>%
left_join(d.players) %>%
distinct()
confused <- d.guesses %>%
filter(idx == 1) %>%
mutate(mleEstimate = ifelse(nRabbits > 0 & nSquirrels == 0, 100,
ifelse(nSquirrels > 0 & nRabbits == 0, 1,
ifelse(nRabbits + nSquirrels == 0, 0,
floor((nRabbits / (nRabbits + nSquirrels)) * 100))))) %>%
filter(mleEstimate != 0) %>%
mutate(discrepency = abs(guess - mleEstimate)) %>%
filter(discrepency > 70) %>%
pull(playerID)
confused2 <- d.guesses %>%
filter(idx == 1) %>%
mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
mutate(discrepency = abs(guess - mleEstimate)) %>%
filter(discrepency > 70) %>%
pull(playerID)
print(confused)
print(confused2)
d.guesses <- d.guesses %>%
mutate(wisError = guess-AvgPercent)%>%
mutate(treatmentPercent = ifelse(.[[6]] == "experiment1-0.3", 30, 70))  %>%
mutate(wisTreatmentError = guess-treatmentPercent)
d.guesses <- d.guesses %>%
mutate(indvPercent = ifelse(nRabbits > 0 & nSquirrels == 0, 100,
ifelse(nSquirrels > 0 & nRabbits == 0, 1,
ifelse(nRabbits + nSquirrels == 0, 0,
floor((nRabbits / (nRabbits + nSquirrels)) * 100)))))
d.gameAvg <- d.guesses %>%
group_by(gameID) %>%
summarize(AvgPercent = floor(mean(indvPercent[indvPercent != 0])))
d.guesses <- left_join(d.guesses, d.gameAvg, by = "gameID",suffixes = c("", ""))
d.guesses <- d.guesses %>%
mutate(wisError = guess-AvgPercent)%>%
mutate(treatmentPercent = ifelse(.[[6]] == "experiment1-0.3", 30, 70))  %>%
mutate(wisTreatmentError = guess-treatmentPercent)
View(d.guesses)
d.guesses %>%
filter(!(playerID %in% confused)) %>%
group_by(treatmentName, idx) %>%
tidyboot::tidyboot_mean(wisError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses %>%
filter(!(playerID %in% confused)) %>%
group_by(treatmentName, idx) %>%
tidyboot::tidyboot_mean(wisTreatmentError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.gameError <- d.guesses %>%
group_by(gameID) %>%
summarize(gameError = mean(wisError))
d.guesses <- left_join(d.guesses, d.gameError, by = "gameID",suffixes = c("", ""))
d.guesses7 %>%
filter(!(playerID %in% confused)) %>%
group_by(gameID, idx) %>%
tidyboot::tidyboot_mean(gameError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses7 <-d.guesses %>% filter(!(treatmentName = experiment1-0.3))
d.guesses7 <-d.guesses %>% filter(!(treatmentName = "experiment1-0.3"))
d.guesses7 <-d.guesses %>% filter((treatmentName = "experiment1-0.7"))
d.guesses7 <-d.guesses %>% filter(treatmentName = "experiment1-0.7")
d.guesses7 <-d.guesses %>% filter(treatmentName == "experiment1-0.7")
d.guesses3 <-d.guesses %>% filter(treatmentName == "experiment1-0.3")
View(d.guesses7)
d.guesses7 %>%
filter(!(playerID %in% confused)) %>%
group_by(gameID, idx) %>%
tidyboot::tidyboot_mean(gameError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses7 %>%
filter(!(playerID %in% confused)) %>%
group_by(idx) %>%
tidyboot::tidyboot_mean(gameError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses7 %>%
filter(!(playerID %in% confused)) %>%
group_by(.,idx) %>%
tidyboot::tidyboot_mean(gameError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses7 %>%
filter(!(playerID %in% confused)) %>%
group_by(.,idx) %>%
tidyboot::tidyboot_mean(gameError) %>%
ggplot(aes(x = idx, y = empirical_stat)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses %>%
filter(!(playerID %in% confused)) %>%
group_by(.=treatmentName,idx) %>%
tidyboot::tidyboot_mean(gameError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses %>%
filter(!(playerID %in% confused)) %>%
group_by(treatmentName,idx) %>%
tidyboot::tidyboot_mean(gameError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error', x = 'round #') +
scale_color_colorblind()
d.guesses %>%
filter(!(playerID %in% confused)) %>%
group_by(treatmentName,idx) %>%
tidyboot::tidyboot_mean(gameError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
{r}
unique_gameIDs <- unique(d.guesses$gameID)
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
filter(!(playerID %in% confused)) %>%
subset_df <- d.guesses[d.guesses$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <- subset_df %>%
tidyboot::tidyboot_mean(wisError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(gameError), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <- subset_df %>%
tidyboot::tidyboot_mean(wisError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(gameError), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Get the constant gameError value for the current gameID
gameError_value <- subset_df$gameError[1]  # Assuming it's the same for all rows
# Create a ggplot for error over idx, faceted by playerID
plot <- subset_df %>%
tidyboot::tidyboot_mean(wisError) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = gameError_value, linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
View(subset_df)
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <- subset_df %>%
tidyboot::tidyboot_mean(wisError) %>%
ggplot(aes(x = idx, y = mean, color = treatmentName)) +  # Assuming mean is the column name returned by tidyboot_mean
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <- ggplot(subset_df, aes(x = idx, y = mean, color = treatmentName)) +  # Assuming mean is the column name returned by tidyboot_mean
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <- ggplot(subset_df, aes(x = idx, y = empirical_stat, color = treatmentName)) +  # Assuming mean is the column name returned by tidyboot_mean
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <-
tidyboot::tidyboot_mean(wisError) %>%
ggplot(subset_df, aes(x = idx, y = empirical_stat, color = treatmentName)) +  # Assuming mean is the column name returned by tidyboot_mean
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <-
ggplot(subset_df, aes(x = idx, y = wisError, color = treatmentName)) +  # Assuming mean is the column name returned by tidyboot_mean
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <-
ggplot(subset_df, aes(x = idx, y = wisError)) +  # Assuming mean is the column name returned by tidyboot_mean
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
# Print the plot
print(plot)
}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]
# Iterate through unique gameID values and create individual plots
for (gameID in unique_gameIDs) {
subset_df <- filtered_df[filtered_df$gameID == gameID, ]
# Create a ggplot for error over idx, faceted by playerID
plot <-
ggplot(subset_df, aes(x = idx, y = wisError)) +  # Assuming mean is the column name returned by tidyboot_mean
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
theme_few() +
labs(y = 'average error per game', x = 'round #') +
scale_color_colorblind()
print(plot)
# Print the plot
}
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
ParseJSONColumn <- function(x) {
str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>%
fromJSON(flatten = T)
}
# map game IDs to their treatments
d.treatments <- read_csv(here('data/experiment1/games.csv')) %>%
select(gameID = id, treatmentName) %>%
distinct()
# map game IDs to their treatments
d.players <- read_csv(here('data/experiment1/players.csv')) %>%
mutate(nSquirrels = str_count(emojiArray, '🐿️'),
nRabbits = str_count(emojiArray, '🐇')) %>%
select(playerID = id, gameID, nSquirrels, nRabbits) %>%
distinct()
# map round IDs to their indices
d.rounds <- read_csv(here('data/experiment1/rounds.csv')) %>%
select(gameID, roundID = id, idx) %>%
distinct()
# create long-form dataframe of all messages sent in each game
d.msgs <- read_csv(here('data/experiment1/games.csv')) %>%
mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
select(gameID = id, treatmentName, messages) %>%
filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
unnest(messages) %>% unnest(messages)
# create long-form dataframe of all guesses made in each game
d.guesses <- read_csv(here('data/experiment1/playerStages.csv')) %>%
filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% # experimenter practice game
filter(!is.na(guess)) %>%
select(gameID, roundID, playerID, guess) %>%
left_join(d.rounds) %>%
left_join(d.treatments) %>%
left_join(d.players) %>%
distinct() %>%
group_by(idx, gameID) %>%
mutate(nRabbitsGame = sum(nRabbits),
nSquirrelsGame = sum(nSquirrels)) %>%
mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))
persistentnoClick <- c()
for (i in 1:7) {
idx_pair <- c(i, i+1)
filtered_players <- d.guesses %>%
group_by(playerID) %>%
filter(all(is.na(guess[idx %in% idx_pair]))) %>%
distinct(playerID, .keep_all = TRUE) %>%
pull(playerID)
persistentnoClick <- c(persistentnoClick, filtered_players)
}
confused <- d.guesses %>%
filter(idx == 1) %>%
mutate(discrepency = abs(guess - mleEstimateIndiv)) %>%
filter(discrepency > 70) %>%
pull(playerID)
cat('excluding', length(confused), 'for being >70 points off estimate at the beginning')
cat('excluding', length(persistentnoClick %>% unique()), 'more for inattentiveness')
truePs <- d.guesses %>%
filter(idx == 1) %>%
group_by(treatmentName, gameID, nSquirrelsGame, nRabbitsGame) %>%
tally() %>%
group_by(treatmentName) %>%
summarize(p = mean(nRabbitsGame / (nSquirrelsGame + nRabbitsGame)))
d.guesses %>%
filter(!(playerID %in% confused)) %>%
filter(!(playerID %in% persistentnoClick)) %>%
group_by(treatmentName, idx, gameID) %>%
summarize(guess = mean(guess)) %>%
group_by(treatmentName, idx) %>%
tidyboot::tidyboot_mean(guess) %>%
mutate(treatmentName = case_when(treatmentName == 'experiment1-0.3' ~ 'p=0.3',
treatmentName == 'experiment1-0.7' ~ 'p=0.7')) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(31.63546	, 68.64803), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill=treatmentName),color=NA, alpha = 0.1) +
theme_few() +
labs(y = 'average guess', x = 'round #', color = '') +
scale_color_colorblind() +
scale_fill_colorblind(guide='none') +
scale_x_continuous(breaks = c(1,3,5,7,9)) +
theme(aspect.ratio = 1, legend.position = 'top')
ggsave(here('exp1_raw_convergence.pdf'), height=3, width = 3)
d.guesses %>%
filter(!(playerID %in% confused)) %>%
filter(!(playerID %in% persistentnoClick)) %>%
lmerTest::lmer(guess ~ poly(idx, 2) + treatmentName
+ (1 + poly(idx, 1) || gameID)
+ (1 + poly(idx, 1) || playerID:gameID),
data = .,
contrasts = list(treatmentName = contr.sum(2))) %>%
summary()
d.guesses %>%
group_by(gameID, treatmentName) %>%
summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
ggplot(aes(x = mleEstimate)) +
geom_histogram(binwidth = 10) +
facet_wrap(~ treatmentName, scales = "free") +
xlim(0,100) +
labs(title = "Distribution of mleEstimate for each treatmentName") +
theme_few()
d.guesses %>%
filter(!(playerID %in% confused)) %>%
filter(!(playerID %in% persistentnoClick)) %>%
mutate(error = abs(guess - mleEstimateGame)) %>%
lmerTest::lmer(error ~ poly(idx, 2) * treatmentName
+ (1 + poly(idx, 1) | gameID)
+ (1 + poly(idx, 1) | playerID:gameID),
data = .,
contrasts = list(treatmentName = contr.sum(2))) %>%
summary()
d.guesses %>%
filter(!(playerID %in% confused)) %>%
filter(!(playerID %in% persistentnoClick)) %>%
group_by(treatmentName, idx, gameID) %>%
summarize(error = mean(abs(guess - mleEstimateGame))) %>%
group_by(treatmentName, idx) %>%
tidyboot_mean(error) %>%
mutate(treatmentName = case_when(treatmentName == 'experiment1-0.3' ~ 'p=0.3',
treatmentName == 'experiment1-0.7' ~ 'p=0.7')) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill = treatmentName),
color = NA,
alpha = 0.1) +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se =F) +
theme_few() +
labs(y = 'average error', x = 'round #', color = '') +
scale_color_colorblind() +
scale_fill_colorblind(guide="none") +
ylim(0, 30) +
scale_x_continuous(breaks = c(1,3,5,7,9)) +
theme(aspect.ratio = 1, legend.position = 'top')
ggsave(here('exp1_raw_error.pdf'), height=3, width = 3)
