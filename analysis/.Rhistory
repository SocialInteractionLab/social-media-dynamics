filter(idx == 1) %>%
mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
mutate(discrepency = abs(guess - mleEstimate)) %>%
filter(discrepency > 70) %>%
pull(playerID)
persistentnoClick <- c()
for (i in 1:11) {
idx_pair <- c(i+1, i+2)
filtered_players <- d.guesses %>%
group_by(playerID) %>%
filter(all(is.na(guess[idx %in% idx_pair]))) %>%
filter(idx != 1) %>%  # Filter out idx == 1
distinct(playerID, .keep_all = TRUE) %>%
pull(playerID)
persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)
games_with_4_players <- d.guesses %>%
filter(!(playerID %in% persistentnoClick)) %>%
group_by(gameID) %>%
summarise(unique_players = n_distinct(playerID)) %>%
filter(unique_players == 4)
d.guesses <- left_join(d.guesses, games_with_4_players, by = "gameID")
games_with_4_players <- games_with_4_players %>%
#filter(!(gameID %in% confused)) %>%
left_join(d.guesses, by = "gameID") %>%
select(gameID, treatmentName) %>%
distinct()
treatment_count <- as.data.frame(table(games_with_4_players$treatmentName))
print(treatment_count)
d.guesses <- d.guesses %>% filter(!(gameID %in% persistentnoClick))
#%>%
# filter(idx != 1)
gameCounts <- d.guesses %>%
filter(!(gameID %in% persistentnoClick)) %>%
filter(idx == 1) %>%
group_by(gameID, playerID, nRabbits, nSquirrels) %>%
tally() %>%
group_by(gameID) %>%
mutate(nRabbitsGame = sum(nRabbits),
nSquirrelsGame = sum(nSquirrels))
d.guesses <- d.guesses %>%
mutate(treatmentName = case_when(
treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
)) %>%
separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
left_join(gameCounts) %>%
mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
nCrittersGame = nRabbitsGame+nSquirrelsGame,
mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
arrange(playerID, idx)
d.guesses %>%
filter(!is.na(treatment)) %>%
group_by(gameID, treatment) %>%
summarize(mleEstimate = mean(mleEstimateGame)) %>%
ggplot(aes(x = mleEstimate, fill = treatment)) +
geom_density(binwidth = 10, alpha = 0.5) +
theme_few()
playercount <- d.guesses %>%
filter(idx == 1) %>%
distinct(playerID, .keep_all = TRUE) %>%
group_by(treatment, condition) %>%
tally()
gamecount <- d.guesses %>%
filter(idx == 1) %>%
distinct(gameID, .keep_all = TRUE) %>%
group_by(treatment, condition) %>%
tally()
d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
summarize(gameError = mean(guess - mleEstimateGame, na.rm= T)) %>%
group_by(treatment, condition, idx) %>%
tidyboot::tidyboot_mean(gameError, na.rm = T) %>%
ggplot(aes(x = idx, y = empirical_stat, color = condition, group = interaction(condition, treatment))) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 1), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
theme_few() +
scale_color_colorblind() +
labs(y = 'average error', x = 'round #')
d.guesses %>%
ungroup() %>%
mutate(condition = fct_relevel(condition, 'slider', 'unidirectional', 'interactive')) %>%
mutate(error = abs(guess - mleEstimateGame)) %>%
lmer(scale(error) ~ poly(idx, 2) + condition + (1 + poly(idx, 2) || gameID/playerID),
data = .,
contrasts = list(condition = contr.sum(3)),
control = lmerControl(optimizer = 'bobyqa')) %>%
summary()
d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm= T)) %>%
group_by(condition, idx) %>%
tidyboot::tidyboot_mean(error, na.rm = T) %>%
ggplot(aes(x = idx, y = empirical_stat, color = condition, linetype = condition == 'interactive')) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
theme_few() +
scale_color_brewer(palette = 'Accent') +
guides(linetype = 'none') +
scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
labs(y = 'average error', x = 'round #', color = '')  +
theme(aspect.ratio = 1, legend.position = 'top')
#library(pbkrtest)
emm_options(lmerTest.limit = 7826)
#emm_options(pbkrtest.limit = 7826)
error_data <- d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame,playerID) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE)) %>%
ungroup() %>%
mutate(idx = scale(idx, scale= FALSE)) #center idx
model <- lmer(error ~ condition * idx + (1 | gameID/playerID), data = error_data, control = lmerControl(optCtrl = list(maxfun = 100000)))
#summary(model)
model2 <- lmer(error ~ idx + (1 | gameID/playerID), data = error_data)
#summary(model2)
model3 <- lmer(error ~ condition  + (1 | idx) + (1 | gameID/playerID), data = error_data)
#summary(model3)
model4 <- lmer(error ~ idx + condition + (1 | gameID/playerID), data = error_data)
#summary(model4)
#bonferroni adjusts for multiple comparisons
pairwise_results <- model %>%
emmeans(pairwise ~ condition, adjust = "bonferroni") %>%
pluck("contrasts")
# View the pairwise comparisons
print(pairwise_results)
print(error_data)
model_without_condition <- glmer(error ~ idx + (1 + idx | gameID/playerID), family= "poisson", data = error_data) #"fit an intercept for every gameID and every player in the game" but +idx is because we have repeated measures you can get a slope for every game
model_with_condition <- glmer(error ~ condition + idx + (1 + idx | gameID/playerID), family= "poisson", data = error_data)
model_with_interaction <-glmer(error ~ condition*idx + (1 + idx | gameID/playerID), family= "poisson", data = error_data)
anova(model_without_condition, model_with_condition, model_with_interaction)
#keep it maximal = as many random effects as you can hold (game, player, slope)
summary(model_with_condition)
d.guesses %>%
ungroup() %>%
group_by(condition, gameID, idx) %>%
summarize(gameError = abs(mean(mleEstimateGame) - mean(guess, na.rm= T)),
nCrittersGame = mean(nCrittersGame)) %>%
ggplot(aes(x = nCrittersGame, y = log1p(gameError), color = condition)) +
geom_point(alpha = 0.25) +
geom_smooth(method = 'lm', formula = y ~ poly(x, 1)) +
theme_few() +
scale_color_brewer(palette = 'Accent') +
facet_grid(~ condition) +
labs(y = 'average error', x = 'total sample size') +
theme(aspect.ratio = 2, legend.position = 'none')
#ggsave(here('exp2_prereg_samplesize.pdf'), height=3, width = 8)
m1 <- d.guesses %>%
ungroup() %>%
mutate(condition = fct_relevel(condition, 'slider', 'unidirectional', 'interactive')) %>%
mutate(nCrittersGame = nRabbitsGame + nSquirrelsGame,
error = abs(guess - mleEstimateGame)) %>%
lmer(scale(error) ~ condition + poly(nCrittersGame, 2) + idx +  (1 + idx | playerID),
data = .)
m2 <- d.guesses %>%
ungroup() %>%
mutate(condition = fct_relevel(condition,'unidirectional', 'slider',  'interactive')) %>%
mutate(nCrittersGame = nRabbitsGame + nSquirrelsGame,
error = abs(guess - mleEstimateGame)) %>%
lmer(scale(error) ~ condition * poly(nCrittersGame, 2) + idx + (1 + idx | playerID),
data = .)
anova(m1, m2)
summary(m2)
d.guesses %>%
arrange(playerID, idx) %>%
group_by(playerID) %>%
mutate(prevGuess = lag(guess)) %>%
mutate(distToSelf = abs(guess - prevGuess)) %>%
filter(idx > 2) %>%
group_by(idx, condition) %>%
tidyboot_mean(distToSelf, na.rm = TRUE) %>%
ggplot(aes(x = idx, y = empirical_stat, color = condition)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 1), se = FALSE) +
scale_color_brewer(palette = 'Accent') +
guides(linetype = 'none') +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10, 12)) +
labs(y = 'change from previous guess', x = 'reference point (round #)', color = '') +
theme_few() +
theme(aspect.ratio = 1, legend.position = 'top')
m1 <- d.guesses %>%
group_by(playerID) %>%
mutate(prevGuess = lag(guess)) %>%
arrange(playerID, idx) %>%
mutate(distToSelf = abs(guess - prevGuess)) %>%
group_by(idx, condition) %>%
filter(idx>1) %>%
lmer(distToSelf ~ poly(idx,2) + condition + (1+ poly(idx,2) | gameID/playerID),
data = .)
m2 <- d.guesses %>%
group_by(playerID) %>%
mutate(prevGuess = lag(guess)) %>%
arrange(playerID, idx) %>%
mutate(distToSelf = abs(guess - prevGuess)) %>%
group_by(idx, condition) %>%
filter(idx>1) %>%
lmer(distToSelf ~ poly(idx,2) * condition + (1+ poly(idx,2) | gameID/playerID),
data = .)
anova(m1,m2)
summary(m1)
reducedPlayers <- d.guesses %>%
group_by(gameID) %>%
filter(n_distinct(playerID) != 4) %>%
ungroup()
reducedInfo <- d.guesses %>%
filter(!(gameID %in% reducedPlayers)) %>%
filter(nCrittersGame < 20)
reducedPlayers <- reducedPlayers %>%
filter(!(gameID %in% reducedInfo))
print(nrow(reducedInfo))
print(nrow(reducedPlayers))
#games with incomplete information (less that 20 samples/less than 4 players
reducedInfo %>%
mutate(nCrittersGroup = case_when(
nCrittersGame >= 1 & nCrittersGame <= 10 ~ 10,
nCrittersGame >= 11 & nCrittersGame <= 15 ~ 15,
nCrittersGame >= 16 & nCrittersGame <= 20 ~ 20,
TRUE ~ NA_real_
)) %>%
filter(!is.na(nCrittersGroup)) %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame, nCrittersGroup) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE), .groups = 'drop') %>%
group_by(condition, idx, nCrittersGroup) %>%
tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
filter(condition == 'interactive') %>%
ggplot(aes(x = idx, y = empirical_stat, color = nCrittersGroup, group = nCrittersGroup, linetype = 'interactive')) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
geom_hline(yintercept = 0, linetype = 'dotted') +
theme_few() +
scale_color_gradient(low = "lightgreen", high = "darkgreen") +
guides(linetype = 'none') +
scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
labs(y = 'average error', x = 'round #', color = 'nCrittersGroup',   title = 'Interactive'
) +
theme(aspect.ratio = 1, legend.position = 'top')
reducedInfo %>%
mutate(nCrittersGroup = case_when(
nCrittersGame >= 1 & nCrittersGame <= 10 ~ 10,
nCrittersGame >= 11 & nCrittersGame <= 15 ~ 15,
nCrittersGame >= 16 & nCrittersGame <= 20 ~ 20,
TRUE ~ NA_real_
)) %>%
filter(!is.na(nCrittersGroup))  %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame, nCrittersGroup) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE), .groups = 'drop') %>%
group_by(condition, idx, nCrittersGroup) %>%
tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
filter(condition == 'slider') %>%
ggplot(aes(x = idx, y = empirical_stat, color = nCrittersGroup, group = nCrittersGroup, linetype = 'slider')) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
geom_hline(yintercept = 0, linetype = 'dotted') +
theme_few() +
scale_color_gradient(low = "lightpink", high = "darkorchid4") +
guides(linetype = 'none') +
scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
labs(y = 'average error', x = 'round #', color = 'nCrittersGroup',title = 'Slider') +
theme(aspect.ratio = 1, legend.position = 'top')
reducedInfo %>%
mutate(nCrittersGroup = case_when(
nCrittersGame >= 1 & nCrittersGame <= 10 ~ 10,
nCrittersGame >= 11 & nCrittersGame <= 15 ~ 15,
nCrittersGame >= 16 & nCrittersGame <= 20 ~ 20,
TRUE ~ NA_real_
)) %>%
filter(!is.na(nCrittersGroup)) %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame, nCrittersGroup) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE), .groups = 'drop') %>%
group_by(condition, idx, nCrittersGroup) %>%
tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
filter(condition == 'unidirectional') %>%
ggplot(aes(x = idx, y = empirical_stat, color = nCrittersGroup, group = nCrittersGroup, linetype = 'unidirectional')) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
geom_hline(yintercept = 0, linetype = 'dotted') +
theme_few() +
scale_color_gradient(low = "#FFDAB9", high = "#FF4500")+
guides(linetype = 'none') +
scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
labs(y = 'average error', x = 'round #', color = 'nCrittersGroup',title = 'Unidirectional') +
theme(aspect.ratio = 1, legend.position = 'top')
summary_data <- d.guesses %>%
group_by(treatment, condition, confidence, gameID, mleEstimateGame) %>%
summarize(gameError = mean(guess - mleEstimateGame, na.rm = TRUE)) %>%
group_by(condition, confidence, treatment) %>%
tidyboot::tidyboot_mean(gameError, na.rm = TRUE)
ggplot(summary_data, aes(x = confidence, y = abs(empirical_stat), color = condition, group = interaction(condition, treatment))) +
geom_smooth(method = 'lm', formula = y ~ poly(x, 1), se = FALSE) +
geom_hline(yintercept = 0, linetype = 'dotted') +
theme_few() +
scale_color_colorblind() +
labs(y = 'error', x = 'confidence')
ggplot(d.guesses, aes(x = idx, y = confidence, color = condition)) +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
geom_hline(yintercept = 0, linetype = 'dotted') +
theme_few() +
scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
scale_color_colorblind() +
labs(y = 'confidence', x = 'round') +
ylim(50, NA)
d.guesses %>%
ungroup() %>%
mutate(condition = fct_relevel(condition, 'slider', 'unidirectional', 'interactive')) %>%contrasts(d.guesses$condition)
d.guesses %>%
ungroup() %>%
mutate(condition = fct_relevel(condition, 'slider', 'unidirectional', 'interactive')) %>%
{ print(contrasts(.$condition)); . } %>%
mutate(error = abs(guess - mleEstimateGame)) %>%
lmer(scale(error) ~ poly(idx, 2) + condition + (1 + poly(idx, 2) || gameID/playerID),
data = .,
contrasts = list(condition = contr.sum(3)),
control = lmerControl(optimizer = 'bobyqa')) %>%
summary()
#library(pbkrtest)
emm_options(lmerTest.limit = 7826)
#emm_options(pbkrtest.limit = 7826)
error_data <- d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame,playerID) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE)) %>%
ungroup() %>%
mutate(idx = scale(idx, scale= FALSE)) #center idx
model <- lmer(error ~ condition * idx + (1 | gameID/playerID), data = error_data, control = lmerControl(optCtrl = list(maxfun = 100000)))
#summary(model)
model2 <- lmer(error ~ idx + (1 | gameID/playerID), data = error_data)
#summary(model2)
model3 <- lmer(error ~ condition  + (1 | idx) + (1 | gameID/playerID), data = error_data)
#summary(model3)
model4 <- lmer(error ~ idx + condition + (1 | gameID/playerID), data = error_data)
#summary(model4)
#bonferroni adjusts for multiple comparisons
pairwise_results <- model %>%
emmeans(pairwise ~ condition, adjust = "bonferroni") %>%
pluck("contrasts")
# View the pairwise comparisons
print(pairwise_results)
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(lmerTest)
conflicts_prefer(lmerTest::lmer)
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
ParseJSONColumn <- function(x) {
str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>%
fromJSON(flatten = T)
}
# map game IDs to their treatments
d.treatments <- read_csv(here('data/0_experiment1_exploratory/games.csv')) %>%
select(gameID = id, treatmentName) %>%
distinct()
# map game IDs to their treatments
d.players <- read_csv(here('data/0_experiment1_exploratory/players.csv')) %>%
mutate(nSquirrels = str_count(emojiArray, '🐿️'),
nRabbits = str_count(emojiArray, '🐇')) %>%
select(playerID = id, gameID, nSquirrels, nRabbits) %>%
distinct()
# map round IDs to their indices
d.rounds <- read_csv(here('data/0_experiment1_exploratory/rounds.csv')) %>%
select(gameID, roundID = id, idx) %>%
distinct()
# create long-form dataframe of all messages sent in each game
d.msgs <- read_csv(here('data/0_experiment1_exploratory/games.csv')) %>%
mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
select(gameID = id, treatmentName, messages) %>%
filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
unnest(messages) %>% unnest(messages)
# create long-form dataframe of all guesses made in each game
d.guesses <- read_csv(here('data/0_experiment1_exploratory/playerStages.csv')) %>%
filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% # experimenter practice game
filter(!is.na(guess)) %>%
select(gameID, roundID, playerID, guess) %>%
left_join(d.rounds) %>%
left_join(d.treatments) %>%
left_join(d.players) %>%
distinct() %>%
group_by(idx, gameID) %>%
mutate(nRabbitsGame = sum(nRabbits),
nSquirrelsGame = sum(nSquirrels)) %>%
mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))
persistentnoClick <- c()
for (i in 1:7) {
idx_pair <- c(i, i+1)
filtered_players <- d.guesses %>%
group_by(playerID) %>%
filter(all(is.na(guess[idx %in% idx_pair]))) %>%
distinct(playerID, .keep_all = TRUE) %>%
pull(playerID)
persistentnoClick <- c(persistentnoClick, filtered_players)
}
confused <- d.guesses %>%
filter(idx == 1) %>%
mutate(discrepency = abs(guess - mleEstimateIndiv)) %>%
filter(discrepency > 70) %>%
pull(playerID)
d.guesses_filtered <-d.guesses %>%
# filter(!(playerID %in% confused)) %>%
filter(!(playerID %in% persistentnoClick))%>%
mutate(outlierPercent = abs(mleEstimateIndiv - mleEstimateGame)) %>%
mutate(error = guess - mleEstimateGame)
cat('excluding', length(confused), 'for being >70 points off estimate at the beginning. ')
cat('excluding', length(persistentnoClick %>% unique()), 'more for inattentiveness')
truePs <- d.guesses %>%
filter(idx == 1) %>%
group_by(treatmentName, gameID, nSquirrelsGame, nRabbitsGame) %>%
tally() %>%
group_by(treatmentName) %>%
summarize(p = mean(nRabbitsGame / (nSquirrelsGame + nRabbitsGame)))
d.guesses_filtered %>%
group_by(treatmentName, idx, gameID) %>%
summarize(guess = mean(guess)) %>%
group_by(treatmentName, idx) %>%
tidyboot::tidyboot_mean(guess) %>%
mutate(treatmentName = case_when(treatmentName == 'experiment1-0.3' ~ 'p=0.3',
treatmentName == 'experiment1-0.7' ~ 'p=0.7')) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(31.63546	, 68.64803), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill=treatmentName),color=NA, alpha = 0.1) +
theme_few() +
labs(y = 'average guess', x = 'round #', color = '') +
scale_color_colorblind() +
scale_fill_colorblind(guide='none') +
scale_x_continuous(breaks = c(1,3,5,7,9)) +
theme(aspect.ratio = 1, legend.position = 'top')
d.guesses_filtered %>%
lmerTest::lmer(guess ~ poly(idx, 2) + treatmentName
+ (1 + poly(idx, 1) || gameID)
+ (1 + poly(idx, 1) || playerID:gameID),
data = .,
contrasts = list(treatmentName = contr.sum(2))) %>%
summary()
d.guesses_filtered %>%
group_by(gameID, treatmentName) %>%
summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
ggplot(aes(x = mleEstimate)) +
geom_histogram(binwidth = 10) +
facet_wrap(~ treatmentName, scales = "free") +
#xlim(0,100) +
labs(title = "Distribution of mleEstimate for each treatmentName") +
theme_few()
d.guesses %>%
group_by(gameID, treatmentName) %>%
summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
ggplot(aes(x = mleEstimate)) +
geom_histogram(binwidth = 10) +
facet_wrap(~ treatmentName, scales = "free") +
#xlim(0,100) +
labs(title = "Distribution of mleEstimate for each treatmentName") +
theme_few()
d.guesses_filtered %>%
filter(!(playerID %in% confused)) %>%
filter(!(playerID %in% persistentnoClick)) %>%
mutate(error = abs(guess - mleEstimateGame)) %>%
lmerTest::lmer(error ~ poly(idx, 2) * treatmentName
+ (1 + poly(idx, 1) | gameID)
+ (1 + poly(idx, 1) | playerID:gameID),
data = .,
contrasts = list(treatmentName = contr.sum(2))) %>%
summary()
d.guesses_filtered %>%
group_by(treatmentName, idx, gameID) %>%
summarize(error = mean(abs(guess - mleEstimateGame))) %>%
group_by(treatmentName, idx) %>%
tidyboot_mean(error) %>%
mutate(treatmentName = case_when(treatmentName == 'experiment1-0.3' ~ 'p=0.3',
treatmentName == 'experiment1-0.7' ~ 'p=0.7')) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill = treatmentName),
color = NA,
alpha = 0.1) +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se =F) +
theme_few() +
labs(y = 'average error', x = 'round #', color = '') +
scale_color_colorblind() +
scale_fill_colorblind(guide="none") +
ylim(0, 30) +
scale_x_continuous(breaks = c(1,3,5,7,9)) +
theme(aspect.ratio = 1, legend.position = 'top')
# Assuming you have a linear model fit earlier
ggplot(d.guesses_filtered, aes(x = outlierPercent, y = error, color = idx)) +
geom_jitter(alpha = 0.1) +
labs(y = "average error", x = "outlier degree", color= "round") +
geom_smooth(aes(group = idx), method = "lm", se = FALSE, alpha = 0.3) +
theme_few() +
scale_color_continuous_tableau(palette = 'Classic Blue') +
guides(color = guide_colorbar(nbin = 9, barheight = 7,barwidth=0.5,
title.position = "top"))+
theme(legend.position = "right", aspect.ratio = 1)  +
ylim(-80,80) +
xlim(0, 80)
#ggsave(here('exp1_outlier.pdf'), height=3, width = 3)
d.guesses_filtered %>%
lmer(error ~ scale(outlierPercent) * scale(idx) + (1 + scale(outlierPercent) + scale(idx) | gameID),
data = .) %>%
summary()
