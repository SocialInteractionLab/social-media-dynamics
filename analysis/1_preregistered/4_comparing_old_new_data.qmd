---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(lmerTest)
conflicts_prefer(lmerTest::lmer)
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)

theme_set(theme_few())
```

## Read in data

```{r}
d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- d.guesses %>%
  filter(!is.na(treatmentName))

unique_rows <- d.guesses %>%
  filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
  distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)

# Remove excess rows from d.guesses
d.guesses <- d.guesses %>%
  filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")))

d.guesses <- bind_rows(d.guesses, unique_rows)  

d.guesses <- d.guesses %>%
  mutate(data = "new")

d.guesses_old <- read_csv(here('data/merged_data_exp.csv'))
gameCounts <- d.guesses_old %>%
  filter(idx == 1) %>%
  group_by(gameID) %>%
  summarize(nRabbitsGame = sum(nRabbits, na.rm = TRUE),
            nSquirrelsGame = sum(nSquirrels, na.rm = TRUE)) 
d.guesses_old <- d.guesses_old %>%
  group_by(playerID) %>%
  filter(any(!is.na(treatmentName))) %>%
  ungroup() %>%
  mutate(data = "old")%>%
  filter(!is.na(guess)) %>%
  mutate(treatmentName = case_when(
    treatmentName == "experiment1-0.7" ~ 'unidirectional-0.7',
    treatmentName == "experiment1-0.3" ~ 'unidirectional-0.3',
    treatmentName =="experiment2-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="experiment2-interactive-0.7" ~ 'interactive-0.7',
    treatmentName =="experiment2-slider-0.3" ~ 'slider-0.3',
    treatmentName =="experiment2-slider-0.7" ~ 'slider-0.7'
  )) %>%
  left_join(gameCounts, by = "gameID") %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
  replace_na(list(nRabbits = 0, nSquirrels = 0, nRabbitsGame = 0, nSquirrelsGame = 0)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100), 
         nCrittersGame = nRabbitsGame + nSquirrelsGame,
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv)) %>%
  arrange(playerID, idx)%>%
  filter(nCrittersGame >= 10 & nCrittersGame <= 30)

d.guesses <- d.guesses %>%
  mutate(treatmentName = case_when(
    treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
    treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
    treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
    treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
    treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
  )) %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
  left_join(gameCounts) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100), 
         nCrittersGame = nRabbitsGame+nSquirrelsGame,
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
  arrange(playerID, idx)

persistentnoClick <- c()  
for (i in 1:11) {
  idx_pair <- c(i+1, i+2)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)

persistentnoClick_old <- c()  
for (i in 1:6) {
  idx_pair <- c(i+1, i+2)
  filtered_players <- d.guesses_old %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick_old <- c(persistentnoClick_old, filtered_players)
}
persistentnoClick_old <- unique(persistentnoClick_old)

persistentnoClick_combined <- unique(c(persistentnoClick_old, persistentnoClick))

d.guesses_combined <- bind_rows(d.guesses, d.guesses_old)
rm(d.guesses, d.guesses_old)
d.guesses <- d.guesses_combined
rm(d.guesses_combined)

#d.guesses <-d.guesses_old
```

## Implement exclusions

```{r}
confused <- d.guesses %>%
  filter(idx == 1) %>%
  filter(nCrittersGame == 0) %>%
  mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)))) %>%
  mutate(discrepency = abs(guess - mleEstimate)) %>% 
  filter(discrepency > 70) %>% 
  pull(playerID)

not_four_players <- d.guesses %>%
   group_by(gameID) %>%
       filter(n_distinct(playerID) != 4) %>%
  ungroup()


```

# filter from here

```{r}
d.guesses <- d.guesses %>% 
  filter(!(gameID %in% persistentnoClick))%>%
  mutate(error = abs(guess - mleEstimateGame))
```

```{r}
d.guesses %>%
  ggplot(aes(x = idx, y = abs(error), color = interaction(condition, data), linetype = condition == 'interactive')) +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none') +
    labs(y = 'average error', x = 'round #', color = 'Condition/Data') +
    theme(aspect.ratio = 1, legend.position = 'top') +
  facet_wrap(~treatment)

d.guesses %>%
  group_by(data) %>%
  summarise(count = n())

```

```{r}
heatmap_data <- df_filtered %>%
  group_by(
    x_bin = cut_interval(entropy, n = 5),
    y_bin = cut_interval(abs(representation), n = 5)
  )

ggplot(heatmap_data, aes(x = x_bin, y = y_bin)) +
  geom_bin2d() +
  scale_fill_gradient(name = "Number of Games", low = "lightblue", high = "darkblue") +
  scale_alpha_continuous(name = "Avg Entropy", range = c(0.1, 1)) +
  labs(
    x = "Average Entropy",
    y = "Absolute Representation"
  ) 

```

```{r}
#colnames(d.guesses)

heatmap_data <- df_filtered %>%
  group_by(
    x_bin = cut_interval(entropy, n = 5),
    y_bin = cut_interval(abs(totalCritters), n = 5)
  )

ggplot(heatmap_data, aes(x = x_bin, y = y_bin)) +
  geom_bin2d() +
  scale_fill_gradient(name = "Number of Games", low = "lightblue", high = "darkblue") +
  scale_alpha_continuous(name = "Avg Entropy", range = c(0.1, 1)) +
  labs(
    x = "Average Entropy",
    y = "total Critters"
  ) 
```

```{r}
heatmap_data <- df_filtered %>%
  group_by(
    x_bin = cut_interval(abs(representation), n = 5),
    y_bin = cut_interval(abs(totalCritters), n = 5)
  )
ggplot(heatmap_data, aes(x = x_bin, y = y_bin)) +
  geom_bin2d() +
  scale_fill_gradient(name = "Number of Games", low = "lightblue", high = "darkblue") +
  scale_alpha_continuous(name = "Avg Entropy", range = c(0.1, 1)) +
  labs(
    x = "Representation",
    y = "total Critters"
  ) 

```
