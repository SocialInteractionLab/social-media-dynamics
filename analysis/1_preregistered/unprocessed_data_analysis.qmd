---
title: "Experiment1"
format: html
editor: visual
---

# Import packages

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
```

## Read in data

```{r, echo=FALSE, message=FALSE, warning=FALSE}
ParseJSONColumn <- function(x) {
  str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>% 
    fromJSON(flatten = T) 
}

# map game IDs to their treatments
d.treatments1 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_1/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()

# map game IDs to their treatments
d.players1 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_1/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

# map round IDs to their indices
d.rounds1 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_1/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()

# create long-form dataframe of all messages sent in each game
d.msgs1 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_1/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)

# create long-form dataframe of all guesses made in each game
d.guesses1 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_1/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess, confidence) %>%
  left_join(d.rounds1) %>%
  left_join(d.treatments1) %>%
  left_join(d.players1) %>% 
  distinct() %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))

```

```{r, echo=FALSE, message=FALSE, warning=FALSE}

# map game IDs to their treatments
d.treatments2 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_2/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()

# map game IDs to their treatments
d.players2 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_2/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

# map round IDs to their indices
d.rounds2 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_2/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()

# create long-form dataframe of all messages sent in each game
d.msgs2 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_2/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)

# create long-form dataframe of all guesses made in each game
d.guesses2 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_2/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess, confidence) %>%
  left_join(d.rounds2) %>%
  left_join(d.treatments2) %>%
  left_join(d.players2) %>% 
  distinct() %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))

```

```{r, echo=FALSE, message=FALSE, warning=FALSE}

# map game IDs to their treatments
d.treatments3 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_3/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()

# map game IDs to their treatments
d.players3 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_3/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

# map round IDs to their indices
d.rounds3 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_3/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()

# create long-form dataframe of all messages sent in each game
d.msgs3 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_3/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)

# create long-form dataframe of all guesses made in each game
d.guesses3 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_3/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess, confidence) %>%
  left_join(d.rounds3) %>%
  left_join(d.treatments3) %>%
  left_join(d.players3) %>% 
  distinct() %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))

```

```{r, echo=FALSE, message=FALSE, warning=FALSE}

# map game IDs to their treatments
d.treatments4 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_4/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()

# map game IDs to their treatments
d.players4 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_4/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

# map round IDs to their indices
d.rounds4 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_4/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()

# create long-form dataframe of all messages sent in each game
d.msgs4 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_4/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)

# create long-form dataframe of all guesses made in each game
d.guesses4 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_4/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess, confidence) %>%
  left_join(d.rounds4) %>%
  left_join(d.treatments4) %>%
  left_join(d.players4) %>% 
  distinct() %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))

```

```{r, echo=FALSE, message=FALSE, warning=FALSE}

# map game IDs to their treatments
d.treatments5 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_5/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()

# map game IDs to their treatments
d.players5 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_5/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

# map round IDs to their indices
d.rounds5 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_5/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()

# create long-form dataframe of all messages sent in each game
d.msgs5 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_5/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)

# create long-form dataframe of all guesses made in each game
d.guesses5 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_5/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess, confidence) %>%
  left_join(d.rounds5) %>%
  left_join(d.treatments5) %>%
  left_join(d.players5) %>% 
  distinct() %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))

```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# map game IDs to their treatments
d.treatments6 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_6/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()

# map game IDs to their treatments
d.players6 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_6/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

# map round IDs to their indices
d.rounds6 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_6/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()

# create long-form dataframe of all messages sent in each game
d.msgs6 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_6/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)

# create long-form dataframe of all guesses made in each game
d.guesses6 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_6/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess, confidence) %>%
  left_join(d.rounds6) %>%
  left_join(d.treatments6) %>%
  left_join(d.players6) %>% 
  distinct() %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))

```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# map game IDs to their treatments
d.treatments7 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_7/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()

# map game IDs to their treatments
d.players7 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_7/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

# map round IDs to their indices
d.rounds7 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_7/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()

# create long-form dataframe of all messages sent in each game
d.msgs7 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_7/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)

# create long-form dataframe of all guesses made in each game
d.guesses7 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_7/playerStages.csv')) %>%
  select(gameID, roundID, playerID, guess, confidence) %>%
  left_join(d.rounds7) %>%
  left_join(d.treatments7) %>%
  left_join(d.players7) %>% 
  distinct() %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))

```

```{r, echo=FALSE, message=FALSE, warning=FALSE}

# map game IDs to their treatments
d.treatments8 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_8/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()

# map game IDs to their treatments
d.players8 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_8/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

# map round IDs to their indices
d.rounds8 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_8/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()

# create long-form dataframe of all messages sent in each game
d.msgs8 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_8/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)

# create long-form dataframe of all guesses made in each game
d.guesses8 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_8/playerStages.csv')) %>%
  select(gameID, roundID, playerID, guess, confidence) %>%
  left_join(d.rounds8) %>%
  left_join(d.treatments8) %>%
  left_join(d.players8) %>% 
  distinct() %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))

```

```{r, echo=FALSE, message=FALSE, warning=FALSE}

# map game IDs to their treatments
d.treatments9 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_9/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()

# map game IDs to their treatments
d.players9 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_9/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

# map round IDs to their indices
d.rounds9 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_9/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()

# create long-form dataframe of all messages sent in each game
d.msgs9 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_9/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)

# create long-form dataframe of all guesses made in each game
d.guesses9 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_9/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess, confidence) %>%
  left_join(d.rounds9) %>%
  left_join(d.treatments9) %>%
  left_join(d.players9) %>% 
  distinct() %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))

```

```{r, echo=FALSE, message=FALSE, warning=FALSE}

# map game IDs to their treatments
d.treatments10 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_10/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()

# map game IDs to their treatments
d.players10 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_10/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

# map round IDs to their indices
d.rounds10 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_10/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()

# create long-form dataframe of all messages sent in each game
d.msgs10 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_10/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)

# create long-form dataframe of all guesses made in each game
d.guesses10 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_10/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess, confidence) %>%
  left_join(d.rounds10) %>%
  left_join(d.treatments10) %>%
  left_join(d.players10) %>% 
  distinct() %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}

# map game IDs to their treatments
d.treatments11 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_11/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()

# map game IDs to their treatments
d.players11 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_11/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

# map round IDs to their indices
d.rounds11 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_11/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()

# create long-form dataframe of all messages sent in each game
d.msgs11 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_11/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)

# create long-form dataframe of all guesses made in each game
d.guesses11 <- read_csv(here('data/1_preregistered_experiment_1/1_prereg_11/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess, confidence) %>%
  left_join(d.rounds11) %>%
  left_join(d.treatments11) %>%
  left_join(d.players11) %>% 
  distinct() %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))
```

```{r}
d.guesses <- rbind(d.guesses1, d.guesses2, d.guesses3, d.guesses4, d.guesses5, d.guesses6, d.guesses7, d.guesses8, d.guesses9, d.guesses10, d.guesses11)

rm(d.guesses1, d.guesses10,d.guesses11, d.guesses2, d.guesses3, d.guesses4, d.guesses5, d.guesses6, d.guesses7, d.guesses8, d.guesses9, d.msgs1, d.msgs10, d.msgs11, d.msgs2, d.msgs3, d.msgs4, d.msgs5, d.msgs6, d.msgs7, d.msgs8, d.msgs9, d.rounds1, d.rounds10, d.rounds11, d.rounds2, d.rounds3, d.rounds4, d.rounds5, d.rounds6, d.rounds7, d.rounds8, d.rounds9, d.treatments1, d.treatments10, d.treatments11, d.treatments2, d.treatments3, d.treatments4, d.treatments5, d.treatments6, d.treatments7, d.treatments8, d.treatments9, d.players1, d.players10, d.players11, d.players2, d.players3, d.players4, d.players5, d.players6, d.players7, d.players8, d.players9)
```

```{r}
d.guesses <- d.guesses %>% 
  mutate(error = abs(guess - mleEstimateGame))
         
d.guesses %>%
  group_by(idx) %>%
  summarise(na_count = sum(is.na(error))) %>%
  ggplot(aes(x = idx, y = na_count)) +
  geom_line() +
  labs(x = "Index", y = "NA Count", title = "NA Count Over Time") +
  theme_minimal() 

```

```{r}
d.guesses2 <- d.guesses%>%
  filter(!is.na(treatmentName)) %>%    
  filter(!is.na(guess)) %>%  
  separate(treatmentName, into = c("garbo", "treatment","percent"), sep = "-")

d.guesses2 %>%
  group_by(treatment, idx, gameID) %>%
  summarize(error = mean(error, na.rm = TRUE), .groups = 'drop') %>%
  group_by(treatment, idx) %>%
  tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatment)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = 0, linetype = 'dotted') +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none') +
    scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
    labs(y = 'average error', x = 'round #', color = '') +
    theme(aspect.ratio = 1, legend.position = 'top')

```
