---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(lmerTest)
conflicts_prefer(lmerTest::lmer)
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(emmeans)
library(ggthemes)

theme_set(theme_few())
```

## Read in data

```{r, echo=FALSE, message=FALSE, warning=FALSE}
d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- d.guesses %>%
  filter(!is.na(treatmentName))

unique_rows <- d.guesses %>%
  filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
  distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)

d.guesses <- d.guesses %>%
  filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")))

d.guesses <- bind_rows(d.guesses, unique_rows)  

```

## Implement exclusions

```{r}


persistentnoClick <- c()  
for (i in 1:11) {
  idx_pair <- c(i+1, i+2)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx %in% idx_pair]))) %>%
      filter(idx != 1) %>%  # Filter out idx == 1
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)


games_with_4_players <- d.guesses %>%
   # filter(!(playerID %in% persistentnoClick)) %>%
  group_by(gameID) %>%
  summarise(unique_players = n_distinct(playerID)) %>% 
  filter(unique_players == 4)

NCritterCount <- d.guesses %>%  distinct(playerID, gameID, .keep_all = TRUE) %>%group_by(gameID) %>%
  summarise(
    nRabbitsGame = sum(nRabbits, na.rm = TRUE),
    nSquirrelsGame = sum(nSquirrels, na.rm = TRUE),
    nCrittersGame = nRabbitsGame+nSquirrelsGame
  )
d.guesses <-left_join(d.guesses, NCritterCount, by = "gameID")

d.guesses <- semi_join(d.guesses, games_with_4_players, by = "gameID") %>% filter(!(gameID %in% persistentnoClick))

count <- d.guesses %>% 
  distinct(gameID, treatmentName) %>% 
  count(treatmentName, name = "n_games")

print(count)
```

### Game-level distribution

```{r}


d.guesses <- d.guesses %>% 
  mutate(treatmentName = case_when(
    treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
    treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
    treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
    treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
    treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
  )) %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
  left_join(gameCounts) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100), 
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
  arrange(playerID, idx)


```

```{r}
d.guesses %>%   
  filter(!is.na(treatment)) %>%
  group_by(gameID, treatment) %>%
  summarize(mleEstimate = mean(mleEstimateGame)) %>%
  ggplot(aes(x = mleEstimate, fill = treatment)) +
    geom_density(binwidth = 30, alpha = 0.5) 
```

```{r}
playercount <- d.guesses %>%
   filter(idx == 1) %>%
   distinct(playerID, .keep_all = TRUE) %>% 
  group_by(treatment, condition) %>% 
  tally()

gamecount <- d.guesses %>%
   filter(idx == 1) %>%
   distinct(gameID, .keep_all = TRUE) %>% 
  group_by(treatment, condition) %>% 
  tally()
```

## Result #2: Examine error (collapsing across treatment)

```{r}
d.guesses %>%
  group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
  summarize(gameError = mean(guess - mleEstimateGame, na.rm= T)) %>%
  group_by(treatment, condition, idx) %>%
  tidyboot::tidyboot_mean(gameError, na.rm = T) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = condition, group = interaction(condition, treatment))) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 1), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    scale_color_colorblind() +
    labs(y = 'average error', x = 'round #') 
```

```{r}

model <- lmer(guess ~ treatment * idx + (1 | gameID/playerID), data = d.guesses)
summary(model)
```

```{r}

d.guesses %>%
  ungroup() %>%
  mutate(condition = fct_relevel(condition, 'slider', 'unidirectional', 'interactive')) %>%
   { print(contrasts(.$condition)); . } %>%
  mutate(error = abs(guess - mleEstimateGame)) %>%
  lmer(scale(error) ~ poly(idx, 2) + condition + (1 + poly(idx, 1) || gameID/playerID),
       data = .,
       contrasts = list(condition = contr.sum(3)), #each condition is being compared to all of them
       control = lmerControl(optimizer = 'bobyqa')) %>%
  summary()
```

```{r}
d.guesses %>%  
  group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm= T)) %>%
  group_by(condition, idx) %>%
  tidyboot::tidyboot_mean(error, na.rm = T) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = condition, linetype = condition == 'interactive')) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none') +
    scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
    labs(y = 'average error', x = 'round #', color = '')  +
    theme(aspect.ratio = 1, legend.position = 'top')


```

```{r}
#library(pbkrtest)
emm_options(lmerTest.limit = 7826)
#emm_options(pbkrtest.limit = 7826)

error_data <- d.guesses %>%  
  group_by(treatment, condition, idx, gameID, mleEstimateGame,playerID) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(idx = scale(idx, scale= FALSE)) #center idx

model <- lmer(error ~ condition * idx + (1 | gameID/playerID), data = error_data, control = lmerControl(optCtrl = list(maxfun = 100000)))
#summary(model)

model2 <- lmer((error) ~ idx + (1+idx | gameID/playerID), data = error_data)
summary(model2)

model3 <- lmer(error ~ condition  + (1 | idx) + (1 | gameID/playerID), data = error_data)
#summary(model3)

model4 <- lmer((error) ~ idx + condition + (1+idx |gameID/playerID), data = error_data)
#summary(model4)

anova(model2, model4)


#bonferroni adjusts for multiple comparisons
pairwise_results <- model %>%
  emmeans(pairwise ~ condition, adjust = "bonferroni") %>%
  pluck("contrasts")

# View the pairwise comparisons
print(pairwise_results)
```

```{r}
print(error_data)
```

```{r}
model_without_condition <- glmer(error ~ idx + (1 + idx | gameID/playerID), family= "poisson", data = error_data) #"fit an intercept for every gameID and every player in the game" but +idx is because we have repeated measures you can get a slope for every game
model_with_condition <- glmer(error ~ condition + idx + (1 + idx | gameID/playerID), family= "poisson", data = error_data)
model_with_interaction <-glmer(error ~ condition*idx + (1 + idx | gameID/playerID), family= "poisson", data = error_data)
anova(model_without_condition, model_with_condition, model_with_interaction)

#keep it maximal = as many random effects as you can hold (game, player, slope)
```

```{r}
summary(model_with_condition)
```

\

# Result #3: Relationship to total information

```{r}
d.guesses %>%
  ungroup() %>%
  group_by(condition, gameID,nCrittersGame, idx) %>%
  summarize(gameError = abs(mean(mleEstimateGame) - mean(guess))) %>%
  ggplot(aes(x = nCrittersGame, y = log1p(gameError), color = condition)) +
      geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 1)) +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    facet_grid(~ condition) +
    labs(y = 'average error', x = 'total sample size') +
    theme(aspect.ratio = 2, legend.position = 'none')

#ggsave(here('exp2_prereg_samplesize.pdf'), height=3, width = 8)
```

```{r}


```

# Results #4: Self-weighing

```{r}
d.guesses %>%
  arrange(playerID, idx) %>% 
  group_by(playerID) %>%
  mutate(prevGuess = lag(guess)) %>%
  mutate(distToSelf = abs(guess - prevGuess)) %>%
  filter(idx > 2) %>%
  group_by(idx, condition) %>%
  tidyboot_mean(distToSelf, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = condition)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 1), se = FALSE) +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none') +
    scale_x_continuous(breaks = c(2, 4, 6, 8, 10, 12)) +
    labs(y = 'change from previous guess', x = 'reference point (round #)', color = '') +
    theme_few() +
    theme(aspect.ratio = 1, legend.position = 'top')




```

```{r}
m1 <- d.guesses %>% 
  mutate(condition = factor(condition)) %>%        
  group_by(playerID) %>% 
  mutate(prevGuess = lag(guess)) %>% 
  arrange(playerID, idx) %>% 
  mutate(distToSelf = abs(guess - prevGuess)) %>% 
  filter(idx > 1) %>%
  mutate(condition = fct_relevel(condition, 'slider', 'unidirectional', 'interactive')) %>%
   { print(contrasts(.$condition)); . } %>%
  lmer(
    distToSelf ~ idx + condition + (1 + idx | gameID / playerID),
    data = .,
    contrasts = list(condition = contr.sum)
  )

m2 <- d.guesses %>% 
  group_by(playerID) %>%
  mutate(prevGuess = lag(guess)) %>% 
  arrange(playerID, idx) %>%
  mutate(distToSelf = abs(guess - prevGuess)) %>%
  group_by(idx, condition) %>% 
  filter(idx>1) %>%
  lmer(distToSelf ~ idx * condition + (1+ idx | gameID/playerID), 
       data = .) 

#anova(m1,m2)
summary(m1)
#summary(m2)
```

### games with incomplete information

```{r}
reducedPlayers <- d.guesses %>%
  group_by(gameID) %>%
  filter(n_distinct(playerID) != 4) %>%
  ungroup()

reducedInfo <- d.guesses %>%
  filter(!(gameID %in% reducedPlayers)) %>%
  filter(nCrittersGame < 20)

reducedPlayers <- reducedPlayers %>%
     filter(!(gameID %in% reducedInfo))

print(nrow(reducedInfo))

print(nrow(reducedPlayers))
   #games with incomplete information (less that 20 samples/less than 4 players
```

### confidence

```{r}
summary_data <- d.guesses %>%
  group_by(treatment, condition, confidence, gameID, mleEstimateGame) %>%
  summarize(gameError = mean(guess - mleEstimateGame, na.rm = TRUE)) %>%
  group_by(condition, confidence, treatment) %>%
  tidyboot::tidyboot_mean(gameError, na.rm = TRUE)

ggplot(summary_data, aes(x = confidence, y = abs(empirical_stat), color = condition, group = interaction(condition, treatment))) +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 1), se = FALSE) +
  geom_hline(yintercept = 0, linetype = 'dotted') +
  theme_few() +
  scale_color_colorblind() +
  labs(y = 'error', x = 'confidence')
```

```{r}
ggplot(d.guesses, aes(x = idx, y = confidence, color = condition)) +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = 0, linetype = 'dotted') +
  theme_few() +
  scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
  scale_color_colorblind() +
  labs(y = 'confidence', x = 'round') +
  ylim(50, NA)

```

# 
