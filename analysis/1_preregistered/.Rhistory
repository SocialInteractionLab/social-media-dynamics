contrasts = list(treatmentName = contr.sum(2)))
interactives %>%
filter(!(playerID %in% confused)) %>%
filter(!(playerID %in% persistentnoClick)) %>%
mutate(error = abs(guess - treatAvg)) %>%
lmerTest::lmer(error ~ poly(idx, 2) * treatmentName
+ (1 + poly(idx, 1) | gameID)
+ (1 + poly(idx, 1) | playerID:gameID),
data = .,
contrasts = list(treatmentName = contr.sum(2))) %>%
summary()
d.guesses %>%
filter(!(playerID %in% confused)) %>%
filter(!(playerID %in% persistentnoClick)) %>%
group_by(treatmentName, idx, gameID) %>%
summarize(error = mean(abs(guess - mleEstimateGame))) %>%
group_by(treatmentName, idx) %>%
tidyboot_mean(error) %>%
mutate(treatmentName = case_when(treatmentName == 'rerun-interactive-0.3' ~ 'p=0.3',
treatmentName == 'rerun-interactive- 0.7' ~ 'p=0.7')) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill = treatmentName),
color = NA,
alpha = 0.1) +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se =F) +
theme_few() +
labs(y = 'average error', x = 'round #', color = '', title = 'interactive') +
scale_color_colorblind() +
scale_fill_colorblind(guide="none") +
ylim(0, 30) +
scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
theme(aspect.ratio = 1, legend.position = 'top')
ggsave(here('exp1_raw_error_prereg_interactive.pdf'), height=3, width = 3)
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
theme_set(theme_few())
d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- d.guesses %>%
group_by(playerID) %>%
filter(any(!is.na(treatmentName))) %>%
ungroup()
unique_rows <- d.guesses %>%
filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)
d.guesses <- d.guesses %>%
filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")))
d.guesses <- bind_rows(d.guesses, unique_rows)
d.guesses <- d.guesses %>%
mutate(data = "new")
d.guesses_old <- read_csv(here('data/merged_data_exp.csv'))
gameCounts <- d.guesses_old %>%
filter(idx == 1) %>%
group_by(gameID) %>%
summarize(nRabbitsGame = sum(nRabbits, na.rm = TRUE),
nSquirrelsGame = sum(nSquirrels, na.rm = TRUE))
d.guesses_old <- d.guesses_old %>%
group_by(playerID) %>%
filter(any(!is.na(treatmentName))) %>%
ungroup() %>%
mutate(data = "old")%>%
filter(!is.na(guess)) %>%
mutate(treatmentName = case_when(
treatmentName == "experiment1-0.7" ~ 'unidirectional-0.7',
treatmentName == "experiment1-0.3" ~ 'unidirectional-0.3',
treatmentName =="experiment2-interactive-0.3" ~ 'interactive-0.3',
treatmentName =="experiment2-interactive-0.7" ~ 'interactive-0.7',
treatmentName =="experiment2-slider-0.3" ~ 'slider-0.3',
treatmentName =="experiment2-slider-0.7" ~ 'slider-0.7'
)) %>%
left_join(gameCounts, by = "gameID") %>%
separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
replace_na(list(nRabbits = 0, nSquirrels = 0, nRabbitsGame = 0, nSquirrelsGame = 0)) %>%
mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
nCrittersGame = nRabbitsGame + nSquirrelsGame,
mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv)) %>%
arrange(playerID, idx)%>%
filter(nCrittersGame >= 10 & nCrittersGame <= 30)
d.guesses <- d.guesses %>%
mutate(treatmentName = case_when(
treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
)) %>%
separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
left_join(gameCounts) %>%
mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
nCrittersGame = nRabbitsGame+nSquirrelsGame,
mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
arrange(playerID, idx)
persistentnoClick <- c()
for (i in 1:11) {
idx_pair <- c(i+1, i+2)
filtered_players <- d.guesses %>%
group_by(playerID) %>%
filter(all(is.na(guess[idx_pair]))) %>%
distinct(playerID, .keep_all = TRUE) %>%
pull(playerID)
persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)
persistentnoClick_old <- c()
for (i in 1:6) {
idx_pair <- c(i+1, i+2)
filtered_players <- d.guesses_old %>%
group_by(playerID) %>%
filter(all(is.na(guess[idx_pair]))) %>%
distinct(playerID, .keep_all = TRUE) %>%
pull(playerID)
persistentnoClick_old <- c(persistentnoClick_old, filtered_players)
}
persistentnoClick_old <- unique(persistentnoClick_old)
persistentnoClick_combined <- unique(c(persistentnoClick_old, persistentnoClick))
d.guesses_combined <- bind_rows(d.guesses, d.guesses_old)
rm(d.guesses, d.guesses_old)
d.guesses <- d.guesses_combined
rm(d.guesses_combined)
#d.guesses <-d.guesses_old
confused <- d.guesses %>%
filter(idx == 1) %>%
filter(nCrittersGame == 0) %>%
mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)))) %>%
mutate(discrepency = abs(guess - mleEstimate)) %>%
filter(discrepency > 70) %>%
pull(playerID)
not_four_players <- d.guesses %>%
group_by(gameID) %>%
filter(n_distinct(playerID) != 4) %>%
ungroup()
d.guesses <- d.guesses %>%
mutate(error = abs(guess - mleEstimateGame))
d.guesses %>%
ggplot(aes(x = idx, y = abs(error), color = interaction(condition, data), linetype = condition == 'interactive')) +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_few() +
scale_color_brewer(palette = 'Accent') +
guides(linetype = 'none') +
labs(y = 'average error', x = 'round #', color = 'Condition/Data') +
theme(aspect.ratio = 1, legend.position = 'top') +
facet_wrap(~treatment)
d.guesses %>%
group_by(data) %>%
summarise(count = n())
df_filtered <- d.guesses %>%
filter(idx == 2) %>%
group_by(gameID) %>%
mutate(
nCritters = nSquirrels + nRabbits,
totalCritters = sum(nCritters),
prob = nCritters / totalCritters,  # Probability per player
entropy = -sum(ifelse(prob > 0, prob * log(prob), 0)),  # Calculate entropy across group
avgMlePlayers = mean(mleEstimateIndiv),
representation = abs(abs(avgMlePlayers) - abs(mleEstimateGame))
) %>%
ungroup() %>%
select(playerID, gameID, nCrittersGame, treatment, error, prob, totalCritters,
entropy, representation, condition)
# Plot the critter percentages grouped together
ggplot(df_filtered, aes(x = "", y = entropy)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "blue") +
labs(title = "entropy Distribution Across All Players",
x = "",
y = "entropy") +
theme_minimal()
heatmap_data <- df_filtered %>%
group_by(
x_bin = cut_interval(entropy, n = 5),
y_bin = cut_interval(abs(representation), n = 5)
)
# Create the heatmap
ggplot(heatmap_data, aes(x = x_bin, y = y_bin)) +
geom_bin2d() +
scale_fill_gradient(name = "Number of Games", low = "lightblue", high = "darkblue") +
scale_alpha_continuous(name = "Avg Entropy", range = c(0.1, 1)) +
labs(
x = "Average Entropy",
y = "Absolute Representation"
)
colnames(d.guesses)
heatmap_data <- df_filtered %>%
group_by(
x_bin = cut_interval(entropy, n = 5),
y_bin = cut_interval(abs(totalCritters), n = 5)
)
# Create the heatmap
ggplot(heatmap_data, aes(x = x_bin, y = y_bin)) +
geom_bin2d() +
scale_fill_gradient(name = "Number of Games", low = "lightblue", high = "darkblue") +
scale_alpha_continuous(name = "Avg Entropy", range = c(0.1, 1)) +
labs(
x = "Average Entropy",
y = "total Critters"
)
heatmap_data <- df_filtered %>%
group_by(
x_bin = cut_interval(abs(representation), n = 5),
y_bin = cut_interval(abs(totalCritters), n = 5)
)
# Create the heatmap
ggplot(heatmap_data, aes(x = x_bin, y = y_bin)) +
geom_bin2d() +
scale_fill_gradient(name = "Number of Games", low = "lightblue", high = "darkblue") +
scale_alpha_continuous(name = "Avg Entropy", range = c(0.1, 1)) +
labs(
x = "Representation",
y = "total Critters"
)
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
theme_set(theme_few())
d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- d.guesses %>%
group_by(playerID) %>%
filter(any(!is.na(treatmentName))) %>%
ungroup()
unique_rows <- d.guesses %>%
filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)
d.guesses <- d.guesses %>%
filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")))
d.guesses <- bind_rows(d.guesses, unique_rows)
d.guesses <- d.guesses %>%
mutate(data = "new")
d.guesses_old <- read_csv(here('data/merged_data_exp.csv'))
gameCounts <- d.guesses_old %>%
filter(idx == 1) %>%
group_by(gameID) %>%
summarize(nRabbitsGame = sum(nRabbits, na.rm = TRUE),
nSquirrelsGame = sum(nSquirrels, na.rm = TRUE))
d.guesses_old <- d.guesses_old %>%
group_by(playerID) %>%
filter(any(!is.na(treatmentName))) %>%
ungroup() %>%
mutate(data = "old")%>%
filter(!is.na(guess)) %>%
mutate(treatmentName = case_when(
treatmentName == "experiment1-0.7" ~ 'unidirectional-0.7',
treatmentName == "experiment1-0.3" ~ 'unidirectional-0.3',
treatmentName =="experiment2-interactive-0.3" ~ 'interactive-0.3',
treatmentName =="experiment2-interactive-0.7" ~ 'interactive-0.7',
treatmentName =="experiment2-slider-0.3" ~ 'slider-0.3',
treatmentName =="experiment2-slider-0.7" ~ 'slider-0.7'
)) %>%
left_join(gameCounts, by = "gameID") %>%
separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
replace_na(list(nRabbits = 0, nSquirrels = 0, nRabbitsGame = 0, nSquirrelsGame = 0)) %>%
mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
nCrittersGame = nRabbitsGame + nSquirrelsGame,
mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv)) %>%
arrange(playerID, idx)%>%
filter(nCrittersGame >= 10 & nCrittersGame <= 30)
d.guesses <- d.guesses %>%
mutate(treatmentName = case_when(
treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
)) %>%
separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
left_join(gameCounts) %>%
mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
nCrittersGame = nRabbitsGame+nSquirrelsGame,
mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
arrange(playerID, idx)
persistentnoClick <- c()
for (i in 1:11) {
idx_pair <- c(i+1, i+2)
filtered_players <- d.guesses %>%
group_by(playerID) %>%
filter(all(is.na(guess[idx_pair]))) %>%
distinct(playerID, .keep_all = TRUE) %>%
pull(playerID)
persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)
persistentnoClick_old <- c()
for (i in 1:6) {
idx_pair <- c(i+1, i+2)
filtered_players <- d.guesses_old %>%
group_by(playerID) %>%
filter(all(is.na(guess[idx_pair]))) %>%
distinct(playerID, .keep_all = TRUE) %>%
pull(playerID)
persistentnoClick_old <- c(persistentnoClick_old, filtered_players)
}
persistentnoClick_old <- unique(persistentnoClick_old)
persistentnoClick_combined <- unique(c(persistentnoClick_old, persistentnoClick))
d.guesses_combined <- bind_rows(d.guesses, d.guesses_old)
rm(d.guesses, d.guesses_old)
d.guesses <- d.guesses_combined
rm(d.guesses_combined)
#d.guesses <-d.guesses_old
confused <- d.guesses %>%
filter(idx == 1) %>%
filter(nCrittersGame == 0) %>%
mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)))) %>%
mutate(discrepency = abs(guess - mleEstimate)) %>%
filter(discrepency > 70) %>%
pull(playerID)
not_four_players <- d.guesses %>%
group_by(gameID) %>%
filter(n_distinct(playerID) != 4) %>%
ungroup()
d.guesses <- d.guesses %>%
mutate(error = abs(guess - mleEstimateGame))
d.guesses %>%
ggplot(aes(x = idx, y = abs(error), color = interaction(condition, data), linetype = condition == 'interactive')) +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
theme_few() +
scale_color_brewer(palette = 'Accent') +
guides(linetype = 'none') +
labs(y = 'average error', x = 'round #', color = 'Condition/Data') +
theme(aspect.ratio = 1, legend.position = 'top') +
facet_wrap(~treatment)
d.guesses %>%
group_by(data) %>%
summarise(count = n())
df_filtered <- d.guesses %>%
filter(idx == 2) %>%
group_by(gameID) %>%
mutate(
nCritters = nSquirrels + nRabbits,
totalCritters = sum(nCritters),
prob = nCritters / totalCritters,  # Probability per player
entropy = -sum(ifelse(prob > 0, prob * log(prob), 0)),  # Calculate entropy across group
avgMlePlayers = mean(mleEstimateIndiv),
representation = abs(abs(avgMlePlayers) - abs(mleEstimateGame))
) %>%
ungroup() %>%
select(playerID, gameID, nCrittersGame, treatment, error, prob, totalCritters,
entropy, representation, condition)
# Plot the critter percentages grouped together
ggplot(df_filtered, aes(x = "", y = entropy)) +
geom_jitter(width = 0.2, alpha = 0.6, color = "blue") +
labs(title = "entropy Distribution Across All Players",
x = "",
y = "entropy") +
theme_minimal()
heatmap_data <- df_filtered %>%
group_by(
x_bin = cut_interval(entropy, n = 5),
y_bin = cut_interval(abs(representation), n = 5)
)
# Create the heatmap
ggplot(heatmap_data, aes(x = x_bin, y = y_bin)) +
geom_bin2d() +
scale_fill_gradient(name = "Number of Games", low = "lightblue", high = "darkblue") +
scale_alpha_continuous(name = "Avg Entropy", range = c(0.1, 1)) +
labs(
x = "Average Entropy",
y = "Absolute Representation"
)
colnames(d.guesses)
heatmap_data <- df_filtered %>%
group_by(
x_bin = cut_interval(entropy, n = 5),
y_bin = cut_interval(abs(totalCritters), n = 5)
)
# Create the heatmap
ggplot(heatmap_data, aes(x = x_bin, y = y_bin)) +
geom_bin2d() +
scale_fill_gradient(name = "Number of Games", low = "lightblue", high = "darkblue") +
scale_alpha_continuous(name = "Avg Entropy", range = c(0.1, 1)) +
labs(
x = "Average Entropy",
y = "total Critters"
)
heatmap_data <- df_filtered %>%
group_by(
x_bin = cut_interval(abs(representation), n = 5),
y_bin = cut_interval(abs(totalCritters), n = 5)
)
# Create the heatmap
ggplot(heatmap_data, aes(x = x_bin, y = y_bin)) +
geom_bin2d() +
scale_fill_gradient(name = "Number of Games", low = "lightblue", high = "darkblue") +
scale_alpha_continuous(name = "Avg Entropy", range = c(0.1, 1)) +
labs(
x = "Representation",
y = "total Critters"
)
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
theme_set(theme_few())
ParseJSONColumn <- function(x) {
str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>%
fromJSON(flatten = T)
}
d.guesses <- read_csv(here('data/1_preregistered_experiment_1/1_extracted_msgs_prereg/cleaned_messages.csv'))
unique_rows <- d.guesses %>%
filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3"))# %>%
#  distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)
d.guesses <- d.guesses %>%
filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")))
d.guesses <- bind_rows(d.guesses, unique_rows)
d.guesses <- d.guesses %>%
filter(round != 1)
confused <- d.guesses %>%
filter(round == 1) %>%
mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
mutate(discrepency = abs(guess - mleEstimate)) %>%
filter(discrepency > 70) %>%
pull(playerID)
d.guesses <- d.guesses %>%
mutate(treatmentName = case_when(
treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
)) %>%
left_join(gameCounts) %>%
mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
nCrittersGame = nRabbitsGame+nSquirrelsGame,
mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
arrange(playerID, round)
View(d.guesses)
d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- d.guesses %>%
filter(!is.na(treatmentName))
unique_rows <- d.guesses %>%
filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)
# Remove excess rows from d.guesses
d.guesses <- d.guesses %>%
filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")))
d.guesses <- bind_rows(d.guesses, unique_rows)
d.messages <- read_csv(here('data/1_preregistered_experiment_1/1_extracted_msgs_prereg/cleaned_messages.csv'))
View(d.messages)
View(d.guesses)
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
theme_set(theme_few())
d.allmsg <- read_csv(here('analysis/2_experiment_2/coded.csv'))%>%
rename_with(~ gsub("\\.x$", "", .x), ends_with(".x")) %>%
select(-ends_with(".y"))
d.all <- read_csv(here('analysis/2_experiment_2/exp2_clean_data_jan17.csv'))
d.allmsg_exp1 <- read_csv(here('analysis/2_experiment_2/recoded_messages_exp1.csv'))%>%
rename_with(~ gsub("\\.x$", "", .x), ends_with(".x")) %>%
select(-ends_with(".y"))
d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))%>%
rename_with(~ gsub("\\.x$", "", .x), ends_with(".x")) %>%
select(-ends_with(".y"))
d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
theme_set(theme_few())
d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- read_csv(('data/PreregMergedGuesses.csv'))
d.guesses <- read_csv('data/PreregMergedGuesses.csv')
getwd()
d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
theme_set(theme_few())
getwd()
d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
