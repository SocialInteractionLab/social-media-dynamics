"pb_count" = "personal belief", "sb_count" = "social belief")) +
labs(title = "",
x = "error (binned)",
y = "proportion",
fill = "message type") +
theme(aspect.ratio = 1, legend.position = "top") +
guides(fill = guide_legend(nrow = 2))
combined_df <- combined_df %>%
filter(!is.na(guess))%>%
group_by(gameID, round) %>%
mutate(avg_error = mean(abs(error))) %>%
ungroup() %>%
group_by(gameID) %>%
mutate(
error_change_overall = abs(first(avg_error[round == max(round)]) - first(avg_error[round == min(round)])),
s_count = sum(str_count(coding, "s"), na.rm = TRUE)
) %>%
ungroup()
ggplot(summary_data, aes(x = avg_error, y =sb_count)) +
geom_point() +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
) +geom_smooth(method="lm")
combined_df_errorChange <- combined_df %>%
select(-text) %>%
group_by(across(-coding)) %>%
summarise(coding = paste(coding, collapse = " "), .groups = "drop")
combined_df_errorChange <- combined_df_errorChange %>%
mutate(round = as.numeric(round)) %>%
left_join(
combined_df_errorChange %>%
mutate(round = as.numeric(round)) %>%
mutate(round = round + 1) %>%
select(gameID, recipient, round, coding) %>%
rename(coding_received = coding),
by = c("gameID", "sender.id" = "recipient", "round")
)%>%
mutate(coding_received_s =  paste0(
if_else(str_detect(coding_received, "s"), "s", ""),
if_else(str_detect(coding_received, "p"), "p", "")
))%>%
mutate(roundError = abs(mleGame*100 - guess))
combined_df_errorChange <- combined_df_errorChange%>%
left_join(
combined_df_errorChange %>%
mutate(round = as.numeric(round)) %>%
mutate(round = round + 1) %>%
select(gameID, sender.id, round, roundError) %>%
rename(roundErrorPrev = roundError),
by = c("gameID", "sender.id", "round"))%>%
mutate(roundErrorChange = abs(roundErrorPrev - roundError))
combined_df_errorChange <- combined_df_errorChange %>% filter(!treatment == "unidirectional")%>%
mutate(s_bin = cut(s_count, breaks = seq(min(s_count), max(s_count), length.out = 4), include.lowest = TRUE))
ggplot(combined_df_errorChange, aes(x = round, y = error, color = s_bin)) +
geom_smooth(method = 'lm') +
#geom_point() +
theme_minimal()
lmer(error ~ s_bin + (1 | gameID), data = combined_df_errorChange)
combined_df_errorChange <- combined_df_errorChange %>%
mutate(s_bin = ifelse(s_count < 1, "zero", "not zero"))
combined_df_errorChange <- combined_df_errorChange %>%
mutate(s_bin = cut(s_count, breaks = seq(min(s_count), max(s_count), length.out = 3), include.lowest = TRUE)) %>%
filter(!treatment == "unidirectional")
ggplot(combined_df_errorChange, aes(x = round, y = error, color = s_bin)) +
geom_smooth(method = 'lm',formula = y~poly(x,2)) +
stat_summary(fun = mean, geom = "point")+
theme_minimal()
d.all_minmax <- combined_df_errorChange %>%  mutate(
entropy_median = median(entropy_new),
representation_median = median(representation),
nCrittersGame_median = median(totalCritters)
) %>%
mutate(
entropy_minmax = ifelse(entropy_new <= entropy_median, "H_etpy", "E_etpy"),
representation_minmax = ifelse(representation <= representation_median, "E_rep", "H_rep"),
nCrittersGame_minmax = ifelse(totalCritters <= nCrittersGame_median, "H_crits", "E_crits"),
group = paste(entropy_minmax, representation_minmax, nCrittersGame_minmax, sep = "\n")
) %>%
group_by(gameID, s_bin) %>%
mutate(errorAvg = mean(error, na.rm = TRUE)) %>%
ungroup()
print(unique(d.all_minmax %>% select(entropy_median, representation_median, nCrittersGame_median)))
lm_model <- lm(errorAvg ~ group, data = d.all_minmax)
# Calculate center lines and their distances
group_distances <- d.all_minmax %>%
filter(group !='E_etpy\nH_rep\nE_crits') %>%
group_by(group, s_bin) %>%
summarise(median_error = median(errorAvg)) %>%
pivot_wider(names_from = s_bin, values_from = median_error) %>%
mutate(distance = abs(`(19.5,39]` - `[0,19.5]`)) %>%
arrange(distance)
# Calculate game counts per group and s_count condition
counts <- d.all_minmax %>%
filter(group !='E_etpy\nH_rep\nE_crits') %>%
group_by(group, s_bin) %>%
summarise(nGames = n()) %>%
pivot_wider(names_from = s_bin, values_from = nGames, names_prefix = "nGames_")
# Calculate center lines for group ordering
center_lines <- d.all_minmax %>%
group_by(group, s_bin) %>%
filter(group !='E_etpy\nH_rep\nE_crits')%>%
summarise(center_line = median(errorAvg)) %>%
pivot_wider(names_from = s_bin, values_from = center_line) %>%
mutate(center_line_distance =abs(`(19.5,39]` - `[0,19.5]`))
# Reorder groups based on center line distance
d.all_minmax2 <- d.all_minmax %>%
mutate(group = factor(group, levels = center_lines %>%
arrange(center_line_distance) %>%
pull(group))) %>%
filter(group !='E_etpy\nH_rep\nE_crits') %>%
droplevels()
d <- d.all_minmax2 %>%
ggplot(aes(x = group, y = errorAvg, color = as.factor(s_bin), fill = as.factor(s_bin))) +
scale_color_brewer(palette = 'Accent') +
scale_fill_brewer(palette = 'Accent') +
geom_boxplot(alpha = 0.5) +
labs(x = "", y = "Error", color = "s_bin", fill = "s_bin") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),
legend.position = "top",
panel.background = element_rect(fill = NA, color = "black"),
panel.grid = element_blank())
d
combined_s_participants <- combined_df_errorChange %>%
group_by(gameID) %>%
mutate(s_player_count = n_distinct(sender.id[str_detect(coding, "s")])) %>%
ungroup() %>%
mutate(s_player_count = as.factor(s_player_count)) %>%
filter(treatment != "unidirectional")
ggplot(combined_s_participants, aes(x = round, y = error, color = s_player_count)) +
geom_smooth(method = 'lm',
# formula = y ~ poly(x, 2)
) +
stat_summary(fun = mean, geom = "point") +
theme_minimal() +
facet_wrap(~s_bin)
combined_df_errorChange <- combined_df_errorChange %>%
group_by(gameID) %>%
mutate(s_player_count = n_distinct(sender.id[str_detect(coding, "s")])) %>%
ungroup() %>%
mutate(s_player_count_group = ifelse(s_player_count <= 1, "0-1", "2-4")) %>%
filter(treatment != "unidirectional")
ggplot(combined_df_errorChange, aes(x = round, y = error, color = s_player_count_group)) +
geom_smooth(method = 'lm',
# formula = y ~ poly(x, 2)
) +
stat_summary(fun = mean, geom = "point") +
theme_minimal()
combined_df_errorChange%>% group_by(direction, round, gameID) %>%
mutate(direction = as.factor(direction))%>%
summarize(error = mean(error)) %>%
group_by(direction, round) %>%
tidyboot_mean(error) %>%
ggplot(aes(x = round, y = empirical_stat, color = direction)) +
geom_point() +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill = direction),
color = NA,
alpha = 0.1) +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se =F) +
theme_few() +
labs(y = 'average error', x = 'round #', color = '') +
scale_color_colorblind() +
scale_fill_colorblind(guide="none") +
theme(aspect.ratio = 1, legend.position = 'top')
combined_df_errorChange %>%
ggplot(aes(x = as.numeric(error))) +
geom_histogram(binwidth =1) +
facet_wrap(~ direction, scales = "free") +
#xlim(0,100) +
labs(title = "Distribution of mleEstimate for each treatmentName") +
theme_few()
combined_df_errorChange %>%
ggplot(aes(x = as.numeric(error))) +
geom_histogram(binwidth =1) +
facet_wrap(~ direction, scales = "free") +
#xlim(0,100) +
labs(title = "Distribution of mleEstimate for each treatmentName") +
theme_few()
combined_df_errorChange %>%
ggplot(aes(x = as.numeric(error))) +
geom_histogram(binwidth =1) +
facet_wrap(~ direction, scales = "free") +
#xlim(0,100) +
labs(title = "Distribution of mleEstimate for each treatmentName") +
theme_few()
combined_df_errorChange <- combined_df_errorChange %>% filter(!guess %in% c('50', '0','1', '5', '100'))
combined_df_errorChange %>%
ggplot(aes(x = as.numeric(error))) +
geom_histogram(binwidth =1) +
facet_wrap(~ direction, scales = "free") +
#xlim(0,100) +
labs(title = "Distribution of mleEstimate for each treatmentName") +
theme_few()
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
theme_set(theme_few())
d.allmsg <- read_csv(here('analysis/2_experiment_2/coded.csv'))%>%
rename_with(~ gsub("\\.x$", "", .x), ends_with(".x")) %>%
select(-ends_with(".y"))
d.all <- read_csv(here('analysis/2_experiment_2/exp2_clean_data_jan17.csv'))
d.allmsg_exp1 <- read_csv(here('analysis/2_experiment_2/recoded_messages_exp1.csv'))%>%
rename_with(~ gsub("\\.x$", "", .x), ends_with(".x")) %>%
select(-ends_with(".y"))
d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))%>%
rename_with(~ gsub("\\.x$", "", .x), ends_with(".x")) %>%
select(-ends_with(".y"))
d.allmsg_exp1  <- merge(d.allmsg_exp1, d.guesses, by.x = c("gameID", "sender.id", "round"), by.y = c("gameID", "playerID", "idx"), all = TRUE)  %>% filter(!is.na(coding))%>%
distinct(across(-coding), .keep_all = TRUE) %>% filter(!is.na(roundID)) %>% mutate (error = abs(mleEstimateGame-guess))%>% unique()
d.allmsg_exp1 <- d.allmsg_exp1 %>%
rename(mleGame = mleEstimateGame)%>%
rename(mleEstimate = mleEstimateIndiv) %>%
select(-roundID, -time) %>%
separate(treatmentName.x, into = c("prefix", "treatment", "direction"), sep = "-") %>%
mutate(across(c(treatment, direction), trimws)) %>%
select(-prefix, -treatmentName.y, -...1, -mleEstimate, -mleGame, -nRabbitsGame, -nSquirrelsGame)
d.allmsg<-d.allmsg%>%
select(-sender.name, -designatedGame, -mleGame, -entropy_bin, -representation, -representation_bin, -nCritters, -nCrittersGame_bin, -mleEstimate, -mleGame, -nRabbitsGame, -nSquirrelsGame)
d.oldest <- read_csv(here('data/0_experiment2_exploratory/messages/recoded.csv'))
d.oldest.error <- read_csv(here('data/merged_data_exp.csv')) %>% filter(!is.na(guess))
d.oldest <- d.oldest %>% inner_join(d.oldest.error, by = c("gameID", "round" = "idx", "sender.id" = "playerID"))%>%
select(-"...1", -"treatmentName.x",-"roundID")%>% unique()%>%
group_by(gameID) %>%
filter(n_distinct(sender.id) == 4) %>%
ungroup() %>%
separate(treatmentName.y, into = c("prefix", "treatment", "direction"), sep = "-")%>%
mutate(error = abs(as.numeric(direction)*100 -guess))%>% select(-"prefix")
common_cols <- intersect(names(d.allmsg), names(d.oldest))
unique_to_df1 <- setdiff(names(d.allmsg), names(d.oldest))
unique_to_df2 <- setdiff(names(d.oldest), names(d.allmsg))
#print(common_cols)
print(unique_to_df1)
print(unique_to_df2)
combined_df <- bind_rows(d.allmsg, d.allmsg_exp1, d.oldest)
combined_df_binning <- combined_df%>%
select(sender.id, gameID, nRabbits, nSquirrels, entropy)%>%
unique()%>%
mutate(nCritters = nSquirrels + nRabbits,
mleEstimate = nRabbits / (nRabbits + nSquirrels),
)%>%
group_by(gameID) %>%
filter(n_distinct(sender.id) == 4) %>%
mutate(
nRabbitsGame = sum(nRabbits),
nSquirrelsGame = sum(nSquirrels),
mleGame = nRabbitsGame / (nRabbitsGame + nSquirrelsGame),
totalCritters = sum(nCritters),
prob = nCritters / totalCritters,
entropy_new = -sum(ifelse(prob > 0, prob * log(prob), 0)),
representation = mean(abs(mleEstimate - mleGame))
) %>%
ungroup() %>%
mutate(
entropy_bin = cut((entropy_new), breaks = seq(0, 2, .27), right = TRUE, include.lowest = TRUE, dig.lab = 2),
representation_bin = cut((representation), breaks = seq(0, 1, .12), right = TRUE, include.lowest = TRUE, dig.lab = 2),
nCrittersGame_bin = cut(totalCritters, breaks = seq(15, 100, by = 5), right = TRUE, include.lowest = TRUE))%>%
select( -nRabbits, -nSquirrels, -entropy)
d.allmsg <- d.allmsg %>% left_join(combined_df_binning, by = c("gameID", "sender.id")) %>%
group_by(gameID) %>%
filter(n_distinct(sender.id) == 4) %>%
ungroup() %>%  mutate(error = if_else(direction == "RS", abs((100-guess) - (mleGame*100)), abs(guess - (mleGame*100))))%>% mutate(direction = case_when(
direction == "RS" ~ 0.35,
direction == "SR" ~ 0.75,
TRUE ~ as.numeric(direction)
))
d.allmsg_exp1 <- d.allmsg_exp1 %>% left_join(combined_df_binning, by = c("gameID", "sender.id")) %>%
group_by(gameID) %>%
filter(n_distinct(sender.id) == 4) %>%
ungroup() %>% mutate(error = if_else(direction == "RS", abs((100-guess) - (mleGame*100)), abs(guess - (mleGame*100))))
d.oldest <- d.oldest %>% left_join(combined_df_binning, by = c("gameID", "sender.id")) %>%
group_by(gameID) %>%
filter(n_distinct(sender.id) == 4) %>%
ungroup() %>% mutate(error = if_else(direction == "RS", abs((100-guess) - (mleGame*100)), abs(guess - (mleGame*100))))
combined_df <- combined_df %>% left_join(combined_df_binning, by = c("gameID", "sender.id"))%>%
group_by(gameID) %>%
filter(n_distinct(sender.id) == 4) %>%
ungroup() %>% mutate(error = if_else(direction == "RS", abs((100-guess) - (mleGame*100)), abs(guess - (mleGame*100))))%>% mutate(direction = case_when(
direction == "RS" ~ 0.35,
direction == "SR" ~ 0.75,
TRUE ~ as.numeric(direction)
))
summary_data <- combined_df %>%
filter(!coding == 'o') %>%
group_by(gameID) %>%
summarize(
#exitSurvey = if_else(any(str_detect(exitSurvey, 'yes')), "yes", "no"),
avg_error = mean(error[round == 8], na.rm = TRUE),
pn_count = sum(str_count(coding, "pn")),
sn_count = sum(str_count(coding, "sn")),
pb_count = sum(str_count(coding, "pb")),
sb_count = sum(str_count(coding, "sb"))
)
summary_data_long <- summary_data %>%
select(gameID, avg_error, pn_count, sn_count, pb_count, sb_count) %>%
pivot_longer(cols = c(pn_count, sn_count, pb_count, sb_count),
names_to = "message_type", values_to = "count")
summary_data_long$decile <- cut(summary_data_long$avg_error,
breaks = quantile(summary_data_long$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE),
include.lowest = TRUE, labels = FALSE)
summary_data_long_proportions <- summary_data_long %>%
# filter(exitSurvey == 'no') %>%
group_by(decile) %>%
mutate(total_count = sum(count)) %>%
group_by(decile, message_type) %>%
summarize(proportion = sum(count) / mean(total_count)
)
# Plotting
summary_data_long_proportions %>%
mutate(message_type = fct_relevel(message_type, "pn_count", 'pb_count',  'sn_count', 'sb_count')) %>%
ggplot(aes(x = factor(decile),  y = proportion, fill = message_type)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_brewer(palette = 'Accent',
labels = c("pn_count" = "personal number", "sn_count" = "social number",
"pb_count" = "personal belief", "sb_count" = "social belief")) +
labs(title = "",
x = "error (binned)",
y = "proportion",
fill = "message type") +
theme(aspect.ratio = 1, legend.position = "top") +
guides(fill = guide_legend(nrow = 2))
combined_df <- combined_df %>%
filter(!is.na(guess))%>%
group_by(gameID, round) %>%
mutate(avg_error = mean(abs(error))) %>%
ungroup() %>%
group_by(gameID) %>%
mutate(
error_change_overall = abs(first(avg_error[round == max(round)]) - first(avg_error[round == min(round)])),
s_count = sum(str_count(coding, "s"), na.rm = TRUE)
) %>%
ungroup()
ggplot(summary_data, aes(x = avg_error, y =sb_count)) +
geom_point() +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
) +geom_smooth(method="lm")
combined_df_errorChange <- combined_df %>%
select(-text) %>%
group_by(across(-coding)) %>%
summarise(coding = paste(coding, collapse = " "), .groups = "drop")
combined_df_errorChange <- combined_df_errorChange %>%
mutate(round = as.numeric(round)) %>%
left_join(
combined_df_errorChange %>%
mutate(round = as.numeric(round)) %>%
mutate(round = round + 1) %>%
select(gameID, recipient, round, coding) %>%
rename(coding_received = coding),
by = c("gameID", "sender.id" = "recipient", "round")
)%>%
mutate(coding_received_s =  paste0(
if_else(str_detect(coding_received, "s"), "s", ""),
if_else(str_detect(coding_received, "p"), "p", "")
))%>%
mutate(roundError = abs(mleGame*100 - guess))
combined_df_errorChange <- combined_df_errorChange%>%
left_join(
combined_df_errorChange %>%
mutate(round = as.numeric(round)) %>%
mutate(round = round + 1) %>%
select(gameID, sender.id, round, roundError) %>%
rename(roundErrorPrev = roundError),
by = c("gameID", "sender.id", "round"))%>%
mutate(roundErrorChange = abs(roundErrorPrev - roundError))
combined_df_errorChange <- combined_df_errorChange %>% filter(!guess %in% c('50', '0','1', '5', '100'))
combined_df_errorChange <- combined_df_errorChange %>% filter(!treatment == "unidirectional")%>%
mutate(s_bin = cut(s_count, breaks = seq(min(s_count), max(s_count), length.out = 4), include.lowest = TRUE))
ggplot(combined_df_errorChange, aes(x = round, y = error, color = s_bin)) +
geom_smooth(method = 'lm') +
#geom_point() +
theme_minimal()
lmer(error ~ s_bin + (1 | gameID), data = combined_df_errorChange)
combined_df_errorChange <- combined_df_errorChange %>%
mutate(s_bin = ifelse(s_count < 1, "zero", "not zero"))
combined_df_errorChange <- combined_df_errorChange %>%
mutate(s_bin = cut(s_count, breaks = seq(min(s_count), max(s_count), length.out = 3), include.lowest = TRUE)) %>%
filter(!treatment == "unidirectional")
ggplot(combined_df_errorChange, aes(x = round, y = error, color = s_bin)) +
geom_smooth(method = 'lm',formula = y~poly(x,2)) +
stat_summary(fun = mean, geom = "point")+
theme_minimal()
d.all_minmax <- combined_df_errorChange %>%  mutate(
entropy_median = median(entropy_new),
representation_median = median(representation),
nCrittersGame_median = median(totalCritters)
) %>%
mutate(
entropy_minmax = ifelse(entropy_new <= entropy_median, "H_etpy", "E_etpy"),
representation_minmax = ifelse(representation <= representation_median, "E_rep", "H_rep"),
nCrittersGame_minmax = ifelse(totalCritters <= nCrittersGame_median, "H_crits", "E_crits"),
group = paste(entropy_minmax, representation_minmax, nCrittersGame_minmax, sep = "\n")
) %>%
group_by(gameID, s_bin) %>%
mutate(errorAvg = mean(error, na.rm = TRUE)) %>%
ungroup()
print(unique(d.all_minmax %>% select(entropy_median, representation_median, nCrittersGame_median)))
lm_model <- lm(errorAvg ~ group, data = d.all_minmax)
# Calculate center lines and their distances
group_distances <- d.all_minmax %>%
filter(group !='E_etpy\nH_rep\nE_crits') %>%
group_by(group, s_bin) %>%
summarise(median_error = median(errorAvg)) %>%
pivot_wider(names_from = s_bin, values_from = median_error) %>%
mutate(distance = abs(`(19.5,39]` - `[0,19.5]`)) %>%
arrange(distance)
# Calculate game counts per group and s_count condition
counts <- d.all_minmax %>%
filter(group !='E_etpy\nH_rep\nE_crits') %>%
group_by(group, s_bin) %>%
summarise(nGames = n()) %>%
pivot_wider(names_from = s_bin, values_from = nGames, names_prefix = "nGames_")
# Calculate center lines for group ordering
center_lines <- d.all_minmax %>%
group_by(group, s_bin) %>%
filter(group !='E_etpy\nH_rep\nE_crits')%>%
summarise(center_line = median(errorAvg)) %>%
pivot_wider(names_from = s_bin, values_from = center_line) %>%
mutate(center_line_distance =abs(`(19.5,39]` - `[0,19.5]`))
# Reorder groups based on center line distance
d.all_minmax2 <- d.all_minmax %>%
mutate(group = factor(group, levels = center_lines %>%
arrange(center_line_distance) %>%
pull(group))) %>%
filter(group !='E_etpy\nH_rep\nE_crits') %>%
droplevels()
d <- d.all_minmax2 %>%
ggplot(aes(x = group, y = errorAvg, color = as.factor(s_bin), fill = as.factor(s_bin))) +
scale_color_brewer(palette = 'Accent') +
scale_fill_brewer(palette = 'Accent') +
geom_boxplot(alpha = 0.5) +
labs(x = "", y = "Error", color = "s_bin", fill = "s_bin") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),
legend.position = "top",
panel.background = element_rect(fill = NA, color = "black"),
panel.grid = element_blank())
d
combined_s_participants <- combined_df_errorChange %>%
group_by(gameID) %>%
mutate(s_player_count = n_distinct(sender.id[str_detect(coding, "s")])) %>%
ungroup() %>%
mutate(s_player_count = as.factor(s_player_count)) %>%
filter(treatment != "unidirectional")
ggplot(combined_s_participants, aes(x = round, y = error, color = s_player_count)) +
geom_smooth(method = 'lm',
# formula = y ~ poly(x, 2)
) +
stat_summary(fun = mean, geom = "point") +
theme_minimal() +
facet_wrap(~s_bin)
combined_df_errorChange <- combined_df_errorChange %>%
group_by(gameID) %>%
mutate(s_player_count = n_distinct(sender.id[str_detect(coding, "s")])) %>%
ungroup() %>%
mutate(s_player_count_group = ifelse(s_player_count <= 1, "0-1", "2-4")) %>%
filter(treatment != "unidirectional")
ggplot(combined_df_errorChange, aes(x = round, y = error, color = s_player_count_group)) +
geom_smooth(method = 'lm',
# formula = y ~ poly(x, 2)
) +
stat_summary(fun = mean, geom = "point") +
theme_minimal()
combined_df_errorChange%>% group_by(direction, round, gameID) %>%
mutate(direction = as.factor(direction))%>%
summarize(error = mean(error)) %>%
group_by(direction, round) %>%
tidyboot_mean(error) %>%
ggplot(aes(x = round, y = empirical_stat, color = direction)) +
geom_point() +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill = direction),
color = NA,
alpha = 0.1) +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se =F) +
theme_few() +
labs(y = 'average error', x = 'round #', color = '') +
scale_color_colorblind() +
scale_fill_colorblind(guide="none") +
theme(aspect.ratio = 1, legend.position = 'top')
combined_df_errorChange %>%
ggplot(aes(x = as.numeric(error))) +
geom_histogram(binwidth =1) +
facet_wrap(~ direction, scales = "free") +
#xlim(0,100) +
labs(title = "Distribution of mleEstimate for each treatmentName") +
theme_few()
combined_df_errorChange%>% group_by(direction, round, gameID) %>%
mutate(direction = as.factor(direction))%>%
summarize(error = mean(error)) %>%
group_by(direction, round) %>%
tidyboot_mean(error) %>%
ggplot(aes(x = round, y = empirical_stat, color = direction)) +
geom_point() +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill = direction),
color = NA,
alpha = 0.1) +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se =F) +
theme_few() +
labs(y = 'average error', x = 'round #', color = '') +
scale_color_colorblind() +
scale_fill_colorblind(guide="none") +
theme(aspect.ratio = 1, legend.position = 'top')
