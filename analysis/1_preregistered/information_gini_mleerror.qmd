---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)

theme_set(theme_few())
```

## Read in data

```{r}
ParseJSONColumn <- function(x) {
  str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>% 
    fromJSON(flatten = T) 
}

d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- d.guesses %>%
  group_by(playerID) %>%
  filter(any(!is.na(treatmentName))) %>%
  ungroup()

unique_rows <- d.guesses %>%
  filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
  distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)

d.guesses <- d.guesses %>%
  filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")))

d.guesses <- bind_rows(d.guesses, unique_rows)
d.guesses <- d.guesses %>%  
  filter(idx != 1) 
```

## Implement exclusions

```{r}
confused <- d.guesses %>%
  filter(idx == 1) %>%
  mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
  mutate(discrepency = abs(guess - mleEstimate)) %>% 
  filter(discrepency > 70) %>% 
  pull(playerID)

persistentnoClick <- c()  
for (i in 1:11) {
  idx_pair <- c(i+1, i+2)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx %in% idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)


```

### Game-level distribution

```{r}
gameCounts <- d.guesses %>%
    filter(!(gameID %in% persistentnoClick)) %>%
  filter(idx == 1) %>%
  group_by(gameID, playerID, nRabbits, nSquirrels) %>%
  tally() %>% 
  group_by(gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels),)  
  
```

```{r}

d.guesses <- d.guesses %>%
  mutate(treatmentName = case_when(
    treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
    treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
    treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
    treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
    treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
  )) %>%
 
  left_join(gameCounts) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100), 
         nCrittersGame = nRabbitsGame+nSquirrelsGame,
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
  arrange(playerID, idx)

d.guesses<-d.guesses %>%
  mutate(nCritters = nRabbits + nSquirrels)
```

## Extremes of information within-game

```{r}
counts <- d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  group_by(gameID) %>%
  summarise(num_players = n_distinct(playerID)) 

group_counts <- table(counts$num_players)
print(group_counts)

# Calculate error and join with counts
d.guesses <- d.guesses %>%
   filter(!(playerID %in% confused)) %>%
   filter(!(playerID %in% persistentnoClick)) %>%
  mutate(error = abs(guess - mleEstimateGame)) %>%
    separate(treatmentName, into = c('condition', 'treatment'), sep = '-')  %>%
  left_join(counts, by = "gameID")


```

```{r}
d.guesses %>%
  group_by(mleEstimateIndiv, treatment, condition) %>%
  summarize(mleEstimate = mean(mleEstimateIndiv, na.rm = TRUE)) %>%
  ggplot(aes(x = mleEstimate)) +
  geom_histogram(binwidth = 0.5) +  # Adjust binwidth as needed
  labs(title = "Distribution of mleEstimate for each treatmentName") +
  theme_few() +
  facet_wrap(~ treatment, scales = "free") 
```

```{r}

d.guesses %>%
  filter(!(treatment == 0.7 & between(mleEstimateIndiv, 60, 80)), !(treatment == 0.3 & between(mleEstimateIndiv, 20, 40)) ) %>%
  group_by(mleEstimateIndiv, treatment, condition) %>%
  summarize(mleEstimate = mean(mleEstimateIndiv, na.rm = TRUE)) %>%
  ggplot(aes(x = mleEstimate)) +
  geom_histogram(binwidth = 0.5) +  # Adjust binwidth as needed
  labs(title = "Distribution of mleEstimate for each treatmentName") +
  theme_few() +
  facet_wrap(~ treatment, scales = "free")


```

```{r}
inequitable <- d.guesses %>%
  filter(!(treatment == 0.7 & between(mleEstimateIndiv, 65, 75)), !(treatment == 0.3 & between(mleEstimateIndiv, 25, 35)))%>%
    group_by(gameID) %>%
  summarise(num_players_inequity = n_distinct(playerID)) 

ineq_count <- table(inequitable$num_players_inequity)
print(ineq_count)

d.guesses <- d.guesses %>%
  left_join(inequitable, by = "gameID")
```

# filter from here

```{r}
d.guesses <- d.guesses %>%
filter(!(playerID %in% persistentnoClick)) %>%
    filter(!(playerID %in% confused)) %>%
      filter(num_players==4) 
```

```{r}
d.guesses %>%
      group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm= T)) %>%
  group_by(condition, idx) %>%
  tidyboot::tidyboot_mean(error, na.rm = T) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = condition)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none') +
    scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
    labs(y = 'average error', x = 'round #', color = '')  +
    theme(aspect.ratio = 1, legend.position = 'top')


```

## gini

```{r}
gini <- function(x) {
 total <- 0
 for (i in seq_along(x[-length(x)])) {
   total <- total + sum(abs(x[i] - x[(i+1):length(x)]))
 }
 return(total / (length(x)^2 * mean(x)))
}

gini_results <- d.guesses %>%
  group_by(gameID) %>%
  #summarise(GiniCoefficient = gini(abs(mleEstimateIndiv-mleEstimateGame)))
  #summarise(GiniCoefficient = gini(nCritters-nCrittersGame)))
  #summarise(GiniCoefficient = gini(mleEstimateIndiv))
  summarise(GiniCoefficient = gini(nCritters))
print(gini_results)



```

```{r}
d.guesses <- d.guesses %>%
  left_join(gini_results, by = "gameID")
```

```{r}
mean_error_per_game <- d.guesses %>%
  group_by(idx, gameID) %>%
  summarise(MeanErrorGameIdx = mean(error), .groups = 'drop')

```

```{r}
errors_change <- mean_error_per_game %>%
  filter(idx %in% c(2, 12)) %>%
  spread(idx, MeanErrorGameIdx) %>%
  group_by(gameID) %>%
  summarize(Difference = `12` - `2`, .groups = 'drop')

print(errors_change)

```

```{r}
d.guesses <- d.guesses %>%
    left_join(mean_error_per_game, by = c("gameID", "idx")) %>%
    left_join(errors_change, by= 'gameID')

```

```{r}
ggplot(d.guesses, aes(x = MeanErrorGameIdx, y = GiniCoefficient)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Gini Coefficient over Mean Error over round" ,
       x = "Mean Error",
       y = "Gini Coefficient") +
  theme_minimal()
```

```{r}
mean_error_total <- d.guesses %>%
  group_by(gameID) %>%
  summarise(MeanErrorTotal = mean(error))

d.guesses <- d.guesses %>%
    left_join(mean_error_total, by ="gameID")

ggplot(d.guesses, aes(x = MeanErrorTotal, y = GiniCoefficient)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Gini Coefficient over Mean Error" ,
       x = "Mean Error",
       y = "Gini Coefficient") +
  theme_minimal()
```

```{r}
d.gini <- d.guesses %>%
  filter (idx == c(11,12))

ggplot(d.gini, aes(x = GiniCoefficient, y = error, group = as.factor(idx), color = idx)) +
  geom_point()+
  geom_smooth(method = "lm", se = FALSE, ) +  # Using loess method for smooth lines
  labs(title = "Gini Coefficient per game per round",
       x = "Gini Coefficent",
       y = "MeanErrorGameIdx",
       color = "idx") +
  theme_minimal()
```

```{r}
mean_error_per_game <- d.guesses %>%
  group_by(gameID, idx, condition, treatment, GiniCoefficient) %>%
  summarise(MeanErrorGameIdx = mean(error), .groups = 'drop')

ggplot(mean_error_per_game, aes(x = MeanErrorGameIdx, y = GiniCoefficient, group = interaction(condition, treatment), color = interaction(condition, treatment))) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Gini Coefficient per round per condition-treatment",
       x = "Mean Error",
       y = "Gini Coefficient",
       color = "Condition-Treatment") +
  theme_minimal()


```

```{r}
ggplot(d.guesses, aes(x = Difference, y = GiniCoefficient)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Gini Coefficient over error change" ,
       x = "Error",
       y = "Gini Coefficient") +
  theme_minimal()
```

## 

## differences in number of observations

```{r}
reducedPlayers <- d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  group_by(gameID) %>%
  filter(n_distinct(playerID) != 4) %>%
  ungroup()

d.numbers <- d.guesses %>%
    filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  filter(!(gameID %in% reducedPlayers)) %>% 
  mutate(nCritters = nRabbits+nSquirrels)

ggplot(d.numbers[d.numbers$idx == 12, ], aes(x = nCritters, y = error)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Number of Observations to Error",
       x = "nCritters",
       y = "Error") +
  theme_minimal() +
  scale_x_discrete(labels = function(x) x, limits = unique(d.numbers$nCritters))


```

## MLE error

```{r}
d.guesses <- d.guesses %>%
  mutate(MLEerror = mleEstimateIndiv-mleEstimateGame)
```

```{r}
d.plot <- d.guesses %>%
  filter(condition == "slider")

  
ggplot(d.plot, aes(x = abs(MLEerror), y = error, group = idx, color = idx)) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "MLEerror to Error",
       x = "MLEerror",
       y = "Error") +
  theme_minimal() 

```

```{r}
d.guesses <- d.guesses %>%
  mutate(MLE_percent = mleEstimateIndiv/(as.numeric(treatment)*100))
```

```{r}
ggplot(d.guesses, aes(x = error, y = abs(MLE_percent), color = interaction(treatment, condition))) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "MLEerror",
       x = "error",
       y = "mle as percent of truth") +
  theme_minimal()

```

```{r}


# Calculate absolute inequality score for each game
absolute_inequality <- d.guesses %>%
  group_by(gameID) %>%
  summarise(AbsoluteInequality = sum(abs(mleEstimateGame - mleEstimateIndiv)))

# Join the absolute inequality score back to the main dataframe
d.guesses <- d.guesses %>%
  left_join(absolute_inequality, by = "gameID")

# Create the plot
ggplot(d.guesses, aes(x = AbsoluteInequality, y = GiniCoefficient)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Gini Coefficient vs Absolute Inequality Score",
       x = "Absolute Inequality Score",
       y = "Gini Coefficient") +
  theme_minimal()

# Calculate correlation
correlation <- cor(d.guesses$AbsoluteInequality, d.guesses$GiniCoefficient)
print(paste("Correlation between Absolute Inequality and Gini Coefficient:", round(correlation, 3)))
```

```{r}
# Filter out confused and persistent non-clickers
reducedPlayers <- d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  group_by(gameID) %>%
  filter(n_distinct(playerID) != 4) %>%
  ungroup()

d.numbers <- d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  mutate(nCritters = nRabbits + nSquirrels)

# Calculate average error for each condition
avg_error_by_condition <- d.numbers %>%
  group_by(gameID, condition, nCritters) %>%
  summarise(avg_error = mean(error, na.rm = TRUE), .groups = 'drop')

# Create the plot
ggplot(avg_error_by_condition, aes(x = factor(nCritters), y = avg_error, color = condition, group = condition)) +

  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Average Error by Number of Observations and Condition",
       x = "Number of Critters",
       y = "Average Error",
       color = "Condition") +
  theme_minimal() +
  scale_x_discrete(labels = function(x) x, limits = unique(d.numbers$nCritters)) +
  scale_color_brewer(palette = "Set1")

# Calculate overall correlation
correlation <- cor(as.numeric(avg_error_by_condition$nCritters), avg_error_by_condition$avg_error)
print(paste("Overall correlation between Number of Critters and Average Error:", round(correlation, 3)))

# Calculate correlation for each condition
correlations_by_condition <- avg_error_by_condition %>%
  group_by(condition) %>%
  summarise(correlation = cor(as.numeric(nCritters), avg_error))

print("Correlations by condition:")
print(correlations_by_condition)
```
