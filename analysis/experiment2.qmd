---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)

theme_set(theme_few())
```

## Read in data

```{r}
ParseJSONColumn <- function(x) {
  str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>% 
    fromJSON(flatten = T) 
}

# create long-form dataframe of all guesses made in each game
d.guesses.raw <- read_csv(here('data/guesses-merged.csv')) %>% 
  distinct() %>%
  group_by(idx, gameID) 
```

## Implement exclusions

```{r}
confused <- d.guesses.raw %>%
  filter(idx == 1) %>%
  mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
  mutate(discrepency = abs(guess - mleEstimate)) %>% 
  filter(discrepency > 70) %>% 
  pull(playerID)

persistentnoClick <- c()  
for (i in 1:7) {
  idx_pair <- c(i, i+1)
  filtered_players <- d.guesses.raw %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx %in% idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)
```

### Game-level distribution

```{r}
gameCounts <- d.guesses.raw %>%
  filter(idx == 1) %>%
  group_by(gameID, playerID, nRabbits, nSquirrels) %>%
  tally() %>% 
  group_by(gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels),
         nCrittersGame = nRabbitsGame + nSquirrelsGame) 
  

d.guesses <- d.guesses.raw %>% 
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  mutate(treatmentName = case_when(
    treatmentName == "experiment1-0.7" ~ 'unidirectional-0.7',
    treatmentName == "experiment1-0.3" ~ 'unidirectional-0.3',
    treatmentName =="experiment2-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="experiment2-interactive-0.7" ~ 'interactive-0.7',
    treatmentName =="experiment2-slider-0.3" ~ 'slider-0.3',
    treatmentName =="experiment2-slider-0.7" ~ 'slider-0.7'
  )) %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
  filter(!is.na(guess)) %>%
  left_join(gameCounts) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
  arrange(playerID, idx)

d.guesses %>%
  group_by(gameID, treatment) %>%
  summarize(mleEstimate = mean(mleEstimateGame)) %>%
  ggplot(aes(x = mleEstimate, fill = treatment)) +
    geom_density(binwidth = 10, alpha = 0.5) +
    theme_few()
```

```{r}
playercount <- d.guesses %>%
   filter(idx == 1) %>%
   distinct(playerID, .keep_all = TRUE) %>% 
  group_by(treatment, condition) %>% 
  tally()

gamecount <- d.guesses %>%
   filter(idx == 1) %>%
   distinct(gameID, .keep_all = TRUE) %>% 
  group_by(treatment, condition) %>% 
  tally()
```

## Result #1: Overall Convergence

```{r}
truePs <- d.guesses %>% 
  filter(idx == 1) %>%
  group_by(condition, treatment, gameID, nSquirrelsGame, nRabbitsGame) %>%
  tally() %>%
  group_by(condition, treatment) %>%
  summarize(trueP = mean(nRabbitsGame / (nSquirrelsGame + nRabbitsGame), na.rm = T))

d.guesses %>%
  group_by(condition, treatment, idx, gameID) %>%
  summarize(guess = mean(guess, na.rm= T)) %>%
  group_by(condition, treatment, idx) %>% 
  tidyboot::tidyboot_mean(guess, na.rm = T) %>%
  left_join(truePs) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatment)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(aes(yintercept = trueP*100), linetype = 'dotted') +
    theme_few() +
    facet_grid(~ condition) +
    labs(y = 'average guess', x = 'round #') +
    scale_color_colorblind()

```

## Result #2: Examine error (collapsing across treatment)

```{r}
d.guesses %>%
  group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
  summarize(gameError = mean(guess - mleEstimateGame, na.rm= T)) %>%
  group_by(treatment, condition, idx) %>%
  tidyboot::tidyboot_mean(gameError, na.rm = T) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = condition, group = interaction(condition, treatment))) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 1), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    scale_color_colorblind() +
    labs(y = 'average error', x = 'round #') 
```

```{r}
library(lmerTest)
conflicts_prefer(lmerTest::lmer)
d.guesses %>%
  ungroup() %>%
  mutate(condition = fct_relevel(condition, 'slider', 'unidirectional', 'interactive')) %>%
  mutate(error = abs(guess - mleEstimateGame)) %>%
  lmer(scale(error) ~ poly(idx, 2) + condition + (1 + poly(idx, 2) || gameID/playerID),
       data = .,
       contrasts = list(condition = contr.sum(3)),
       control = lmerControl(optimizer = 'bobyqa')) %>%
  summary()
```

```{r}
d.guesses %>%
  group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm= T)) %>%
  group_by(condition, idx) %>%
  tidyboot::tidyboot_mean(error, na.rm = T) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = condition, linetype = condition == 'unidirectional')) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none') +
    scale_x_continuous(breaks = c(1,3,5,7,9)) +
    labs(y = 'average error', x = 'round #', color = '')  +
    theme(aspect.ratio = 1, legend.position = 'top')

ggsave(here('exp2_error.pdf'), height=3, width = 3.5)
```

# Result #3: Relationship to total information

```{r}
d.guesses %>%
  ungroup() %>%
  group_by(condition, gameID, idx) %>%
  summarize(gameError = abs(mean(mleEstimateGame) - mean(guess, na.rm= T)),
            nCrittersGame = mean(nCrittersGame)) %>%
  ggplot(aes(x = nCrittersGame, y = log1p(gameError), color = condition)) +
    geom_point(alpha = 0.25) +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 1)) +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    facet_grid(~ condition) +
    labs(y = 'average error', x = 'total sample size') +
    theme(aspect.ratio = 2, legend.position = 'none')

ggsave(here('exp2_samplesize.pdf'), height=3, width = 8)
```

```{r}
m1 <- d.guesses %>%
  ungroup() %>%
  mutate(condition = fct_relevel(condition, 'slider', 'unidirectional', 'interactive')) %>%
  mutate(nCrittersGame = nRabbitsGame + nSquirrelsGame,
         error = abs(guess - mleEstimateGame)) %>%
  lmer(scale(error) ~ condition + poly(nCrittersGame, 2) + idx +  (1 + idx | playerID),
       data = .) 

m2 <- d.guesses %>%
  ungroup() %>%
  mutate(condition = fct_relevel(condition,'unidirectional', 'slider',  'interactive')) %>%
  mutate(nCrittersGame = nRabbitsGame + nSquirrelsGame,
         error = abs(guess - mleEstimateGame)) %>%
  lmer(scale(error) ~ condition * poly(nCrittersGame, 2) + idx + (1 + idx | playerID),
       data = .) 

anova(m1, m2)
summary(m2)
```

# Results #4: Self-weighing

```{r}
d.guesses %>% 
  group_by(playerID) %>%
  mutate(prevGuess = lag(guess)) %>% 
  arrange(playerID, idx) %>%
  mutate(distToSelf = abs(guess - prevGuess)) %>%
  group_by(idx, condition) %>% 
  filter(idx>1) %>%
  tidyboot_mean(distToSelf, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = condition)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y~ poly(x, 1), se = F) +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none') +
    scale_x_continuous(breaks = c(2,4,6,8)) +
    labs(y = 'change from previous guess', x = 'reference point (round #)', color = '') +
    theme_few() +
    theme(aspect.ratio = 1, legend.position = 'top')

ggsave(here('exp2_delta.pdf'), height=3, width = 3.5)
```

```{r}
m1 <- d.guesses %>% 
  group_by(playerID) %>%
  mutate(prevGuess = lag(guess)) %>% 
  arrange(playerID, idx) %>%
  mutate(distToSelf = abs(guess - prevGuess)) %>%
  group_by(idx, condition) %>% 
  filter(idx>1) %>%
  lmer(distToSelf ~ poly(idx,2) + condition + (1+ poly(idx,2) | gameID/playerID), 
       data = .)

m2 <- d.guesses %>% 
  group_by(playerID) %>%
  mutate(prevGuess = lag(guess)) %>% 
  arrange(playerID, idx) %>%
  mutate(distToSelf = abs(guess - prevGuess)) %>%
  group_by(idx, condition) %>% 
  filter(idx>1) %>%
  lmer(distToSelf ~ poly(idx,2) * condition + (1+ poly(idx,2) | gameID/playerID), 
       data = .) 

anova(m1,m2)
summary(m1)
```
