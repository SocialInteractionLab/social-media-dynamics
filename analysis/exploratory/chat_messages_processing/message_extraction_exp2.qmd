---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r}
# Load required libraries
library(dplyr)
library(stringr)
library(tidyr)
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
library(lmerTest)
```

```{r}

# Helper function to parse JSON columns
ParseJSONColumn <- function(x) {
  str_c("[", str_c(x, collapse = ", "), "]") %>%
    fromJSON(flatten = TRUE)
}



# Read the CSV file
d.chat.raw1 <- read_csv(here('data/experiment2/batch1/games.csv'), show_col_types = FALSE) %>%
  mutate(messages = ifelse(is.na(messages), '[]', messages)) %>%
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) 
d.chat.raw2 <- read_csv(here('data/experiment2/batch2/games.csv'), show_col_types = FALSE) %>%
  mutate(messages = ifelse(is.na(messages), '[]', messages)) %>%
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) 
d.chat.raw3 <- read_csv(here('data/experiment2/batch3/games.csv'), show_col_types = FALSE) %>%
  mutate(messages = ifelse(is.na(messages), '[]', messages)) %>%
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) 
d.chat.raw4 <- read_csv(here('data/experiment2/batch4/games.csv'), show_col_types = FALSE) %>%
  mutate(messages = ifelse(is.na(messages), '[]', messages)) %>%
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) 

```

```{r}

d.chat.raw <- bind_rows(d.chat.raw1, d.chat.raw2, d.chat.raw3, d.chat.raw4, .id = "data_frame_id")

rm(d.chat.raw1, d.chat.raw2, d.chat.raw3, d.chat.raw4)
```

```{r}
d.chat.raw <- d.chat.raw %>%
  distinct()
```

```{r}

# Identify which columns are of type list
list_columns <- sapply(d.chat.raw, is.list)

# Display the names of the columns that are lists
list_column_names <- names(list_columns[list_columns])

# Print the first example of each list column
for (col in list_column_names) {
  print(paste("First example from column", col, ":"))
  print(d.chat.raw[[col]][[1]])
}

```

```{r}
extracted_data_list <- list()
all_columns <- character(0)  # Initialize an empty character vector
empty_list_rows <- integer(0)  # Initialize an empty integer vector to store row indices with empty lists

for (i in 1:nrow(d.chat.raw)) {
  groupID <- d.chat.raw$id[i]
  treatmentName <- d.chat.raw$treatmentName[i]
  
  embedded_df <- d.chat.raw$messages[[i]]
  
  if (is.list(embedded_df) && length(embedded_df) == 0) {
    # If the embedded_df is an empty list, store the row index
    empty_list_rows <- c(empty_list_rows, i)
  } else if (!is.null(embedded_df) && nrow(embedded_df) > 0) {
    # Update the all_columns vector with new column names
    all_columns <- unique(c(all_columns, colnames(embedded_df)))
    
    # Add missing columns with NA values
    missing_columns <- setdiff(all_columns, colnames(embedded_df))
    embedded_df[missing_columns] <- NA
    
    embedded_df$groupID <- groupID
    embedded_df$treatmentName <- treatmentName
    
    extracted_data_list[[i]] <- embedded_df
  }
}

# Create a data frame for empty list rows
empty_list_df <- data.frame(groupID = d.chat.raw$groupID[empty_list_rows],
                            treatmentName = d.chat.raw$treatmentName[empty_list_rows],
                            row.names = empty_list_rows)
empty_list_df[all_columns] <- NA

# Combine the data frames
combined_data <- do.call(rbind, c(extracted_data_list, list(empty_list_df)))
print(combined_data)
```

```{r}
write.csv(combined_data, "extracted_messages_exp2.csv", row.names = TRUE)
```
