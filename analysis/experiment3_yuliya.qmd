---
title: "Experiment2"
format: html
editor: visual
---

### Import packages

```{r}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
```

### Read in data

```{r}
ParseJSONColumn <- function(x) {
  str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>% 
    fromJSON(flatten = T) 
}

# map game IDs to their treatments
d.treatments.b1 <- read_csv(here('data/experiment2/batch1/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()
d.treatments.b2 <- read_csv(here('data/experiment2/batch2/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()
d.treatments.b3 <- read_csv(here('data/experiment2/batch3/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()
d.treatments.b4 <- read_csv(here('data/experiment2/batch4/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()

```

```{r}

# map game IDs to their treatments
d.players.b1 <- read_csv(here('data/experiment2/batch1/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

d.players.b2 <- read_csv(here('data/experiment2/batch2/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

d.players.b3 <- read_csv(here('data/experiment2/batch3/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

d.players.b4 <- read_csv(here('data/experiment2/batch4/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

```

```{r}


# map round IDs to their indices
d.rounds.b1 <- read_csv(here('data/experiment2/batch1/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()
d.rounds.b2 <- read_csv(here('data/experiment2/batch2/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()
d.rounds.b3 <- read_csv(here('data/experiment2/batch3/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()
d.rounds.b4 <- read_csv(here('data/experiment2/batch4/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()

```

```{r}

# create long-form dataframe of all messages sent in each game
d.msgs.b1 <- read_csv(here('data/experiment2/batch1/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)
d.msgs.b2 <- read_csv(here('data/experiment2/batch2/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)
d.msgs.b3 <- read_csv(here('data/experiment2/batch3/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)
d.msgs.b4 <- read_csv(here('data/experiment2/batch4/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)


```

```{r}
# create long-form dataframe of all guesses made in each game
d.guesses.b1 <- read_csv(here('data/experiment2/batch1/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess) %>%
  left_join(d.rounds.b1) %>%
  left_join(d.treatments.b1) %>%
  left_join(d.players.b1) %>% 
  distinct()
d.guesses.b2 <- read_csv(here('data/experiment2/batch2/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess) %>%
  left_join(d.rounds.b2) %>%
  left_join(d.treatments.b2) %>%
  left_join(d.players.b2) %>% 
  distinct()
d.guesses.b3 <- read_csv(here('data/experiment2/batch3/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess) %>%
  left_join(d.rounds.b3) %>%
  left_join(d.treatments.b3) %>%
  left_join(d.players.b3) %>% 
  distinct()
d.guesses.b4 <- read_csv(here('data/experiment2/batch4/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess) %>%
  left_join(d.rounds.b4) %>%
  left_join(d.treatments.b4) %>%
  left_join(d.players.b4) %>% 
  distinct()
```

```{r}
d.guesses.b1$treatmentName <- paste0(d.guesses.b1$treatmentName, "-0.7")
d.guesses.b3$treatmentName <- paste0(d.guesses.b3$treatmentName, "-0.3")
d.guesses.b4$treatmentName <- paste0(d.guesses.b4$treatmentName, "-0.3")
```

```{r}
d.guesses <- rbind(d.guesses.b1, d.guesses.b2, d.guesses.b3, d.guesses.b4)
rm(d.guesses.b1,d.guesses.b2,d.guesses.b3,d.guesses.b4,d.msgs.b1,d.msgs.b2,d.msgs.b3,d.msgs.b4,d.players.b1, d.players.b2,d.players.b3,d.players.b4,d.rounds.b1,
   d.rounds.b2,d.rounds.b3,d.rounds.b4,d.treatments.b1,d.treatments.b2,d.treatments.b3,d.treatments.b4)

```

```{r}
keeper <- d.guesses %>%
  select(gameID, playerID, idx, guess) %>%
  filter(!is.na(guess))

d.guesses <-d.guesses %>% distinct(gameID, playerID, idx, .keep_all = TRUE)

d.guesses <- d.guesses %>%
  left_join(keeper, by = c("gameID", "playerID", "idx")) %>%
  mutate(guess = coalesce(guess.x, guess.y)) %>%
  select(-guess.x, -guess.y)  # Remove redundant columns

d.guesses <- d.guesses %>%  distinct(.keep_all = TRUE)
```

## Implement exclusions

```{r}
playercount <- d.guesses %>%
   filter(idx == 1) %>%
   distinct(playerID, .keep_all = TRUE)
nrow(playercount)

```

```{r}
confused <- d.guesses %>%
  filter(idx == 1) %>%
  mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
  mutate(discrepency = abs(guess - mleEstimate)) %>% 
  filter(discrepency > 70) %>% 
  pull(playerID)

```

```{r}
persistentnoClick <- c()  
for (i in 1:7) {
  idx_pair <- c(i, i+1)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx %in% idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}
print(length(unique(persistentnoClick)))

```

```{r}
squares <- c()  
for (i in 1:7) {
  idx_pair <- c(i, i+1)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx %in% idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  squares <- c(squares, filtered_players)
}
print(length(unique(squares)))
```

```{r}
square_games <- d.guesses %>%
  filter(playerID %in% squares) %>%
  group_by(gameID) %>%
  summarize(distinct_playerIDs = n_distinct(playerID))%>%
  filter(distinct_playerIDs != 1)


```

```{r}
#on the issue of so many NAs
hard_clean <- d.guesses %>%
  filter(is.na(guess)) 

playercount_na <- hard_clean %>%
   distinct(playerID, .keep_all = TRUE)
nrow(playercount_na)
#GamingTheSystem is also an exclusion category caluculated in Error

d.guesses %>%
filter(!(playerID %in% unique(hard_clean$gameID))) %>%
  group_by(treatmentName) %>%
  summarize(count = n_distinct(playerID))
d.guesses %>%
   filter(!(gameID %in% unique(hard_clean$gameID))) %>%
   group_by(treatmentName) %>%
   summarize(count = n_distinct(gameID))
fullGames <-d.guesses %>%
   filter(!(gameID %in% unique(hard_clean$gameID)))
```

## Result #1: Convergence

```{r}
d.guesses %>%
  filter(!(playerID %in% persistentnoClick)) %>%
   filter(!(gameID %in% square_games)) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(guess = mean(guess, na.rm = TRUE)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(guess, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(30,70), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average guess', x = 'round #') +
    scale_color_colorblind()
```

## Result #2: Examine error (collapsing across treatment)

## in-game treatment average from the player's critters

```{r}

d.guesses <- d.guesses %>%
  mutate(indvPercent = ifelse(nRabbits > 0 & nSquirrels == 0, 100, 
                   ifelse(nSquirrels > 0 & nRabbits == 0, 1, 
                          ifelse(nRabbits + nSquirrels == 0, 0, 
                                 floor((nRabbits / (nRabbits + nSquirrels)) * 100))))) %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         AvgPercent = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))

d.guesses %>%
  group_by(gameID, treatmentName) %>%
  summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
  ggplot(aes(x = mleEstimate)) +
    geom_histogram(binwidth = 10) +
    facet_wrap(~ treatmentName, scales = "free") +
    labs(title = "Distribution of mleEstimate for each treatmentName")

```

```{r}
trueP <- d.guesses %>%
  group_by(treatmentName) %>%
  summarize(mean_AvgPercent = mean(mleEstimateIndiv, na.rm = TRUE))

d.guesses <- left_join(d.guesses, trueP, by = "treatmentName",suffixes = c("", ""))

```

```{r}
list <- as.list(as.numeric(trueP$mean_AvgPercent)) 
d.guesses %>%
  filter(!(playerID %in% confused)) %>% 
  filter(!(playerID %in% persistentnoClick)) %>%
  #filter(!(playerID %in% GamingTheSystem)) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(guess = mean(guess, na.rm = TRUE)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(guess, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
  geom_hline(yintercept = c(65,37,64,32), linetype = 'dotted')+
  geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average guess', x = 'round #') +
    scale_color_colorblind()
```

## 

```{r}
library(lmerTest)
d.guesses %>%
   filter(!(playerID %in% confused)) %>% 
  filter(!(gameID %in% persistentnoClick)) %>%
  mutate(target = ifelse(treatmentName=='experiment1-0.3', 30, 70),
         error = abs(guess - target)) %>%
  lmerTest::lmer(error ~ poly(idx, 1) + treatmentName
                + (1 + poly(idx, 1) | gameID) 
                + (1 + poly(idx, 1) | playerID:gameID), 
       data = .) %>% 
  summary()
```

```{r}
d.guesses %>%
   filter(!(playerID %in% confused)) %>% 
  filter(!(gameID %in% persistentnoClick)) %>%
  mutate(mleEstimate = 100 * nRabbits / (nRabbits + nSquirrels),
         distance = abs(guess - mleEstimate)) %>%
  lmerTest::lmer(distance ~ poly(idx, 1) + treatmentName
                + (1 + poly(idx, 1) | gameID) 
                + (1 + poly(idx, 1) | playerID:gameID), 
       data = .) %>% 
  summary()
```

```{r}
d.guesses %>%
  filter(!(playerID %in% confused)) %>% 
  filter(!(gameID %in% persistentnoClick)) %>%
  mutate(mleEstimate = 100 * nRabbits / (nRabbits + nSquirrels),
         distance = abs(guess - mleEstimate),
         target = ifelse(treatmentName=='experiment1-0.3', 30, 70),
         error = abs(guess - target)) %>%
  pivot_longer(names_to = 'measure', values_to = 'value', cols = c('distance', 'error')) %>%
  group_by(gameID, idx, measure) %>%
  summarize(value = mean(value, na.rm = TRUE)) %>%
  group_by(idx, measure) %>%
  tidyboot_mean(value, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = measure)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2)) +
    theme_few()

```

## 

# Result #3: Wisdom of Crowds

## participant error without absolute

```{r}
d.guesses <- d.guesses %>%
  mutate(wisError = guess-AvgPercent) %>%
  mutate(treatError = guess-mean_AvgPercent)

```

## average error per player within-game ratios

```{r}
d.guesses %>%
  filter(!(playerID %in% confused)) %>% 
  filter(!(playerID %in% persistentnoClick)) %>%
  filter(!(gameID %in% square_games)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(wisError, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average error per player within game', x = 'round #') +
    scale_color_colorblind()
```

## 

## within-game error per player and average

```{r}
d.gameError <- d.guesses %>%
  group_by(gameID) %>%
  summarize(gameError = mean(wisError))

d.guesses <- left_join(d.guesses, d.gameError, by = "gameID",suffixes = c("", ""))

```

```{r}
# Filter the data frame outside the loop
filtered_df <- d.guesses%>%  
  filter(!(playerID %in% confused)) %>% 
  filter(!(playerID %in% persistentnoClick))#%>%
  #filter(!(playerID %in% GamingTheSystem)) 
# Create a ggplot for error over idx for both treatment names
plot_combined <- 
  ggplot(filtered_df, aes(x = idx, y = wisError, color = treatmentName)) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = mean(filtered_df$wisError), linetype = 'dotted') +
  theme_few() +
  labs(y = 'average error per game', x = 'round #') +
  scale_color_colorblind()

# Print the combined plot
print(plot_combined)

```

# Result #4: Does individual data being an outlier create a consistent rate of error

```{r}
d.MLE <- d.guesses %>%
  mutate(outlierPercent = abs(mleEstimateIndiv-AvgPercent))
```

```{r}
# Assuming you have a linear model fit earlier
model <- lm(abs(wisError) ~ outlierPercent, data = d.MLE)

# Calculate the slope difference
slope_difference <- coef(model)[2] - coef(model)[1]

# Now you can use it in the annotate function
ggplot(d.MLE, aes(x = outlierPercent, y = abs(wisError), color = idx)) +
  geom_point() +
  labs(y = "Error", x = "Outlier Percent") +
  ggtitle("Scatter Plot of Outlier Percent vs Error") +
  geom_smooth(method = "lm", se = FALSE, aes(group = idx)) +
  theme_minimal() +
  coord_cartesian(clip = "off") +  
  theme(legend.position = "bottom") + 
  annotate("text", x = max(d.MLE$outlierPercent), y = max(d.MLE$error), 
           label = paste("Change across rounds:", round(slope_difference, 3)),
           hjust = 1, vjust = 1, color = "black", size = 3)

```

```{r}
first <- d.MLE %>%   
  distinct(playerID, .keep_all = TRUE) %>%
  mutate(rounded_outlier = ceiling(outlierPercent/10)*10) %>%
  select(playerID, rounded_outlier)

second <- first %>% ungroup %>%
  select(playerID, rounded_outlier)
d.MLE <- d.MLE %>%
  left_join(select(second, playerID, rounded_outlier), by = "playerID")
```

```{r}
ggplot(d.MLE, aes(x = idx, y = abs(wisError), color = as.factor(rounded_outlier))) +
  geom_point() +
  labs(y = "Error", x = "Time", color = "Outlier Group") +  # Specify legend title here
  ggtitle("Scatter Plot of Error Over Time by Outlier Group") +
  geom_smooth(method = "lm", se = FALSE, aes(group = rounded_outlier)) +
  theme_minimal() +
  coord_cartesian(clip = "off") +  
  theme(legend.position = "bottom")
```

```{r}
validity <- d.MLE %>%   distinct(playerID, .keep_all = TRUE) %>%
  group_by(rounded_outlier) %>%
  summarize(count = n())
print(validity)
```

## Individual MLE

```{r}
d.guesses$individualConsistency <- d.guesses$guess - d.guesses$indvPercent

# Create a line plot
ggplot(d.guesses, aes(x = idx, y = individualConsistency, group = playerID, )) +
  geom_line() +
  geom_point() +
  labs(title = "Player's Guess Difference from Personal Avg Over Time",
       x = "idx",
       y = "Difference (Guess - Truth)",
       color = "Player") +
  theme_minimal()
```

```{r}
ggplot(d.guesses, aes(x = individualConsistency, fill = factor(idx))) +
  geom_density(alpha = 0.5) +
  labs(title = "Density of Player's Guess Difference from Individual Over Time",
       x = "Difference (Guess - Personal p)",
       y = "Density",
       fill = "Round") +
  theme_minimal()
```

## Control for game

# Yonder

```{r}
crashMyReRun <-
```

## GamingTheSystem

```{r}

GamingTheSystem <- c()  
for (i in 1:9) {
  idx_pair <- c(i, i+1,i+2, i+3, i+4, i+5, i+6)
  gamers <- d.guesses %>%
    group_by(playerID) %>%
    filter(all((error[idx %in% idx_pair])>75)) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  GamingTheSystem <- c(GamingTheSystem, gamers)
}
print(unique(GamingTheSystem))

#trueGamers  <- setdiff(GamingTheSystem, sampleLess$playerID)
#print(trueGamers)

d.gamers <- d.guesses[d.guesses$playerID %in% unique(GamingTheSystem), ]
```

## per game abs error with game average percent

```{r}

#for (gameID in unique_gameIDs) {
  #subset_df <- d.guesses[d.guesses$gameID == gameID, ]
   #plot <- ggplot(subset_df, aes(x = idx, y = error, color = as.factor(playerID))) +
    #geom_line() +
    #labs(title = paste("GameID:", gameID, "- Error Over idx by playerID"), x = "idx", y = "Error") +
    #theme_minimal()
  #print(plot)
#}
```

## average absolute error with game average percent

```{r}
{r}
d.guesses %>%
  #filter(!(playerID %in% confused)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average error', x = 'round #') +
    scale_color_colorblind()
```

## exclude people who got no sample

```{r}

sampleLess <- d.guesses %>%
  filter(mleEstimateIndiv == 0)
print(sampleLess)
```

```{r}
{r}
d.guesses %>%
   filter(!(playerID %in% confused)) %>% 
  filter(!(gameID %in% persistentnoClick)) %>%
  mutate(target = ifelse(treatmentName=='experiment1-0.3', 30, 70),
         error = guess - target) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(error = mean(error, na.rm = TRUE)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(abs(error), na.rm = TRUE)
```

## in-game player error (absolute)

```{r}
{r}
d.guesses <- d.guesses %>%
  mutate(error = abs(guess-AvgPercent))#%>%
  #mutate(treatmentPercent = ifelse(.[[6]] == "experiment1-0.3", 30, 70))  %>%
  #mutate(treatmentError = abs(guess-treatmentPercent))
```

```{r}
{r}
d.guesses %>%
    filter(!(playerID %in% confused)) %>% 
  filter(!(gameID %in% persistentnoClick)) %>%
  filter(!(playerID %in% sampleLess)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average error', x = 'round #') +
    scale_color_colorblind()
```

## only people who got no sample

```{r}
{r}
#sampleLess %>%
#    filter(!(playerID %in% confused)) %>% 
#  filter(!(playerID %in% hard_clean)) %>%
#  group_by(treatmentName, idx) %>%
#  tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
#    geom_point() +
 #   geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
  #  geom_hline(yintercept = c(0), linetype = 'dotted') +
   # geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    #theme_few() +
#    labs(y = 'average error', x = 'round #') +
 #   scale_color_colorblind()
```

## remove games with sampleless players

```{r}
{r}

d.guesses %>%
  filter(!(gameID %in% sampleLess)) %>%
    filter(!(playerID %in% confused)) %>% 
  filter(!(gameID %in% persistentnoClick)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average error', x = 'round #') +
    scale_color_colorblind()
```

## only sampleless games

```{r}
{r}
#samplelessGames <- sampleLess %>% distinct(gameID)
#d.samplelessGames <- d.guesses %>%
#  filter(gameID %in% samplelessGames$gameID)
#d.samplelessGames %>%
#    filter(!(playerID %in% confused)) %>% 
#  filter(!(gameID %in% persistentnoClick)) %>%
#  group_by(treatmentName, idx, gameID) %>%
#  summarize(guess = mean(guess)) %>%
#  group_by(treatmentName, idx) %>%
#  tidyboot::tidyboot_mean(guess) %>%
#  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
#    geom_point() +
#    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
#    geom_hline(yintercept = c(30, 70), linetype = 'dotted') +
#    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
 #   theme_few() +
  #  labs(y = 'average guess', x = 'round #') +
   # scale_color_colorblind()
```

## average error per player with 70/30

```{r}
{r}
#d.guesses %>%
 #  filter(!(playerID %in% confused)) %>% 
#  filter(!(gameID %in% persistentnoClick)) %>%
#  group_by(treatmentName, idx) %>%
#  tidyboot::tidyboot_mean(wisTreatmentError) %>%
#  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
#    geom_point() +
 #   geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
  #  geom_hline(yintercept = c(0), linetype = 'dotted') +
   # geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
   # theme_few() +
  #  labs(y = 'average error', x = 'round #') +
   # scale_color_colorblind()
```

## per game average error

```{r}
{r}

#filtered_df <- d.guesses%>%  
 # filter(!(playerID %in% confused)) %>% 
  #filter(!(gameID %in% persistentnoClick))
{r}
unique_gameIDs <- unique(d.guesses$gameID)

#for (gameID in unique_gameIDs) {
 # subset_df <- filtered_df[filtered_df$gameID == gameID, ]

#  plot <- 
 #   ggplot(subset_df, aes(x = idx, y = wisError)) +  
  #  geom_point() +
#    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
 #   geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
  #  theme_few() +
   # labs(y = 'average error per game', x = 'round #') +
    #scale_color_colorblind()
#  print(plot) 
#}

```

## All games error

```{r}
{r}
# Filter the data frame outside the loop
filtered_df <- d.guesses%>%  
  filter(!(playerID %in% confused)) %>% 
  filter(!(gameID %in% persistentnoClick)) 
# Create a ggplot for error over idx
plot <- 
  ggplot(filtered_df, aes(x = idx, y = wisError)) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = mean(filtered_df$wisError), linetype = 'dotted') +
  theme_few() +
  labs(y = 'error', x = 'round #') +
  scale_color_colorblind()

print(plot)


```

## the spoilsport analysis

```{r}
{r}
spoilsport<- d.guesses %>%
  filter(idx == 8) %>%
  filter(individualConsistency == 0 ) %>% 
  pull(playerID)
```

```{r}
{r}
d.guesses %>%
  filter(!(playerID %in% spoilsport)) %>%
    filter(!(playerID %in% confused)) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(guess = mean(guess, na.rm = TRUE)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(guess,na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(65,37,64,32), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average guess', x = 'round #') +
    scale_color_colorblind()
```

```{r}
{r}
d.guesses %>%
  # filter(!(gameID %in% hard_clean)) %>% 
  #filter(!(gameID %in% persistentnoClick)) %>%
  filter(!(playerID %in% spoilsport)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(wisError, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average error per player within game', x = 'round #') +
    scale_color_colorblind()
```
