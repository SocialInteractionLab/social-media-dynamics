treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
)) %>%
separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
left_join(gameCounts) %>%
mutate(mleEstimateIndiv = trunc((nRabbits / (nRabbits + nSquirrels)) * 100),
nCrittersGame = nRabbitsGame+nSquirrelsGame,
mleEstimateGame = trunc((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
arrange(playerID, idx)
persistentnoClick <- c()
for (i in 1:11) {
idx_pair <- c(i+1, i+2)
filtered_players <- d.guesses %>%
group_by(playerID) %>%
filter(all(is.na(guess[idx_pair]))) %>%
distinct(playerID, .keep_all = TRUE) %>%
pull(playerID)
persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)
persistentnoClick_old <- c()
for (i in 1:6) {
idx_pair <- c(i+1, i+2)
filtered_players <- d.guesses_old %>%
group_by(playerID) %>%
filter(all(is.na(guess[idx_pair]))) %>%
distinct(playerID, .keep_all = TRUE) %>%
pull(playerID)
persistentnoClick_old <- c(persistentnoClick_old, filtered_players)
}
persistentnoClick_old <- unique(persistentnoClick_old)
persistentnoClick_combined <- unique(c(persistentnoClick_old, persistentnoClick))
#d.guesses_combined <- bind_rows(d.guesses, d.guesses_old)
#rm(d.guesses, d.guesses_old)
#d.guesses <- d.guesses_combined
#rm(d.guesses_combined)
#OR
d.guesses <-d.guesses_old %>%
filter(!playerID %in% persistentnoClick_old)
d.guesses <- d.guesses %>%
mutate(error = abs(guess - mleEstimateGame))
df_filtered <- d.guesses %>%
filter(idx == 2) %>%
mutate(
mleEstimate = trunc(nRabbits / (nRabbits + nSquirrels) *100),
nCritters = nRabbits + nSquirrels) %>%
replace_na(list(mleEstimate = 0)) %>%
group_by(gameID) %>%
mutate(
nRabbitsGame = sum(nRabbits),
#3
nSquirrelsGame = sum(nSquirrels),
#0
mleGame = trunc(nRabbitsGame / (nRabbitsGame + nSquirrelsGame)*100),
#3/3 *100 =100
totalCritters = sum(nCritters),
#3
prob = nCritters / totalCritters,
# 3/3 = 1
# 0/3 = 0
entropy = -sum(ifelse(prob > 0, prob * log(prob), 0)),
# log(3)
# 0
avgMlePlayers = mean(mleEstimate),
representation = abs(avgMlePlayers - mleGame) ) %>%
ungroup() %>%
select(playerID, gameID, nCrittersGame, nCritters, treatment, error, prob, totalCritters,
entropy, representation, condition)
# Define fixed breaks for x and y axes
x_breaks <- seq(min(d.random$entropy, df_filtered$entropy, na.rm = TRUE),
max(d.random$entropy, df_filtered$entropy, na.rm = TRUE), length.out = 6)
y_breaks <- seq(min(abs(d.random$representation), abs(df_filtered$representation), na.rm = TRUE),
max(abs(d.random$representation), abs(df_filtered$representation), na.rm = TRUE), length.out = 6)
# Create heatmap data for d.random with fixed intervals
heatmap_random <- d.random %>%
mutate(
x_bin = cut(entropy, breaks = x_breaks, include.lowest = TRUE),
y_bin = cut(abs(representation), breaks = y_breaks, include.lowest = TRUE)
) %>%
group_by(x_bin, y_bin) %>%
summarise(count = n(), avg_entropy = mean(entropy, na.rm = TRUE), .groups = 'drop') %>%
mutate(dataset = "Random")
# Create heatmap data for df_filtered with fixed intervals
heatmap_filtered <- df_filtered %>%
mutate(
x_bin = cut(entropy, breaks = x_breaks, include.lowest = TRUE),
y_bin = cut(abs(representation), breaks = y_breaks, include.lowest = TRUE)
) %>%
group_by(x_bin, y_bin) %>%
summarise(count = n(), avg_entropy = mean(entropy, na.rm = TRUE), .groups = 'drop') %>%
mutate(dataset = "Filtered")
# Combine both datasets for faceted plotting
combined_heatmap <- bind_rows(heatmap_random, heatmap_filtered)
ggplot(combined_heatmap, aes(x = x_bin, y = y_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Number of Games", low = "lightblue", high = "darkblue") +
labs(
x = "Average Entropy",
y = "Absolute Representation"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
) +
facet_wrap(~dataset)
x_breaks <- seq(min(d.random$entropy, df_filtered$entropy, na.rm = TRUE),
max(d.random$entropy, df_filtered$entropy, na.rm = TRUE), length.out = 6)
y_breaks <- seq(min(abs(d.random$totalCritters), abs(df_filtered$totalCritters), na.rm = TRUE),
max(abs(d.random$totalCritters), abs(df_filtered$totalCritters), na.rm = TRUE), length.out = 6)
# Create heatmap data for d.random with fixed intervals
heatmap_random <- d.random %>%
mutate(
x_bin = cut(entropy, breaks = x_breaks, include.lowest = TRUE),
y_bin = cut(abs(totalCritters), breaks = y_breaks, include.lowest = TRUE)
) %>%
group_by(x_bin, y_bin) %>%
summarise(count = n(), avg_entropy = mean(entropy, na.rm = TRUE), .groups = 'drop') %>%
mutate(dataset = "Random")
# Create heatmap data for df_filtered with fixed intervals
heatmap_filtered <- df_filtered %>%
mutate(
x_bin = cut(entropy, breaks = x_breaks, include.lowest = TRUE),
y_bin = cut(abs(totalCritters), breaks = y_breaks, include.lowest = TRUE)
) %>%
group_by(x_bin, y_bin) %>%
summarise(count = n(), avg_entropy = mean(entropy, na.rm = TRUE), .groups = 'drop') %>%
mutate(dataset = "Filtered")
# Combine both datasets for faceted plotting
combined_heatmap <- bind_rows(heatmap_random, heatmap_filtered)
# Create the faceted heatmap plot with shared scales
ggplot(combined_heatmap, aes(x = x_bin, y = y_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Number of Games", low = "lightblue", high = "darkblue") +
labs(
x = "Average Entropy",
y = "Total Critters"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
) +
facet_wrap(~dataset)
x_breaks <- seq(min(d.random$totalCritters, df_filtered$totalCritters, na.rm = TRUE),
max(d.random$totalCritters, df_filtered$totalCritters, na.rm = TRUE), length.out = 6)
y_breaks <- seq(min(abs(d.random$representation), abs(df_filtered$representation), na.rm = TRUE),
max(abs(d.random$representation), abs(df_filtered$representation), na.rm = TRUE), length.out = 6)
# Create heatmap data for d.random with fixed intervals
heatmap_random <- d.random %>%
mutate(
x_bin = cut(totalCritters, breaks = x_breaks, include.lowest = TRUE),
y_bin = cut(abs(representation), breaks = y_breaks, include.lowest = TRUE)
) %>%
group_by(x_bin, y_bin) %>%
summarise(count = n(), avg_tC = mean(totalCritters, na.rm = TRUE), .groups = 'drop') %>%
mutate(dataset = "Random")
# Create heatmap data for df_filtered with fixed intervals
heatmap_filtered <- df_filtered %>%
mutate(
x_bin = cut(totalCritters, breaks = x_breaks, include.lowest = TRUE),
y_bin = cut(abs(representation), breaks = y_breaks, include.lowest = TRUE)
) %>%
group_by(x_bin, y_bin) %>%
summarise(count = n(), avg_tC = mean(totalCritters, na.rm = TRUE), .groups = 'drop') %>%
mutate(dataset = "Filtered")
# Combine both datasets for faceted plotting
combined_heatmap <- bind_rows(heatmap_random, heatmap_filtered)
# Create the faceted heatmap plot with shared scales
ggplot(combined_heatmap, aes(x = x_bin, y = y_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Number of Games", low = "lightblue", high = "darkblue") +
labs(
x = "Total Critters",
y = "Absolute Representation"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
) +
facet_wrap(~dataset)
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(here)
library(ggthemes)
theme_set(theme_few())
d.random <- here('analysis/simulations/game_results10k.csv') %>%
read_csv(col_types = 'ccii') %>%
mutate(
mleEstimate = nRabbits / (nRabbits + nSquirrels),
nCritters = nRabbits + nSquirrels
) %>%
replace_na(list(mleEstimate = .5)) %>%
group_by(gameID) %>%
mutate(
nRabbitsGame = sum(nRabbits),
nSquirrelsGame = sum(nSquirrels),
mleGame = nRabbitsGame / (nRabbitsGame + nSquirrelsGame),
totalCritters = sum(nCritters),
prob = nCritters / totalCritters,
entropy = -sum(ifelse(prob > 0, prob * log(prob), 0)),
representation = mean(abs(mleEstimate - mleGame))
) %>%
ungroup()
d.guesses.v2.raw <- read_csv(here('data/PreregMergedGuesses.csv')) %>%
filter(idx == 4) %>%
filter(any(!is.na(treatmentName)))
unique_rows.v2 <- d.guesses.v2.raw %>%
filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)
d.guesses.v2 <- d.guesses.v2.raw %>%
filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3"))) %>%
bind_rows(unique_rows.v2) %>%
mutate(data = "new") %>%
mutate(treatmentName = case_when(
treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
)) %>%
separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
group_by(gameID) %>%
mutate(nCritters = nRabbits + nSquirrels,
mleEstimateIndiv = (nRabbits / (nRabbits + nSquirrels)),
mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), .5, mleEstimateIndiv),
nCrittersGame = nRabbitsGame+nSquirrelsGame,
mleEstimateGame = (nRabbitsGame / (nRabbitsGame + nSquirrelsGame)))  %>%
arrange(playerID, idx)
d.guesses.v1 <- read_csv(here('data/merged_data_exp.csv')) %>%
filter(idx == 4) %>%
distinct(playerID, gameID, guess, roundID, .keep_all = TRUE) %>%
filter(any(!is.na(treatmentName))) %>%
mutate(data = "old")%>%
filter(!is.na(guess)) %>%
mutate(treatmentName = case_when(
treatmentName == "experiment1-0.7" ~ 'unidirectional-0.7',
treatmentName == "experiment1-0.3" ~ 'unidirectional-0.3',
treatmentName =="experiment2-interactive-0.3" ~ 'interactive-0.3',
treatmentName =="experiment2-interactive-0.7" ~ 'interactive-0.7',
treatmentName =="experiment2-slider-0.3" ~ 'slider-0.3',
treatmentName =="experiment2-slider-0.7" ~ 'slider-0.7'
)) %>%
separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
group_by(gameID) %>%
mutate(nRabbitsGame = sum(nRabbits),
nSquirrelsGame = sum(nSquirrels),
nCritters = nRabbits + nSquirrels,
mleEstimateIndiv = (nRabbits / (nRabbits + nSquirrels)),
mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), .5, mleEstimateIndiv),
nCrittersGame = nRabbitsGame + nSquirrelsGame,
mleEstimateGame = (nRabbitsGame / (nRabbitsGame + nSquirrelsGame))) %>%
arrange(playerID, idx)
d.guesses <- d.guesses.v1 %>%
group_by(gameID) %>%
mutate(
totalCritters = sum(nCritters),
prob = nCritters / totalCritters,
entropy = -sum(ifelse(prob > 0, prob * log(prob), 0)),
representation = mean(abs(mleEstimateIndiv - mleEstimateGame))
) %>%
ungroup() %>%
select(playerID, gameID, nCrittersGame, nCritters, treatment, prob, totalCritters,
entropy, representation, condition)
combined_heatmap <- bind_rows(
d.random %>% mutate(dataset = "simulated"),
d.guesses %>% mutate(dataset = "empirical")
) %>%
mutate(
x_bin = cut(abs(entropy), breaks = seq(0, 1.5, .3), include.lowest = T, dig.lab = 2),
y_bin = cut(abs(representation), breaks = seq(0, 1, .1), include.lowest = T, dig.lab = 2)
) %>%
group_by(x_bin, y_bin, dataset) %>%
summarise(count = n()) %>%
group_by(dataset) %>%
mutate(prop = count / sum(count))
ggplot(combined_heatmap, aes(x = x_bin, y = y_bin)) +
geom_tile(aes(fill = prop), color = "white") +
scale_fill_gradient(name = "Proportion of Games", low = "lightblue", high = "darkblue") +
labs(
x = "Entropy",
y = "Representativeness"
) +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
) +
facet_wrap(~dataset)
ggplot(combined_heatmap, aes(x = nCrittersGame, y = y_bin)) +
geom_tile(aes(fill = prop), color = "white") +
scale_fill_gradient(name = "Proportion of Games", low = "lightblue", high = "darkblue") +
labs(
x = "Entropy",
y = "Representativeness"
) +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
) +
facet_wrap(~dataset)
# Calculate binned data for nCrittersGame against entropy and representation
nCritters_heatmap <- d.guesses %>%
group_by(gameID) %>%
summarise(
mean_nCrittersGame = mean(nCrittersGame, na.rm = TRUE),
entropy = mean(entropy, na.rm = TRUE),
representation = mean(representation, na.rm = TRUE)
) %>%
mutate(
entropy_bin = cut(entropy, breaks = seq(0, 1.5, .3), include.lowest = TRUE, dig.lab = 2),
representation_bin = cut(representation, breaks = seq(0, 1, .1), include.lowest = TRUE, dig.lab = 2)
) %>%
group_by(entropy_bin, representation_bin) %>%
summarise(
mean_nCrittersGame = mean(mean_nCrittersGame, na.rm = TRUE),
count = n()
) %>%
ungroup()
# Plot heatmap of nCrittersGame against entropy and representation
ggplot(nCritters_heatmap, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = mean_nCrittersGame), color = "white") +
scale_fill_gradient(name = "Average nCrittersGame", low = "lightgreen", high = "darkgreen") +
labs(
x = "Entropy",
y = "Representation"
) +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
# Binned data for nCrittersGame vs. Entropy
nCritters_entropy_heatmap <- d.guesses %>%
mutate(
nCrittersGame_bin = cut(nCrittersGame, breaks = seq(0, max(nCrittersGame, na.rm = TRUE), by = 5), include.lowest = TRUE),
entropy_bin = cut(entropy, breaks = seq(0, 1.5, .3), include.lowest = TRUE, dig.lab = 2)
) %>%
group_by(nCrittersGame_bin, entropy_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
# Heatmap for nCrittersGame vs. Entropy
ggplot(nCritters_entropy_heatmap, aes(x = entropy_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = prop), color = "white") +
scale_fill_gradient(name = "Proportion of Games", low = "lightblue", high = "darkblue") +
labs(x = "Entropy", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
# Binned data for nCrittersGame vs. Representation
nCritters_rep_heatmap <- d.guesses %>%
mutate(
nCrittersGame_bin = cut(nCrittersGame, breaks = seq(0, max(nCrittersGame, na.rm = TRUE), by = 5), include.lowest = TRUE),
representation_bin = cut(representation, breaks = seq(0, 1, .1), include.lowest = TRUE, dig.lab = 2)
) %>%
group_by(nCrittersGame_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
# Heatmap for nCrittersGame vs. Representation
ggplot(nCritters_rep_heatmap, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = prop), color = "white") +
scale_fill_gradient(name = "Proportion of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
# Binned data for nCrittersGame vs. Representation
nCritters_rep_heatmap <- d.guesses %>%
mutate(
nCrittersGame_bin = cut(nCrittersGame, breaks = seq(0, max(nCrittersGame, na.rm = TRUE), by = 5), include.lowest = TRUE),
representation_bin = cut(representation, breaks = seq(0, 1, .1), include.lowest = TRUE, dig.lab = 2)
) %>%
group_by(nCrittersGame_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
# Heatmap for nCrittersGame vs. Representation
ggplot(nCritters_rep_heatmap, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = prop), color = "white") +
scale_fill_gradient(name = "Proportion of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
# Binned data for nCrittersGame vs. Entropy
nCritters_entropy_heatmap <- d.guesses %>%
mutate(
nCrittersGame_bin = cut(nCrittersGame, breaks = seq(0, max(nCrittersGame, na.rm = TRUE), by = 5), include.lowest = TRUE),
entropy_bin = cut(entropy, breaks = seq(0, 1.5, .3), include.lowest = TRUE, dig.lab = 2)
) %>%
group_by(nCrittersGame_bin, entropy_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
# Heatmap for nCrittersGame vs. Entropy
ggplot(nCritters_entropy_heatmap, aes(x = entropy_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = prop), color = "white") +
scale_fill_gradient(name = "Proportion of Games", low = "lightblue", high = "darkblue") +
labs(x = "Entropy", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
# Binned data for nCrittersGame vs. Entropy without binning nCrittersGame
nCritters_entropy_heatmap <- d.guesses %>%
mutate(
entropy_bin = cut(entropy, breaks = seq(0, 1.5, .3), include.lowest = TRUE, dig.lab = 2)
) %>%
group_by(nCrittersGame, entropy_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
# Heatmap for nCrittersGame vs. Entropy
ggplot(nCritters_entropy_heatmap, aes(x = entropy_bin, y = nCrittersGame)) +
geom_tile(aes(fill = prop), color = "white") +
scale_fill_gradient(name = "Proportion of Games", low = "lightblue", high = "darkblue") +
labs(x = "Entropy", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
# Binned data for nCrittersGame vs. Representation without binning nCrittersGame
nCritters_rep_heatmap <- d.guesses %>%
mutate(
representation_bin = cut(representation, breaks = seq(0, 1, .1), include.lowest = TRUE, dig.lab = 2)
) %>%
group_by(nCrittersGame, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
# Heatmap for nCrittersGame vs. Representation
ggplot(nCritters_rep_heatmap, aes(x = representation_bin, y = nCrittersGame)) +
geom_tile(aes(fill = prop), color = "white") +
scale_fill_gradient(name = "Proportion of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
# Binned data for nCrittersGame vs. Entropy
nCritters_entropy_heatmap <- d.guesses %>%
mutate(
nCrittersGame_bin = cut(nCrittersGame, breaks = seq(0, max(nCrittersGame, na.rm = TRUE), by = 5), include.lowest = TRUE),
entropy_bin = cut(entropy, breaks = seq(0, 1.5, .3), include.lowest = TRUE, dig.lab = 2)
) %>%
group_by(nCrittersGame_bin, entropy_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
# Heatmap for nCrittersGame vs. Entropy
ggplot(nCritters_entropy_heatmap, aes(x = entropy_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = prop), color = "white") +
scale_fill_gradient(name = "Proportion of Games", low = "lightblue", high = "darkblue") +
labs(x = "Entropy", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
# Binned data for nCrittersGame vs. Entropy
nCritters_entropy_heatmap <- d.guesses %>%
mutate(
nCrittersGame_bin = cut(nCrittersGame, breaks = seq(0, by = 5), include.lowest = TRUE),
entropy_bin = cut(entropy, breaks = seq(0, 1.5, .3), include.lowest = TRUE, dig.lab = 2)
) %>%
group_by(nCrittersGame_bin, entropy_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
# Binned data for nCrittersGame vs. Entropy
nCritters_entropy_heatmap <- d.guesses %>%
mutate(
nCrittersGame_bin = cut(nCrittersGame, breaks = seq( by = 5), include.lowest = TRUE),
entropy_bin = cut(entropy, breaks = seq(0, 1.5, .3), include.lowest = TRUE, dig.lab = 2)
) %>%
group_by(nCrittersGame_bin, entropy_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
nCritters_entropy_heatmap <- d.guesses %>%
mutate(
nCrittersGame_bin = cut(nCrittersGame, breaks = seq(0, 100, by = 5), include.lowest = TRUE),
entropy_bin = cut(entropy, breaks = seq(0, 1.5, .3), include.lowest = TRUE, dig.lab = 2)
) %>%
group_by(nCrittersGame_bin, entropy_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
# Heatmap for nCrittersGame vs. Entropy
ggplot(nCritters_entropy_heatmap, aes(x = entropy_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = prop), color = "white") +
scale_fill_gradient(name = "Proportion of Games", low = "lightblue", high = "darkblue") +
labs(x = "Entropy", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
# Binned data for nCrittersGame vs. Representation
nCritters_rep_heatmap <- d.guesses %>%
mutate(
nCrittersGame_bin = cut(nCrittersGame, breaks = seq(0, 100, by = 5), include.lowest = TRUE),
representation_bin = cut(representation, breaks = seq(0, 1, .1), include.lowest = TRUE, dig.lab = 2)
) %>%
group_by(nCrittersGame_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
# Heatmap for nCrittersGame vs. Representation
ggplot(nCritters_rep_heatmap, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = prop), color = "white") +
scale_fill_gradient(name = "Proportion of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
