ggplot(nCritters_entropy_heatmap_new, aes(x = entropy_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Entropy", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
filtered_gameID_df <- d.random %>%
filter(gameID %in% filtered_df$gameID)
repeated_gameIDs <- filtered_df %>%
count(gameID) %>%
filter(n > 1)
print(repeated_gameIDs)
df_summary <- filtered_gameID_df %>%
group_by(gameID) %>%
summarise(players = list(playerID),
nRabbits = list(nRabbits),
nSquirrels = list(nSquirrels),
mleEstimate = list(mleEstimate),
nCritters = list(nCritters),
nRabbitsGame = first(nRabbitsGame),
nSquirrelsGame = first(nSquirrelsGame),
mleGame = first(mleGame),
totalCritters = first(totalCritters),
prob = first(prob),
entropy = first(entropy),
representation = first(representation),
entropy_bin = first(entropy_bin),
representation_bin = first(representation_bin),
nCrittersGame_bin = first(nCrittersGame_bin))
# Duplicate the specified gameIDs in the summarized data frame
duplicates <- df_summary %>%
filter(gameID %in% c(12542, 13223, 14219, 17244, 3951)) %>%
bind_rows(.) %>%  # Duplicate these rows
bind_rows(df_summary %>%
filter(gameID %in% c(4087)) %>%
bind_rows(., ., .)) %>% # Duplicate these rows for a total of four
bind_rows(df_summary %>%
filter(gameID %in% c(12022, 8059)) %>%
bind_rows(., .))  # Duplicate these rows for a total of three
# Combine the original summary with duplicates
final_df <- bind_rows(df_summary, duplicates)
# Convert to JSON
df_json <- final_df %>% toJSON(pretty = TRUE)
# Write to JSON file
write(df_json, file = "games.json")
balanced_df1 <- filtered_df %>%
distinct(gameID, .keep_all = TRUE) %>%
group_by(entropy_bin, representation_bin, nCrittersGame_bin) %>%
filter(representation_bin == '[0,0.12]' & nCrittersGame_bin == '(35,40]') %>%
slice_sample(n = 4, replace = FALSE) %>%  # Limit to 4 rows
ungroup()
balanced_df2 <- filtered_df %>%
distinct(gameID, .keep_all = TRUE) %>%
filter(!(representation_bin == '[0,0.12]' & nCrittersGame_bin == '(35,40]'))  # Exclude the specific group
balanced_df <- bind_rows(balanced_df1, balanced_df2)
heatmap_test <- balanced_df %>%
group_by(nCrittersGame_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- balanced_df %>%
group_by(entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "Entropy") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
nCritters_entropy_heatmap_new <-balanced_df %>%
group_by(nCrittersGame_bin, entropy_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
# Heatmap for nCrittersGame vs. Entropy
ggplot(nCritters_entropy_heatmap_new, aes(x = entropy_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Entropy", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- filtered_df %>%
group_by(nCrittersGame_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- filtered_df %>%
group_by(entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "Entropy") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
nCritters_entropy_heatmap_new <-filtered_df %>%
group_by(nCrittersGame_bin, entropy_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
# Heatmap for nCrittersGame vs. Entropy
ggplot(nCritters_entropy_heatmap_new, aes(x = entropy_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Entropy", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- balanced_df %>%
group_by(nCrittersGame_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
balanced_df1 <- filtered_df %>%
group_by(entropy_bin, representation_bin, nCrittersGame_bin) %>%
filter(representation_bin == '[0,0.12]' & nCrittersGame_bin == '(35,40]') %>%
slice_sample(n = 4, replace = FALSE) %>%  # Limit to 4 rows
ungroup()
balanced_df2 <- filtered_df %>%
filter(!(representation_bin == '[0,0.12]' & nCrittersGame_bin == '(35,40]'))  # Exclude the specific group
balanced_df <- bind_rows(balanced_df1, balanced_df2)
#when I do this
heatmap_test <- balanced_df %>%
group_by(nCrittersGame_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- filtered_df %>%
group_by(nCrittersGame_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- balanced_df %>%
group_by(nCrittersGame_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
balanced_df1 <- filtered_df %>%
filter(representation_bin == '[0,0.12]' & nCrittersGame_bin == '(35,40]') %>%
slice_head(n = 4)  # Ensure we take exactly 4 rows, no sampling replacement
balanced_df2 <- filtered_df %>%
filter(!(representation_bin == '[0,0.12]' & nCrittersGame_bin == '(35,40]')) %>%
balanced_df <- bind_rows(balanced_df1, balanced_df2)
balanced_df1 <- filtered_df %>%
filter(representation_bin == '[0,0.12]' & nCrittersGame_bin == '(35,40]') %>%
slice_head(n = 4)  # Ensure we take exactly 4 rows, no sampling replacement
balanced_df2 <- filtered_df %>%
filter(!(representation_bin == '[0,0.12]' & nCrittersGame_bin == '(35,40]'))
balanced_df <- bind_rows(balanced_df1, balanced_df2)
#when I do this
heatmap_test <- balanced_df %>%
group_by(nCrittersGame_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- balanced_df %>%
group_by(entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "Entropy") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
nCritters_entropy_heatmap_new <-balanced_df %>%
group_by(nCrittersGame_bin, entropy_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
# Heatmap for nCrittersGame vs. Entropy
ggplot(nCritters_entropy_heatmap_new, aes(x = entropy_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Entropy", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- filtered_df %>%
group_by(entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "Entropy") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- balanced_df %>%
group_by(entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "Entropy") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
nCritters_entropy_heatmap_new <-filtered_df %>%
group_by(nCrittersGame_bin, entropy_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
# Heatmap for nCrittersGame vs. Entropy
ggplot(nCritters_entropy_heatmap_new, aes(x = entropy_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Entropy", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- filtered_df %>%
group_by(nCrittersGame_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- filtered_df %>%
group_by(entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "Entropy") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- filtered_df %>%
group_by(entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "Entropy") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- filtered_df %>%
group_by(entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "entropy", y = "representation") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- balanced_df %>%
group_by(entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "entropy", y = "representation") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- filtered_df %>%
group_by(entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "entropy", y = "representation") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
balanced_df1 <- filtered_df %>%
filter(
(representation_bin == '[0,0.12]' & nCrittersGame_bin == '(35,40]' & entropy_bin != '(0.34,0.68]') |
(entropy_bin == '(0.34,0.68]')
) %>%
distinct(gameID, .keep_all = TRUE) %>%
slice_head(n = 4)  # Ensure we take exactly 4 rows, no sampling replacement
balanced_df2 <- filtered_df %>%
filter(!((representation_bin == '[0,0.12]' & nCrittersGame_bin == '(35,40]') & entropy_bin != '(0.34,0.68]')) %>%
distinct(gameID, .keep_all = TRUE)
balanced_df <- bind_rows(balanced_df1, balanced_df2)
heatmap_test <- balanced_df %>%
group_by(entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "entropy", y = "representation") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- filtered_df %>%
group_by(entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "entropy", y = "representation") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- balanced_df %>%
group_by(entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "entropy", y = "representation") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- filtered_df %>%
group_by(entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "entropy", y = "representation") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
balanced_df1 <- filtered_df %>%
filter(representation_bin == '[0,0.12]' & nCrittersGame_bin == '(35,40]') %>%
slice_head(n = 4)  # Ensure we take exactly 4 rows, no sampling replacement
balanced_df2 <- filtered_df %>%
filter(!(representation_bin == '[0,0.12]' & nCrittersGame_bin == '(35,40]'))
balanced_df <- bind_rows(balanced_df1, balanced_df2)
#when I do this it removes the low entropy/low representation intersection and some of the other low combo games
heatmap_test <- filtered_df %>%
group_by(nCrittersGame_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
heatmap_test <- filtered_df %>%
group_by(entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "entropy", y = "representation") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
nCritters_entropy_heatmap_new <-filtered_df %>%
group_by(nCrittersGame_bin, entropy_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
# Heatmap for nCrittersGame vs. Entropy
ggplot(nCritters_entropy_heatmap_new, aes(x = entropy_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Entropy", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
)
filtered_gameID_df <- d.random %>%
filter(gameID %in% filtered_df$gameID)
repeated_gameIDs <- filtered_df %>%
count(gameID) %>%
filter(n > 1)
print(repeated_gameIDs)
df_summary <- filtered_gameID_df %>%
group_by(gameID) %>%
summarise(players = list(playerID),
nRabbits = list(nRabbits),
nSquirrels = list(nSquirrels),
mleEstimate = list(mleEstimate),
nCritters = list(nCritters),
nRabbitsGame = first(nRabbitsGame),
nSquirrelsGame = first(nSquirrelsGame),
mleGame = first(mleGame),
totalCritters = first(totalCritters),
prob = first(prob),
entropy = first(entropy),
representation = first(representation),
entropy_bin = first(entropy_bin),
representation_bin = first(representation_bin),
nCrittersGame_bin = first(nCrittersGame_bin))
# Duplicate the specified gameIDs in the summarized data frame
duplicates <- df_summary %>%
filter(gameID %in% c(10413,11987,20413,20594,5972,6565,7036 )) %>%
bind_rows(.) %>%  # Duplicate these rows
bind_rows(df_summary %>%
filter(gameID %in% c(18321,22353,22919)) %>%
bind_rows(., ., .)) %>% # Duplicate these rows for a total of four
# Combine the original summary with duplicates
final_df <- bind_rows(df_summary, duplicates)
df_summary <- filtered_gameID_df %>%
group_by(gameID) %>%
summarise(players = list(playerID),
nRabbits = list(nRabbits),
nSquirrels = list(nSquirrels),
mleEstimate = list(mleEstimate),
nCritters = list(nCritters),
nRabbitsGame = first(nRabbitsGame),
nSquirrelsGame = first(nSquirrelsGame),
mleGame = first(mleGame),
totalCritters = first(totalCritters),
prob = first(prob),
entropy = first(entropy),
representation = first(representation),
entropy_bin = first(entropy_bin),
representation_bin = first(representation_bin),
nCrittersGame_bin = first(nCrittersGame_bin))
# Duplicate the specified gameIDs in the summarized data frame
duplicates <- df_summary %>%
filter(gameID %in% c(10413,11987,20413,20594,5972,6565,7036 )) %>%
bind_rows(.) %>%  # Duplicate these rows
bind_rows(df_summary %>%
filter(gameID %in% c(18321,22353,22919)) %>%
bind_rows(., ., .))  # Duplicate these rows for a total of four
# Combine the original summary with duplicates
final_df <- bind_rows(df_summary, duplicates)
# Convert to JSON
df_json <- final_df %>% toJSON(pretty = TRUE)
# Write to JSON file
write(df_json, file = "games.json")
