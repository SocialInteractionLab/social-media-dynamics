---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(here)
library(ggthemes)

theme_set(theme_few())
```

# Read in simulated data

```{r}
d.random <- here('analysis/simulations/game_results10k.csv') %>%
  read_csv(col_types = 'iiii') %>%
  mutate(
    mleEstimate = nRabbits / (nRabbits + nSquirrels),
    nCritters = nRabbits + nSquirrels
  ) %>%
  replace_na(list(mleEstimate = .5)) %>%
  group_by(gameID) %>%
  mutate(
    nRabbitsGame = sum(nRabbits),
    nSquirrelsGame = sum(nSquirrels),
    mleGame = nRabbitsGame / (nRabbitsGame + nSquirrelsGame),
    totalCritters = sum(nCritters),
    prob = nCritters / totalCritters,
    entropy = -sum(ifelse(prob > 0, prob * log(prob), 0)),
    representation = mean(abs(mleEstimate - mleGame))
  ) %>%
  ungroup()
```

# Read in V2 data

```{r}
d.guesses.v2.raw <- read_csv(here('data/PreregMergedGuesses.csv')) %>%
  filter(idx == 4) %>%
  filter(any(!is.na(treatmentName)))

unique_rows.v2 <- d.guesses.v2.raw %>%
  filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
  distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)

d.guesses.v2 <- d.guesses.v2.raw %>%
  filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3"))) %>%
  bind_rows(unique_rows.v2) %>%
  mutate(data = "new") %>%
  mutate(treatmentName = case_when(
    treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
    treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
    treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
    treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
    treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
  )) %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
  group_by(gameID) %>%
  mutate(nCritters = nRabbits + nSquirrels,
         mleEstimateIndiv = (nRabbits / (nRabbits + nSquirrels)), 
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), .5, mleEstimateIndiv),
         nCrittersGame = nRabbitsGame+nSquirrelsGame,
         mleEstimateGame = (nRabbitsGame / (nRabbitsGame + nSquirrelsGame)))  %>%
  arrange(playerID, idx)
```

```{r}
d.guesses.v1 <- read_csv(here('data/merged_data_exp.csv')) %>%
  filter(idx == 4) %>%
  distinct(playerID, gameID, guess, roundID, .keep_all = TRUE) %>%
  filter(any(!is.na(treatmentName))) %>%
  mutate(data = "old")%>%
  filter(!is.na(guess)) %>%
  mutate(treatmentName = case_when(
    treatmentName == "experiment1-0.7" ~ 'unidirectional-0.7',
    treatmentName == "experiment1-0.3" ~ 'unidirectional-0.3',
    treatmentName =="experiment2-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="experiment2-interactive-0.7" ~ 'interactive-0.7',
    treatmentName =="experiment2-slider-0.3" ~ 'slider-0.3',
    treatmentName =="experiment2-slider-0.7" ~ 'slider-0.7'
  )) %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
  group_by(gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels), 
         nCritters = nRabbits + nSquirrels,
         mleEstimateIndiv = (nRabbits / (nRabbits + nSquirrels)), 
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), .5, mleEstimateIndiv),
         nCrittersGame = nRabbitsGame + nSquirrelsGame,
         mleEstimateGame = (nRabbitsGame / (nRabbitsGame + nSquirrelsGame))) %>%
  arrange(playerID, idx)
```

```{r}
d.guesses <- d.guesses.v1 %>%
  group_by(gameID) %>%
  mutate(
    totalCritters = sum(nCritters),
    prob = nCritters / totalCritters,
    entropy = -sum(ifelse(prob > 0, prob * log(prob), 0)),
    representation = mean(abs(mleEstimateIndiv - mleEstimateGame))
  ) %>%
  ungroup() %>%
  select(playerID, gameID, nCrittersGame, nCritters, treatment, prob, totalCritters,
         entropy, representation, condition)
```

```{r}
# Define fixed breaks for x and y axes
x_breaks <- seq(min(d.random$entropy, d.guesses$entropy, na.rm = TRUE),
                max(d.random$entropy, d.guesses$entropy, na.rm = TRUE), length.out = 6)

y_breaks <- seq(min(abs(d.random$representation), abs(d.guesses$representation), na.rm = TRUE),
                max(abs(d.random$representation), abs(d.guesses$representation), na.rm = TRUE), length.out = 6)

# Create heatmap data for d.random with fixed intervals
heatmap_random <- d.random %>%
  mutate(
    x_bin = cut(entropy, breaks = x_breaks, include.lowest = TRUE),
    y_bin = cut(abs(representation), breaks = y_breaks, include.lowest = TRUE)
  ) %>%
  group_by(x_bin, y_bin) %>%
  summarise(count = n(), avg_entropy = mean(entropy, na.rm = TRUE), .groups = 'drop') %>%
  mutate(dataset = "simulated")

# Create heatmap data for df_filtered with fixed intervals
heatmap_filtered <- d.guesses %>%
  mutate(
    x_bin = cut(entropy, breaks = x_breaks, include.lowest = TRUE),
    y_bin = cut(abs(representation), breaks = y_breaks, include.lowest = TRUE)
  ) %>%
  group_by(x_bin, y_bin) %>%
  summarise(count = n(), avg_entropy = mean(entropy, na.rm = TRUE), .groups = 'drop') %>%
  mutate(dataset = "empirical")

# Combine both datasets for faceted plotting
combined_heatmap <- bind_rows(heatmap_random, heatmap_filtered) %>%
  group_by(dataset) %>%
  mutate(prop = count / sum(count))

ggplot(combined_heatmap, aes(x = x_bin, y = y_bin)) +
  geom_tile(aes(fill = prop), color = "white") +
  scale_fill_gradient(name = "Proportion of Games", low = "lightblue", high = "darkblue") +
  labs(
    x = "Entropy",
    y = "Representativeness"
  ) +
  theme_few() +
  theme(
    aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
  ) +
  facet_wrap(~dataset)
```

