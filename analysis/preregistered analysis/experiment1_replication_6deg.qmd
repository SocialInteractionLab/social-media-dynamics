---
title: "Experiment1"
format: html
editor: visual
---

# Import packages

```{r}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
```

## Read in data

```{r}
d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- d.guesses %>%
  filter(!is.na(treatmentName)) %>% 
  distinct() %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100 +6),
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100 +6),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))

```

## Implement exclusions

```{r}
persistentnoClick <- c()  
for (i in 1:11) {
  idx_pair <- c(i+1, i+2)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx %in% idx_pair]))) %>%
      filter(idx != 1) %>%  # Filter out idx == 1
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)

```

```{r}
games_with_4_players <- d.guesses %>%
    filter(!(playerID %in% persistentnoClick)) %>%
  group_by(gameID) %>%
  summarise(unique_players = n_distinct(playerID)) %>% 
  filter(unique_players == 4)

d.guesses <- left_join(d.guesses, games_with_4_players, by = "gameID")
d.guesses <- d.guesses %>% filter(!is.na(unique_players))
```

```{r}
confused <- d.guesses %>%
  filter(idx == 1) %>%
  mutate(discrepency = abs(guess - mleEstimateIndiv)) %>% 
  filter(discrepency > 70) %>% 
  pull(playerID, gameID)

cat('excluding', length(confused), 'for being >70 points off estimate at the beginning') 
cat('excluding', length(persistentnoClick %>% unique()), 'more for inattentiveness')
```

```{r}
games_with_4_players <- games_with_4_players %>%
      #filter(!(gameID %in% confused)) %>%
  left_join(d.guesses, by = "gameID") %>%
  select(gameID, treatmentName) %>%
  distinct()
treatment_count <- as.data.frame(table(games_with_4_players$treatmentName))
print(treatment_count)
```

```{r}

d.guesses$treatAvg <- ifelse(d.guesses$treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-slider- 0.7", "rerun-interactive- 0.7"),76,36)
d.guesses$treatProb <- ifelse(d.guesses$treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-slider- 0.7", "rerun-interactive- 0.7"),0.76,0.36)
```

# subsetting

```{r}
levels(d.guesses$treatmentName)
interactives <- subset(d.guesses, treatmentName %in% c('rerun-interactive- 0.7','rerun-interactive-0.3'))
sliders <- subset(d.guesses, treatmentName %in% c('rerun-slider- 0.7','rerun-slider- 0.3'))
unidirectionals <- subset(d.guesses, treatmentName %in% c('rerun-unidirectional- 0.7','rerun-unidirectional- 0.3'))
```

# Result #1: Absolute convergence

There is a 6% skew towards squirrels on the slider because of the way the slider was designed. (33/59 squirrels, 26/59 rabbits)

```{r}
truePs <- d.guesses %>% 
  filter(idx == 1) %>%
  group_by(treatmentName, gameID, nSquirrelsGame, nRabbitsGame) %>%
  tally() %>%
  group_by(treatmentName) %>%
  summarize(p = mean(nRabbitsGame / (nSquirrelsGame + nRabbitsGame)))

unidirectionals %>%
 filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(guess = mean(guess)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(guess) %>%
    mutate(treatmentName = case_when(treatmentName == 'rerun-unidirectional- 0.3' ~ 'p=0.3',
                                   treatmentName == 'rerun-unidirectional- 0.7' ~ 'p=0.7')) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(36, 76), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill=treatmentName),color=NA, alpha = 0.1) +
    theme_few() +
    labs(y = 'average guess', x = 'round #', color = '') +
    scale_color_colorblind() +
    scale_fill_colorblind(guide='none') +
    scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
    theme(aspect.ratio = 1, legend.position = 'top')

ggsave(here('exp1_raw_convergence_prereg_unidirectional_6.pdf'), height=3, width = 3)


```

```{r}
truePs <- d.guesses %>% 
  filter(idx == 1) %>%
  group_by(treatmentName, gameID, nSquirrelsGame, nRabbitsGame) %>%
  tally() %>%
  group_by(treatmentName) %>%
  summarize(p = mean(nRabbitsGame / (nSquirrelsGame + nRabbitsGame)))

sliders %>%
 filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(guess = mean(guess)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(guess) %>%
  mutate(treatmentName = case_when(treatmentName == 'rerun-slider- 0.3' ~ 'p=0.3',
                                   treatmentName == 'rerun-slider- 0.7' ~ 'p=0.7')) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(36, 76), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill=treatmentName),color=NA, alpha = 0.1) +
    theme_few() +
    labs(y = 'average guess', x = 'round #', color = '') +
    scale_color_colorblind() +
    scale_fill_colorblind(guide='none') +
    scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
    theme(aspect.ratio = 1, legend.position = 'top')

ggsave(here('exp1_raw_convergence_prereg_slider_6.pdf'), height=3, width = 3)
```

```{r}
truePs <- d.guesses %>% 
  filter(idx == 1) %>%
  group_by(treatmentName, gameID, nSquirrelsGame, nRabbitsGame) %>%
  tally() %>%
  group_by(treatmentName) %>%
  summarize(p = mean(nRabbitsGame / (nSquirrelsGame + nRabbitsGame)))

interactives %>%
 filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(guess = mean(guess)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(guess) %>%
    mutate(treatmentName = case_when(treatmentName == 'rerun-interactive-0.3' ~ 'p=0.3',
                                   treatmentName == 'rerun-interactive- 0.7' ~ 'p=0.7')) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(36, 76), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill=treatmentName),color=NA, alpha = 0.1) +
    theme_few() +
    labs(y = 'average guess', x = 'round #', color = '') +
    scale_color_colorblind() +
    scale_fill_colorblind(guide='none') +
    scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
    theme(aspect.ratio = 1, legend.position = 'top')

ggsave(here('exp1_raw_convergence_prereg_interactive_6.pdf'), height=3, width = 3)
```

```{r}
d.guesses$treatmentName<- as.factor(d.guesses$treatmentName)
levels(d.guesses$treatmentName)
d.guesses %>%
    filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
  filter(!(playerID %in% confused)) %>%
   filter(gameID %in% games_with_4_players) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  
  lmerTest::lmer(guess ~ poly(idx, 2) + treatmentName
                + (1 + poly(idx, 1) || gameID) 
                + (1 + poly(idx, 1) || playerID:gameID), 
       data = ., 
       contrasts = list(treatmentName = contr.sum(2))) %>% 
  summary()
```

# Result #2: Examine error (collapsing across treatment)

```{r}
d.guesses %>%
  group_by(gameID, treatmentName) %>%
  summarize(mleEstimate = mean(as.numeric(mleEstimateIndiv))) %>%
  ggplot(aes(x = as.numeric(mleEstimate))) +
    geom_histogram(binwidth =10) +
    facet_wrap(~ treatmentName, scales = "free") +
    #xlim(0,100) +
    labs(title = "Distribution of mleEstimate for each treatmentName") +
  theme_few()
```

```{r}
unidirectionals %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  mutate(error = abs(guess - treatAvg)) %>%
  lmerTest::lmer(error ~ poly(idx, 2) * treatmentName
                + (1 + poly(idx, 1) | gameID) 
                + (1 + poly(idx, 1) | playerID:gameID), 
       data = ., 
       contrasts = list(treatmentName = contr.sum(2))) %>% 
  summary()

unidirectionals %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(error = mean(abs(guess - treatAvg))) %>%
  group_by(treatmentName, idx) %>%
  tidyboot_mean(error) %>%
   mutate(treatmentName = case_when(treatmentName == 'rerun-unidirectional- 0.3' ~ 'p=0.3',
                                   treatmentName == 'rerun-unidirectional- 0.7' ~ 'p=0.7')) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill = treatmentName), 
                color = NA, 
                alpha = 0.1) +
    geom_hline(yintercept = 0, linetype = 'dotted') +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se =F) +
    theme_few() +
    labs(y = 'average error', x = 'round #', color = '') +
    scale_color_colorblind() +
    scale_fill_colorblind(guide="none") +
    ylim(0, 30) +
    scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
    theme(aspect.ratio = 1, legend.position = 'top')

ggsave(here('exp1_raw_error_prereg_unidirectional_6.pdf'), height=3, width = 3)
#if you want to test without exclusion, remember to also remove the filter for 4 players at the top
```

```{r}
interactives %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  mutate(error = abs(guess - treatAvg)) %>%
  lmerTest::lmer(error ~ poly(idx, 2) * treatmentName
                + (1 + poly(idx, 1) | gameID) 
                + (1 + poly(idx, 1) | playerID:gameID), 
       data = ., 
       contrasts = list(treatmentName = contr.sum(2))) %>% 
  summary()

interactives %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(error = mean(abs(guess - treatAvg))) %>%
  group_by(treatmentName, idx) %>%
  tidyboot_mean(error) %>%
      mutate(treatmentName = case_when(treatmentName == 'rerun-interactive-0.3' ~ 'p=0.3',
                                   treatmentName == 'rerun-interactive- 0.7' ~ 'p=0.7')) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill = treatmentName), 
                color = NA, 
                alpha = 0.1) +
    geom_hline(yintercept = 0, linetype = 'dotted') +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se =F) +
    theme_few() +
    labs(y = 'average error', x = 'round #', color = '') +
    scale_color_colorblind() +
    scale_fill_colorblind(guide="none") +
    ylim(0, 30) +
    scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
    theme(aspect.ratio = 1, legend.position = 'top')

ggsave(here('exp1_raw_error_prereg_interactive_6.pdf'), height=3, width = 3)

```

```{r}
interactives %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  ggplot(aes(x = idx, y = (guess - treatAvg), color = treatmentName)) +
    geom_point() +
    geom_hline(yintercept = 0, linetype = 'dotted') +
    theme_few() +
    labs(y = 'error', x = 'round #', color = 'Treatment') +
    scale_color_discrete(name = 'Treatment') +
    scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
    theme(aspect.ratio = 1, legend.position = 'top')



```

```{r}
sliders %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  mutate(error = abs(guess - treatAvg)) %>%
  lmerTest::lmer(error ~ poly(idx, 2) * treatmentName
                + (1 + poly(idx, 1) | gameID) 
                + (1 + poly(idx, 1) | playerID:gameID), 
       data = ., 
       contrasts = list(treatmentName = contr.sum(2))) %>% 
  summary()

sliders %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(error = mean(abs(guess - treatAvg))) %>%
  group_by(treatmentName, idx) %>%
  tidyboot_mean(error) %>%
    mutate(treatmentName = case_when(treatmentName == 'rerun-slider- 0.3' ~ 'p=0.3',
                                   treatmentName == 'rerun-slider- 0.7' ~ 'p=0.7')) %>%
 ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill = treatmentName), 
                color = NA, 
                alpha = 0.1) +
    geom_hline(yintercept = 0, linetype = 'dotted') +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se =F) +
    theme_few() +
    labs(y = 'average error', x = 'round #', color = '') +
    scale_color_colorblind() +
    scale_fill_colorblind(guide="none") +
    ylim(0, 30) +
    scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
    theme(aspect.ratio = 1, legend.position = 'top')

ggsave(here('exp1_raw_error_prereg_slider_6.pdf'), height=3, width = 3)
```

# Result #3: Does individual data being an outlier create a consistent rate of error

```{r}
d.MLE <- d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  mutate(outlierPercent = abs(mleEstimateIndiv - mleEstimateGame)) %>%
  mutate(error = guess - (mleEstimateGame))
```

```{r}
# Assuming you have a linear model fit earlier
ggplot(d.MLE, aes(x = outlierPercent, y = (error), color = idx)) +
  geom_jitter(alpha = 0.1) +
  labs(y = "average error", x = "outlier degree", color= "round") +
  geom_smooth(aes(group = idx), method = "lm", se = FALSE, alpha = 0.3) +
  theme_few() +
  scale_color_continuous_tableau(palette = 'Classic Blue') +
  guides(color = guide_colorbar(nbin = 9, barheight = 7,barwidth=0.5,
                                 title.position = "top"))+
  theme(legend.position = "right", aspect.ratio = 1) + 
  #ylim(-80,80)  +
  xlim(0, 80)

ggsave(here('exp1_outlier_prereg_all_6.pdf'), height=3, width = 3)
```

```{r}
library(lmerTest)
conflicts_prefer(lmerTest::lmer)
d.MLE %>%
  lmer(error ~ scale(outlierPercent) * scale(idx) + (1 + scale(outlierPercent) + scale(idx) | gameID), 
       data = .) %>% 
  summary()
```

## 
