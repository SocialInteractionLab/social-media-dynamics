---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)

theme_set(theme_few())
```

## Read in data

```{r}
ParseJSONColumn <- function(x) {
  str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>% 
    fromJSON(flatten = T) 
}

d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- d.guesses %>%
  group_by(playerID) %>%
  filter(any(!is.na(treatmentName))) %>%
  ungroup()

unique_rows <- d.guesses %>%
  filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
  distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)

d.guesses <- d.guesses %>%
  filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")))

d.guesses <- bind_rows(d.guesses, unique_rows)

```

## Implement exclusions

```{r}
confused <- d.guesses %>%
  filter(idx == 1) %>%
  mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
  mutate(discrepency = abs(guess - mleEstimate)) %>% 
  filter(discrepency > 70) %>% 
  pull(playerID)

persistentnoClick <- c()  
for (i in 1:11) {
  idx_pair <- c(i+1, i+2)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx %in% idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)


```

### Game-level distribution

```{r}
gameCounts <- d.guesses %>%
    filter(!(gameID %in% persistentnoClick)) %>%
  filter(idx == 1) %>%
  group_by(gameID, playerID, nRabbits, nSquirrels) %>%
  tally() %>% 
  group_by(gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) 
  
```

```{r}

d.guesses <- d.guesses %>%
  mutate(treatmentName = case_when(
    treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
    treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
    treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
    treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
    treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
  )) %>%
 
  left_join(gameCounts) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100), 
         nCrittersGame = nRabbitsGame+nSquirrelsGame,
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
  arrange(playerID, idx)


```

## Information Entropy

### games with incomplete information

```{r}
reducedPlayers <- d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  group_by(gameID) %>%
  filter(n_distinct(playerID) != 4) %>%
  ungroup()

reducedInfo <- d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  filter(!(gameID %in% reducedPlayers)) %>%
  filter(nCrittersGame < 20)

reducedPlayers <- reducedPlayers %>%
     filter(!(gameID %in% reducedInfo))

print(nrow(reducedInfo))

print(nrow(reducedPlayers))
   #games with incomplete information (less that 20 samples/less than 4 players


```

```{r}
print(nrow(d.guesses))

```

```{r}
reducedInfo %>%  
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-')  %>%
  group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm= T)) %>%
  group_by(condition, idx) %>%
  tidyboot::tidyboot_mean(error, na.rm = T) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = condition, linetype = condition == 'interactive')) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none') +
    scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
    labs(y = 'average error', x = 'round #', color = '')  +
    theme(aspect.ratio = 1, legend.position = 'top')
```

```{r}
reducedInfo %>%  
    filter(nCrittersGame < 10) %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-')  %>%
  group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm= T)) %>%
  group_by(condition, idx) %>%
  tidyboot::tidyboot_mean(error, na.rm = T) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = condition, linetype = condition == 'interactive')) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none') +
    scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
    labs(y = 'average error', x = 'round #', color = '')  +
    theme(aspect.ratio = 1, legend.position = 'top')
```

```{r}
reducedInfo %>%
  mutate(nCrittersGroup = case_when(
    nCrittersGame >= 1 & nCrittersGame <= 10 ~ 10,
    nCrittersGame >= 11 & nCrittersGame <= 15 ~ 15,
    nCrittersGame >= 16 & nCrittersGame <= 20 ~ 20,
    TRUE ~ NA_real_
  )) %>%
  filter(!is.na(nCrittersGroup)) %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
  group_by(treatment, condition, idx, gameID, mleEstimateGame, nCrittersGroup) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE), .groups = 'drop') %>%
  group_by(condition, idx, nCrittersGroup) %>%
  tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
  filter(condition == 'interactive') %>%
  ggplot(aes(x = idx, y = empirical_stat, color = nCrittersGroup, group = nCrittersGroup, linetype = 'interactive')) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = 0, linetype = 'dotted') +
  theme_few() +
  scale_color_gradient(low = "lightgreen", high = "darkgreen") +
  guides(linetype = 'none') +
  scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
  labs(y = 'average error', x = 'round #', color = 'nCrittersGroup') +
  theme(aspect.ratio = 1, legend.position = 'top')
```

```{r}
reducedInfo %>%
  mutate(nCrittersGroup = case_when(
 nCrittersGame >= 1 & nCrittersGame <= 10 ~ 10,
    nCrittersGame >= 11 & nCrittersGame <= 15 ~ 15,
    nCrittersGame >= 16 & nCrittersGame <= 20 ~ 20,
    TRUE ~ NA_real_
  )) %>%
  filter(!is.na(nCrittersGroup)) %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
  group_by(treatment, condition, idx, gameID, mleEstimateGame, nCrittersGroup) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE), .groups = 'drop') %>%
  group_by(condition, idx, nCrittersGroup) %>%
  tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
  filter(condition == 'slider') %>%
  ggplot(aes(x = idx, y = empirical_stat, color = nCrittersGroup, group = nCrittersGroup, linetype = 'slider')) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = 0, linetype = 'dotted') +
  theme_few() +
  scale_color_gradient(low = "lightpink", high = "darkorchid4") +
  guides(linetype = 'none') +
  scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
  labs(y = 'average error', x = 'round #', color = 'nCrittersGroup') +
  theme(aspect.ratio = 1, legend.position = 'top')
```

```{r}
reducedInfo %>%
  mutate(nCrittersGroup = case_when(
 nCrittersGame >= 1 & nCrittersGame <= 10 ~ 10,
    nCrittersGame >= 11 & nCrittersGame <= 15 ~ 15,
    nCrittersGame >= 16 & nCrittersGame <= 20 ~ 20,
    TRUE ~ NA_real_
  )) %>%
  filter(!is.na(nCrittersGroup)) %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
  group_by(treatment, condition, idx, gameID, mleEstimateGame, nCrittersGroup) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE), .groups = 'drop') %>%
  group_by(condition, idx, nCrittersGroup) %>%
  tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
  filter(condition == 'unidirectional') %>%
  ggplot(aes(x = idx, y = empirical_stat, color = nCrittersGroup, group = nCrittersGroup, linetype = 'unidirectional')) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = 0, linetype = 'dotted') +
  theme_few() +
scale_color_gradient(low = "#FFDAB9", high = "#FF4500")+
  guides(linetype = 'none') +
  scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
  labs(y = 'average error', x = 'round #', color = 'nCrittersGroup') +
  theme(aspect.ratio = 1, legend.position = 'top')
```

```{r}
summary_data <- reducedInfo %>%
  mutate(nCrittersGroup = case_when(
 nCrittersGame >= 1 & nCrittersGame <= 10 ~ 10,
    nCrittersGame >= 11 & nCrittersGame <= 15 ~ 15,
    nCrittersGame >= 16 & nCrittersGame <= 20 ~ 20,
    TRUE ~ NA_real_
  )) %>%
  filter(!is.na(nCrittersGroup)) %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
  count(condition, treatment, nCrittersGroup)

# Print summary data
print(summary_data)
```

## reduced players

```{r}
reducedPlayers %>%  
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-')  %>%
  group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm= T)) %>%
  group_by(condition, idx) %>%
  tidyboot::tidyboot_mean(error, na.rm = T) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = condition, linetype = condition == 'interactive')) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none') +
    scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
    labs(y = 'average error', x = 'round #', color = '')  +
    theme(aspect.ratio = 1, legend.position = 'top')
```

```{r}
counts <- d.guesses %>%
 #   filter(!(playerID %in% confused)) %>%
 # filter(!(playerID %in% persistentnoClick)) %>%
  group_by(gameID) %>%
  summarise(num_players = n_distinct(playerID)) 

group_counts <- table(counts$num_players)
print(group_counts)


# Calculate error and join with counts
d.guesses <- d.guesses %>%
 #   filter(!(playerID %in% confused)) %>%
 # filter(!(playerID %in% persistentnoClick)) %>%
  mutate(error = abs(guess - mleEstimateGame)) %>%
  left_join(counts, by = "gameID")
```

```{r}
error_summary <- d.guesses %>%
  group_by(num_players, idx) %>%
  summarise(mean_error = mean(error),
            lower_ci = quantile(error, 0.025),
            upper_ci = quantile(error, 0.975),  
            .groups = 'drop')

filtered_summary <- error_summary %>%
  filter(num_players != 5)%>%
    filter(num_players != 6)%>%
    filter(num_players != 7)%>%
  filter(num_players != 1)

ggplot(filtered_summary, aes(x = idx, y = mean_error, color = as.factor(num_players))) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = 0, linetype = 'dotted') +
  scale_color_brewer(palette = 'Accent') +
  labs(x = 'Round #', y = 'Average Error', color = 'Number of Players') +
  scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
  theme_minimal() +
  theme(aspect.ratio = 1, legend.position = 'top')

```

## Extremes of information within-game

```{r}
d.guesses %>%
  group_by(gameID, treatment, condition) %>%
  summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
  ggplot(aes(x = mleEstimate)) +
    geom_histogram(binwidth = 10) +
    #xlim(0,100) +
    labs(title = "Distribution of mleEstimate for each treatmentName") +
  theme_few()
```

```{r}
d.guesses_entropy <- d.guesses %>%
   filter((treatment == 0.3 & mleEstimateIndiv == 30) | (treatment == 0.7 & mleEstimateIndiv == 70))

d.guesses_entropy %>%
  group_by(gameID, treatment, condition) %>%
  summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
  ggplot(aes(x = mleEstimate)) +
    geom_histogram(binwidth = 10) +
    #xlim(0,100) +
    labs(title = "Distribution of mleEstimate for each treatmentName") +
  theme_few()
```

```{r}

d.guesses_filtered <- d.guesses %>%
  filter(((treatment == 0.3 & between(mleEstimateIndiv, 25, 35)) |
           (treatment == 0.7 & between(mleEstimateIndiv, 65, 75))))


d.guesses %>%
  filter (gameID %in% d.guesses_entropy) %>%
  group_by(gameID, treatment, condition) %>%
  summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
  ggplot(aes(x = mleEstimate)) +
    geom_histogram(binwidth = 10) +
    #xlim(0,100) +
    labs(title = "Distribution of mleEstimate for each treatmentName") +
  theme_few()
```
