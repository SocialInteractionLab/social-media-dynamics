---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)

theme_set(theme_few())
```

## Read in data

```{r}
ParseJSONColumn <- function(x) {
  str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>% 
    fromJSON(flatten = T) 
}

d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- d.guesses %>%
  group_by(playerID) %>%
  filter(any(!is.na(treatmentName))) %>%
  ungroup()

unique_rows <- d.guesses %>%
  filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
  distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)

d.guesses <- d.guesses %>%
  filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")))

d.guesses <- bind_rows(d.guesses, unique_rows)
d.guesses <- d.guesses %>%  
  filter(idx != 1) 

d.guesses <- d.guesses %>%
  mutate(data = "new")

d.guesses_old <- read_csv(here('data/merged_data_exp.csv'))
gameCounts <- d.guesses_old %>%
  filter(idx == 1) %>%
  group_by(gameID) %>%
  summarize(nRabbitsGame = sum(nRabbits, na.rm = TRUE),
            nSquirrelsGame = sum(nSquirrels, na.rm = TRUE)) 
d.guesses_old <- d.guesses_old %>%
  group_by(playerID) %>%
  filter(any(!is.na(treatmentName))) %>%
  ungroup() %>%
  mutate(data = "old")%>%
  filter(!is.na(guess)) %>%
  mutate(treatmentName = case_when(
    treatmentName == "experiment1-0.7" ~ 'unidirectional-0.7',
    treatmentName == "experiment1-0.3" ~ 'unidirectional-0.3',
    treatmentName =="experiment2-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="experiment2-interactive-0.7" ~ 'interactive-0.7',
    treatmentName =="experiment2-slider-0.3" ~ 'slider-0.3',
    treatmentName =="experiment2-slider-0.7" ~ 'slider-0.7'
  )) %>%
  left_join(gameCounts, by = "gameID") %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
  replace_na(list(nRabbits = 0, nSquirrels = 0, nRabbitsGame = 0, nSquirrelsGame = 0)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100), 
         nCrittersGame = nRabbitsGame + nSquirrelsGame,
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv)) %>%
  arrange(playerID, idx)%>%
  filter(nCrittersGame >= 10 & nCrittersGame <= 30)

gameCountsNew <- d.guesses %>%
  filter(idx == 1) %>%
  group_by(gameID, playerID, nRabbits, nSquirrels) %>%
  tally() %>% 
  group_by(gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels),)  
  

d.guesses <- d.guesses %>%
  mutate(treatmentName = case_when(
    treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
    treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
    treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
    treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
    treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
  )) %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
  left_join(gameCounts) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100), 
         nCrittersGame = nRabbitsGame+nSquirrelsGame,
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
  arrange(playerID, idx)

persistentnoClick <- c()  
for (i in 1:11) {
  idx_pair <- c(i+1, i+2)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)

persistentnoClick_old <- c()  
for (i in 1:6) {
  idx_pair <- c(i+1, i+2)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick_old <- c(persistentnoClick_old, filtered_players)
}
persistentnoClick_old <- unique(persistentnoClick_old)

persistentnoClick_combined <- unique(c(persistentnoClick_old, persistentnoClick))

d.guesses_combined <- bind_rows(d.guesses, d.guesses_old)
rm(d.guesses, d.guesses_old)
d.guesses <- d.guesses_combined
rm(d.guesses_combined)
```

## Implement exclusions

```{r}
confused <- d.guesses %>%
  filter(idx == 1) %>%
  filter(nCrittersGame == 0) %>%
  mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
  mutate(discrepency = abs(guess - mleEstimate)) %>% 
  filter(discrepency > 70) %>% 
  pull(playerID)

not_four_players <- d.guesses %>%
   group_by(gameID) %>%
       filter(n_distinct(playerID) != 4) %>%
  ungroup()


```

# filter from here

```{r}
d.guesses <- d.guesses %>%
  mutate(error = guess - mleEstimateGame)
```

```{r}
d.guesses %>%
  ggplot(aes(x = idx, y = abs(error), color = interaction(condition, data), linetype = condition == 'interactive')) +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none') +
    labs(y = 'average error', x = 'round #', color = 'Condition/Data') +
    theme(aspect.ratio = 1, legend.position = 'top') +
  facet_wrap(~treatment)

d.guesses %>%
  group_by(data) %>%
  summarise(count = n())

```

\

```{r}

# Filter and calculate percentages
df_filtered <- d.guesses %>%
 filter(!(playerID %in% confused)) %>%
  filter(!(idx == 1)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  filter(!(gameID %in% not_four_players)) %>%
  group_by(gameID, idx) %>%
  mutate(
    nCritters = nSquirrels + nRabbits,
    totalCritters = sum(nCritters),
    crittersPercentage = (nCritters / totalCritters) * 100,
    gameMLE = 
  ) %>%
  ungroup()

# Plot the critter percentages grouped together
ggplot(df_filtered, aes(x = "", y = crittersPercentage)) +
  geom_jitter(width = 0.2, alpha = 0.6, color = "blue") +
  labs(title = "Critter Percentages Distribution Across All Players",
       x = "",
       y = "Critter Percentage (%)") +
  theme_minimal()

```

```{r}
df_filtered <- df_filtered %>%
  mutate(mleError = abs(mleEstimateIndiv - mleEstimateGame))
  
```

```{r}
df_filtered <- df_filtered %>%
  mutate(
    absoluteError = abs(error)  # Calculate absolute error if not already present
  )

ggplot(df_filtered, aes(x = mleError, y = crittersPercentage, color = absoluteError)) +
  geom_point(size = 3, alpha = 0.7) +
  scale_color_gradient(low = "yellow", high = "red") +
  labs(
    title = "Critter Percentages vs. MLE Error by idx",
    x = "MLE Error",
    y = "Critter Percentage (%)",
    color = "Absolute Error"
  ) +
  facet_wrap(~ idx, scales = "free") +  # Facet by idx
  theme_minimal()

```

```{r}
ggplot(df_filtered, aes(x = nCrittersGame, y = crittersPercentage, color = absoluteError)) +
  geom_point(size = 3, alpha = 0.7) +
  scale_color_gradient(low = "yellow", high = "red") +
  labs(
    title = "Critter Percentages vs. MLE Error by idx",
    x = "nCrittersGame",
    y = "Critter Percentage (%)",
    color = "Absolute Error"
  ) +
  facet_wrap(~ idx, scales = "free") +  # Facet by idx
  theme_minimal()

```
