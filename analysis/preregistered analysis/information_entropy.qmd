---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)

theme_set(theme_few())
```

## Read in data

```{r}
ParseJSONColumn <- function(x) {
  str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>% 
    fromJSON(flatten = T) 
}

d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- d.guesses %>%
  group_by(playerID) %>%
  filter(any(!is.na(treatmentName))) %>%
  ungroup()

unique_rows <- d.guesses %>%
  filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
  distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)

d.guesses <- d.guesses %>%
  filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")))

d.guesses <- bind_rows(d.guesses, unique_rows)

```

## Implement exclusions

```{r}
confused <- d.guesses %>%
  filter(idx == 1) %>%
  mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
  mutate(discrepency = abs(guess - mleEstimate)) %>% 
  filter(discrepency > 70) %>% 
  pull(playerID)

persistentnoClick <- c()  
for (i in 1:11) {
  idx_pair <- c(i+1, i+2)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx %in% idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)


```

### Game-level distribution

```{r}
gameCounts <- d.guesses %>%
    filter(!(gameID %in% persistentnoClick)) %>%
  filter(idx == 1) %>%
  group_by(gameID, playerID, nRabbits, nSquirrels) %>%
  tally() %>% 
  group_by(gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) 
  
```

```{r}

d.guesses <- d.guesses %>%
  mutate(treatmentName = case_when(
    treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
    treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
    treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
    treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
    treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
  )) %>%
 
  left_join(gameCounts) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100), 
         nCrittersGame = nRabbitsGame+nSquirrelsGame,
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
  arrange(playerID, idx)


```

## Information Entropy

## Extremes of information within-game

```{r}
counts <- d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  group_by(gameID) %>%
  summarise(num_players = n_distinct(playerID)) 

group_counts <- table(counts$num_players)
print(group_counts)

# Calculate error and join with counts
d.guesses <- d.guesses %>%
   filter(!(playerID %in% confused)) %>%
   filter(!(playerID %in% persistentnoClick)) %>%
  mutate(error = abs(guess - mleEstimateGame)) %>%
    separate(treatmentName, into = c('condition', 'treatment'), sep = '-')  %>%
  left_join(counts, by = "gameID")


```

```{r}
d.guesses %>%
  group_by(mleEstimateIndiv, treatment, condition) %>%
  summarize(mleEstimate = mean(mleEstimateIndiv, na.rm = TRUE)) %>%
  ggplot(aes(x = mleEstimate)) +
  geom_histogram(binwidth = 0.5) +  # Adjust binwidth as needed
  labs(title = "Distribution of mleEstimate for each treatmentName") +
  theme_few() +
  facet_wrap(~ treatment, scales = "free") 
```

```{r}

d.guesses %>%
  filter(!(treatment == 0.7 & between(mleEstimateIndiv, 60, 80)), !(treatment == 0.3 & between(mleEstimateIndiv, 20, 40)) ) %>%
  group_by(mleEstimateIndiv, treatment, condition) %>%
  summarize(mleEstimate = mean(mleEstimateIndiv, na.rm = TRUE)) %>%
  ggplot(aes(x = mleEstimate)) +
  geom_histogram(binwidth = 0.5) +  # Adjust binwidth as needed
  labs(title = "Distribution of mleEstimate for each treatmentName") +
  theme_few() +
  facet_wrap(~ treatment, scales = "free")


```

```{r}
inequitable <- d.guesses %>%
  filter(!(treatment == 0.7 & between(mleEstimateIndiv, 65, 75)), !(treatment == 0.3 & between(mleEstimateIndiv, 25, 35)))%>%
    group_by(gameID) %>%
  summarise(num_players_inequity = n_distinct(playerID)) 

ineq_count <- table(inequitable$num_players_inequity)
print(ineq_count)

d.guesses <- d.guesses %>%
  left_join(inequitable, by = "gameID")
```
