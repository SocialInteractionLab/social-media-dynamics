---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)

theme_set(theme_few())
```

## Read in data

```{r}
ParseJSONColumn <- function(x) {
  str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>% 
    fromJSON(flatten = T) 
}

d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- d.guesses %>%
  filter(!is.na(treatmentName))

unique_rows <- d.guesses %>%
  filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
  distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)

d.guesses <- d.guesses %>%
  filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")))

d.guesses <- bind_rows(d.guesses, unique_rows)

```

## Implement exclusions

```{r}
confused <- d.guesses %>%
  filter(idx == 1) %>%
  mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
  mutate(discrepency = abs(guess - mleEstimate)) %>% 
  filter(discrepency > 70) %>% 
  pull(playerID)

persistentnoClick <- c()  
for (i in 1:11) {
  idx_pair <- c(i+1, i+2)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx %in% idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)

games_with_4_players <- d.guesses %>%
    filter(!(playerID %in% persistentnoClick)) %>%
  group_by(gameID) %>%
  summarise(unique_players = n_distinct(playerID)) %>% 
  filter(unique_players == 4)

d.guesses <- left_join(d.guesses, games_with_4_players, by = "gameID")
d.guesses <- d.guesses %>% filter(!is.na(unique_players))

games_with_4_players <- games_with_4_players %>%
      #filter(!(gameID %in% confused)) %>%
  left_join(d.guesses, by = "gameID") %>%
  select(gameID, treatmentName) %>%
  distinct()
treatment_count <- as.data.frame(table(games_with_4_players$treatmentName))
print(treatment_count)
```

### Game-level distribution

```{r}
gameCounts <- d.guesses %>%
    filter(!(gameID %in% persistentnoClick)) %>%
  filter(idx == 1) %>%
  group_by(gameID, playerID, nRabbits, nSquirrels) %>%
  tally() %>% 
  group_by(gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) 
  
```

```{r}

d.guesses <- d.guesses %>%
  mutate(treatmentName = case_when(
    treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
    treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
    treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
    treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
    treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
  )) %>%
  filter(!is.na(guess)) %>%
  left_join(gameCounts) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100), 
         nCrittersGame = nRabbitsGame+nSquirrelsGame,
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
  arrange(playerID, idx)

reducedPlayers <- d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  filter(nCrittersGame < 20)

d.guesses <- d.guesses %>% 
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) 
```

## Information Entropy

```{r}
print(nrow(reducedPlayers)) #games with incomplete information (less that 20 samples/less than 4 players
```

```{r}
print(nrow(d.guesses))

```

```{r}
reducedPlayers %>%  
  filter((gameID %in% games_with_4_players$gameID)) %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-')  %>%
  group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm= T)) %>%
  group_by(condition, idx) %>%
  tidyboot::tidyboot_mean(error, na.rm = T) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = condition, linetype = condition == 'interactive')) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none') +
    scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
    labs(y = 'average error', x = 'round #', color = '')  +
    theme(aspect.ratio = 1, legend.position = 'top')
```

```{r}
d.guesses %>%
  filter(!(gameID %in% reducedPlayers)) %>%
  group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm= T)) %>%
  group_by(condition, idx) %>%
  tidyboot::tidyboot_mean(error, na.rm = T) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = condition, linetype = condition == 'interactive')) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none') +
    scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
    labs(y = 'average error', x = 'round #', color = '')  +
    theme(aspect.ratio = 1, legend.position = 'top')
```

```{r}
d.guesses %>%
  group_by(gameID, treatment, condition) %>%
  summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
  ggplot(aes(x = mleEstimate)) +
    geom_histogram(binwidth = 10) +
    #xlim(0,100) +
    labs(title = "Distribution of mleEstimate for each treatmentName") +
  theme_few()
```

```{r}
d.guesses_entropy <- d.guesses %>%
   filter((treatment == 0.3 & mleEstimateIndiv == 30) | (treatment == 0.7 & mleEstimateIndiv == 70))

d.guesses_entropy %>%
  group_by(gameID, treatment, condition) %>%
  summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
  ggplot(aes(x = mleEstimate)) +
    geom_histogram(binwidth = 10) +
    #xlim(0,100) +
    labs(title = "Distribution of mleEstimate for each treatmentName") +
  theme_few()
```

```{r}

d.guesses_filtered <- d.guesses %>%
  filter(((treatment == 0.3 & between(mleEstimateIndiv, 25, 35)) |
           (treatment == 0.7 & between(mleEstimateIndiv, 65, 75))))


d.guesses %>%
  filter (gameID %in% d.guesses_entropy) %>%
  group_by(gameID, treatment, condition) %>%
  summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
  ggplot(aes(x = mleEstimate)) +
    geom_histogram(binwidth = 10) +
    #xlim(0,100) +
    labs(title = "Distribution of mleEstimate for each treatmentName") +
  theme_few()
```
