---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)

theme_set(theme_few())
```

## Read in data

```{r}
ParseJSONColumn <- function(x) {
  str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>% 
    fromJSON(flatten = T) 
}

d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- d.guesses %>%
  group_by(playerID) %>%
  filter(any(!is.na(treatmentName))) %>%
  ungroup()

unique_rows <- d.guesses %>%
  filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
  distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)

d.guesses <- d.guesses %>%
  filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")))

d.guesses <- bind_rows(d.guesses, unique_rows)

```

## Implement exclusions

```{r}
confused <- d.guesses %>%
  filter(idx == 1) %>%
  mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
  mutate(discrepency = abs(guess - mleEstimate)) %>% 
  filter(discrepency > 70) %>% 
  pull(playerID)

persistentnoClick <- c()  
for (i in 1:11) {
  idx_pair <- c(i+1, i+2)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx %in% idx_pair]))) %>%
      filter(idx != 1) %>%  # Filter out idx == 1
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)

games_with_4_players <- d.guesses %>%
    filter(!(playerID %in% persistentnoClick)) %>%
  group_by(gameID) %>%
  summarise(unique_players = n_distinct(playerID)) %>% 
  filter(unique_players == 4)

d.guesses <- left_join(d.guesses, games_with_4_players, by = "gameID")
d.guesses <- d.guesses %>% filter(!is.na(unique_players))

games_with_4_players <- games_with_4_players %>%
      #filter(!(gameID %in% confused)) %>%
  left_join(d.guesses, by = "gameID") %>%
  select(gameID, treatmentName) %>%
  distinct()
treatment_count <- as.data.frame(table(games_with_4_players$treatmentName))
print(treatment_count)
```

### Game-level distribution

```{r}
gameCounts <- d.guesses %>%
    filter(!(gameID %in% persistentnoClick)) %>%
  filter(idx == 1) %>%
  group_by(gameID, playerID, nRabbits, nSquirrels) %>%
  tally() %>% 
  group_by(gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) 
  
```

```{r}

d.guesses <- d.guesses %>%
  mutate(treatmentName = case_when(
    treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
    treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
    treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
    treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
    treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
  )) %>%
  left_join(gameCounts) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100), 
         nCrittersGame = nRabbitsGame+nSquirrelsGame,
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
  arrange(playerID, idx)

reducedPlayers <- d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  filter(nCrittersGame < 20)

d.guesses <- d.guesses %>% 
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) 
```

```{r}
playercount <- d.guesses %>%
   filter(idx == 1) %>%
   distinct(playerID, .keep_all = TRUE) %>% 
  group_by(treatmentName) %>% 
  tally()

gamecount <- d.guesses %>%
   filter(idx == 1) %>%
   distinct(gameID, .keep_all = TRUE) %>% 
  group_by(treatmentName) %>% 
  tally()
```

## defaulting to 50%

```{r}
counts <- list()
for (i in 1:max(d.guesses$idx)) {
  filtered_data <- d.guesses %>%
    filter(guess == 50, idx == i) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    tally()
  counts[[i]] <- filtered_data$n
  
}

plot(1:max(d.guesses$idx), unlist(counts), type = "o", xlab = "idx", ylab = "Count of guess 50", ylim = c(0, 130))

axis(2, at = seq(0, 130, by = 10)) 
```

```{r}
fifty2 <- d.guesses %>%
  filter(guess == 50) %>%
  distinct(playerID, .keep_all = TRUE) %>%
  tally()
```

```{r}
fifty3 <-d.guesses %>%
  filter(guess == 50) 

max_guesses_per_treatment <- d.guesses %>%
  group_by(playerID, treatmentName) %>%
  summarise(count = n()) %>%
  group_by(treatmentName) %>%
  summarise(max_guesses = max(count))

# View the result
print(max_guesses_per_treatment)

```

```{r}
fifty3 <- d.guesses %>%
  filter(guess == 50)

# Count the number of times each playerID guessed 50 and include treatmentName
fifty3_count <- fifty3 %>%
  group_by(playerID, treatmentName, mleEstimateIndiv) %>%
  summarise(count = n()) %>%
  filter(count > 2)

# Split fifty3_count into two dataframes based on mleEstimateIndiv
fifty3_count_mle_50 <- fifty3_count %>%
  filter(mleEstimateIndiv == 50)

fifty3_count_mle_not_50 <- fifty3_count %>%
  filter(mleEstimateIndiv != 50)

# View the results
print(fifty3_count_mle_50)
print(fifty3_count_mle_not_50)
```

## Confidence

```{r}
d.guesses %>%
  group_by(treatmentName) %>%
  summarize(
    num_rows = n(), 
    num_values = sum(!is.na(confidence)) 
  )
```

```{r}
ggplot(d.guesses, aes(x = idx, y = confidence)) + 
  geom_point() +
  facet_wrap(~ treatmentName)

```

```{r}
d.guesses <- d.guesses %>%
  mutate(error = abs(guess - mleEstimateGame))

ggplot(d.guesses, aes(x = error, y = confidence)) + 
  geom_point() +
  facet_wrap(~ treatmentName)

```

```{r}

# Data manipulation
d.guesses %>%
  group_by(treatmentName, idx) %>%
  summarize(empirical_stat = mean(confidence), na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName, linetype = treatmentName == 'interactive')) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = 0, linetype = 'dotted') +
  theme_few() +  # Using theme_few for a similar look
  scale_color_brewer(palette = 'Accent') +  # Using Accent palette for similar colors
  guides(linetype = 'none') +
  scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
  labs(y = 'Confidence', x = 'Index', color = 'Treatment Name') +  # Adjusting labels
  theme(aspect.ratio = 1, legend.position = 'top')

```

```{r}

model <- lmer(error ~ confidence + (1 | gameID/playerID), data = d.guesses)


summary(model)

```

```{r}
d.guesses <- d.guesses %>%    
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-') 

```

```{r}
summary_data <- d.guesses %>%
  group_by(treatment, condition, confidence, gameID, mleEstimateGame) %>%
  summarize(gameError = mean(guess - mleEstimateGame, na.rm = TRUE)) %>%
  group_by(condition, confidence, treatment) %>%
  tidyboot::tidyboot_mean(gameError, na.rm = TRUE)

ggplot(summary_data, aes(x = confidence, y = abs(empirical_stat), color = condition, group = interaction(condition, treatment))) +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 1), se = FALSE) +
  geom_hline(yintercept = 0, linetype = 'dotted') +
  theme_few() +
  scale_color_colorblind() +
  labs(y = 'error', x = 'confidence')
```

```{r}
summary_data_relative <- d.guesses %>%
  filter(!is.nan(confidence)) %>%
  mutate(confidence = ifelse(confidence == 0, 0.01, confidence)) %>%
  group_by(treatment, condition, confidence, gameID, idx, mleEstimateGame) %>%
  summarize(gameError = mean(guess - mleEstimateGame, na.rm = TRUE)) %>%
  mutate(gameError = ifelse(gameError == 0, 0.01, gameError)) %>%
  mutate(relativeC_Error = (gameError - confidence) / confidence)

ggplot(summary_data_relative, aes(x = idx, y = relativeC_Error, color = interaction(condition, treatment),)) + 
  geom_point()



summary_data_relative <- summary_data_relative %>%
  group_by(condition, idx, treatment) %>%
  summarize(relativeC_Error_mean = mean(relativeC_Error, na.rm = TRUE)) %>%
  mutate(empirical_stat = relativeC_Error_mean)

summary_data_relative <- summary_data_relative %>%
  tidyboot::tidyboot_mean(empirical_stat)

ggplot(summary_data_relative, aes(x = idx, y = empirical_stat, color = condition, )) +
  geom_smooth() +
  geom_hline(yintercept = 0, linetype = 'dotted') +
  theme_few() +
  scale_color_colorblind() +
  labs(y = 'error relative to confidence', x = 'time')


```

## Everyone guessing own

```{r}
unique(d.guesses$treatment)
interactives <- subset(d.guesses, condition %in% c('interactive'))
sliders <- subset(d.guesses, condition %in% c('slider'))
unidirectionals <- subset(d.guesses, condition %in% c('unidirectional'))
```

```{r}
truePs <- d.guesses %>% 
  filter(idx == 1) %>%
  group_by(treatment, condition, gameID, nSquirrelsGame, nRabbitsGame) %>%
  tally() %>%
  group_by(treatment, condition) %>%
  summarize(p = mean(nRabbitsGame / (nSquirrelsGame + nRabbitsGame)))


unidirectionals %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  filter(!(playerID %in% c('01HVT30Q4177KSV80Z257DNQT4', '01HW69X7HGC8TN6KTWFJXTCDZ2', '01HW682S71XW6S6FZATND3NNBP'))) %>%
  group_by(treatment, condition, idx, gameID) %>%
  summarize(
    guess = mean(guess),
    mleEstimateIndiv = mean(mleEstimateIndiv)
  ) %>%
  pivot_longer(cols = c(guess, mleEstimateIndiv), names_to = "metric", values_to = "value") %>%
    filter(idx != 1) %>%  # Filter out idx == 1
  group_by(treatment, condition, idx, metric) %>%
  tidyboot::tidyboot_mean(value) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = interaction(treatment, condition), linetype = metric)) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = c(30, 70), linetype = 'dotted') +
  geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill = treatment), color = NA, alpha = 0.1) +
  theme_few() +
  labs(y = 'average estimate', x = 'round #', color = '', linetype = 'Metric') +
  scale_color_colorblind() +
  scale_fill_colorblind(guide = 'none') +
  scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
  theme(aspect.ratio = 1, legend.position = 'top')

```

```{r}
sliders %>%
  group_by(treatment, condition, idx, gameID) %>%
  summarize(
    guess = mean(guess),
    mleEstimateIndiv = mean(mleEstimateIndiv)
  ) %>%
  pivot_longer(cols = c(guess, mleEstimateIndiv), names_to = "metric", values_to = "value") %>%
  filter(idx != 1) %>%  # Filter out idx == 1
  group_by(treatment, condition, idx, metric) %>%
  tidyboot::tidyboot_mean(value) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = interaction(treatment, condition), linetype = metric)) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = c(30, 70), linetype = 'dotted') +
  geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill = treatment), color = NA, alpha = 0.1) +
  theme_few() +
  labs(y = 'average estimate', x = 'round #', color = '', linetype = 'Metric') +
  scale_color_colorblind() +
  scale_fill_colorblind(guide = 'none') +
  scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
  theme(aspect.ratio = 1, legend.position = 'top')


```

```{r}

ggplot(sliders, aes(x = idx, y = mleEstimateIndiv)) + 
  geom_point() +
  facet_wrap(~ treatment)

wwhat <- sliders %>%
  group_by(playerID) %>%
  summarize(count = sum(!is.na(mleEstimateIndiv)))
```

```{r}
interactives %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  group_by(treatment, condition, idx, gameID) %>%
  summarize(
    guess = mean(guess),
    mleEstimateIndiv = mean(mleEstimateIndiv)
  ) %>%
  pivot_longer(cols = c(guess, mleEstimateIndiv), names_to = "metric", values_to = "value") %>%
    filter(idx != 1) %>%  # Filter out idx == 1

  group_by(treatment, condition, idx, metric) %>%
  tidyboot::tidyboot_mean(value) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = interaction(treatment, condition), linetype = metric)) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = c(30, 70), linetype = 'dotted') +
   theme_few() +
  labs(y = 'average estimate', x = 'round #', color = '', linetype = 'Metric') +
  scale_color_colorblind() +
  scale_fill_colorblind(guide = 'none') +
  scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
  theme(aspect.ratio = 1, legend.position = 'top')
```

## 
