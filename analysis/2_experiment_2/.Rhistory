persistentnoClick <- unique(persistentnoClick)
games_with_4_players <- d.guesses %>%
filter(!(playerID %in% persistentnoClick)) %>%
group_by(gameID) %>%
summarise(unique_players = n_distinct(playerID)) %>%
filter(unique_players == 4)
NCritterCount <- d.guesses %>%  distinct(playerID, gameID, .keep_all = TRUE) %>%group_by(gameID) %>%
summarise(
nRabbitsGame = sum(nRabbits, na.rm = TRUE),
nSquirrelsGame = sum(nSquirrels, na.rm = TRUE),
nCrittersGame = nRabbitsGame+nSquirrelsGame
)
d.guesses <-left_join(d.guesses, NCritterCount, by = "gameID")
d.guesses <- semi_join(d.guesses, games_with_4_players, by = "gameID") %>% mutate (error = abs(mleEstimateGame-guess))
d.allmsg_exp1 <- merge(
d.allmsg_exp1,
d.guesses,
by.x     = c("gameID", "sender.id", "round"),
by.y     = c("gameID", "playerID", "idx"),
all      = TRUE,
suffixes = c("", ".g")
) %>%
filter(!is.na(coding)) %>%
unique() %>%
select(-ends_with(".g")) %>%
filter(gameID != "01HW6JMDRBMZ4QAQ88VVTFKBJ0")
d.allmsg_exp1 <- d.allmsg_exp1 %>%
rename(mleGame = mleEstimateGame)%>%
rename(mleEstimate = mleEstimateIndiv) %>%
select(-roundID, -time) %>%
separate(treatmentName.x, into = c("prefix", "treatment", "direction"), sep = "-") %>%
mutate(across(c(treatment, direction), trimws)) %>%
select(-prefix, -treatmentName.y, -mleEstimate, -mleGame, -nRabbitsGame, -nSquirrelsGame)
d.allmsg<-d.allmsg%>%
select(-sender.name, -designatedGame, -mleGame, -entropy_bin, -representation, -representation_bin, -nCritters, -nCrittersGame_bin, -mleEstimate, -mleGame, -nRabbitsGame, -nSquirrelsGame)
common_cols <- intersect(names(d.allmsg), names(d.allmsg_exp1))
unique_to_df1 <- setdiff(names(d.allmsg), names(d.allmsg_exp1))
unique_to_df2 <- setdiff(names(d.allmsg_exp1), names(d.allmsg))
#print(common_cols)
print(unique_to_df1)
print(unique_to_df2)
combined_df <- bind_rows(d.allmsg, d.allmsg_exp1)
combined_df_binning <- combined_df%>%
select(sender.id, gameID, nRabbits, nSquirrels, entropy)%>%
unique()%>%
mutate(nCritters = nSquirrels + nRabbits,
mleEstimate = nRabbits / (nRabbits + nSquirrels),
)%>%
group_by(gameID) %>%
filter(n_distinct(sender.id) == 4) %>%
mutate(
nRabbitsGame = sum(nRabbits),
nSquirrelsGame = sum(nSquirrels),
mleGame = nRabbitsGame / (nRabbitsGame + nSquirrelsGame),
totalCritters = sum(nCritters),
prob = nCritters / totalCritters,
entropy_new = -sum(ifelse(prob > 0, prob * log(prob), 0)),
representation = mean(abs(mleEstimate - mleGame))
) %>%
ungroup() %>%
mutate(
entropy_bin = cut((entropy_new), breaks = seq(0, 2, .27), right = TRUE, include.lowest = TRUE, dig.lab = 2),
representation_bin = cut((representation), breaks = seq(0, 1, .12), right = TRUE, include.lowest = TRUE, dig.lab = 2),
nCrittersGame_bin = cut(totalCritters, breaks = seq(15, 100, by = 5), right = TRUE, include.lowest = TRUE))%>%
select( -nRabbits, -nSquirrels, -entropy)
d.allmsg <- d.allmsg %>% left_join(combined_df_binning, by = c("gameID", "sender.id")) %>%
group_by(gameID) %>%
filter(n_distinct(sender.id) == 4) %>%
ungroup() %>%  mutate(error = if_else(direction == "RS", abs((100-guess) - (mleGame*100)), abs(guess - (mleGame*100))))
d.allmsg_exp1 <- d.allmsg_exp1 %>% left_join(combined_df_binning, by = c("gameID", "sender.id")) %>%
group_by(gameID) %>%
filter(n_distinct(sender.id) == 4) %>%
ungroup()%>% mutate (error = abs(as.numeric(mleGame*100) - guess))
combined_df <- combined_df %>% left_join(combined_df_binning, by = c("gameID", "sender.id"))%>%
group_by(gameID) %>%
filter(n_distinct(sender.id) == 4) %>%
ungroup()%>%  mutate(error = if_else(direction == "RS", abs((100-guess) - (mleGame*100)), abs(guess - (mleGame*100))))  #%>% filter(!guess == 50)
#d.allmsg_exp1 <- d.allmsg_exp1%>%
# filter(treatment != "unidirectional")
error_change_view <- d.allmsg_exp1%>%
group_by(sender.id) %>%
arrange(round, .by_group = TRUE) %>%
summarise(
gameID = gameID,
merged_code = paste0(received_code, collapse = ""),
error_change = last(error)-first(error),
.groups = "drop"
) %>%
mutate(
p_count = stringr::str_count(merged_code, "p"),
n_count = stringr::str_count(merged_code, "n"),
s_count = stringr::str_count(merged_code, "s"),
b_count = stringr::str_count(merged_code, "b")
)
new_df_long <- error_change_view %>%
pivot_longer(cols = ends_with("_count"), names_to = "code_type", values_to = "count")
ggplot(new_df_long, aes(x = count, y = error_change, color = code_type)) +
stat_summary(fun = mean, geom = "point")+
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
glm_modps <- glm(
error_change ~ p_count+s_count,
data = error_change_view,
family = gaussian()
)
summary(glm_modps)
glm_modnb <- glm(
error_change ~ n_count+b_count,
data = error_change_view,
family = gaussian()
)
summary(glm_modnb)
modbn <- lmerTest::lmer(
error_change ~ b_count + n_count + (1 | gameID),
data = error_change_view,
REML = FALSE
)
summary(modbn)
modps <- lmerTest::lmer(
error_change ~ p_count + s_count + (1 | gameID),
data = error_change_view,
REML = FALSE
)
summary(modps)
summary_data_s <- d.allmsg %>%
filter(!received_code == 'o') %>%
group_by(gameID) %>%
summarize(
avg_error = mean(error[round == 8], na.rm = TRUE),
p_count = sum(str_count(received_code, "p")),
s_count = sum(str_count(received_code, "s")),
b_count = sum(str_count(received_code, "b")),
n_count = sum(str_count(received_code, "n")),
)
summary_data_long_s <- summary_data_s %>%
select(gameID, avg_error, p_count, s_count) %>%
pivot_longer(cols = c(p_count, s_count),
names_to = "message_type", values_to = "count")
summary_data_long_s$decile <- cut(summary_data_long_s$avg_error,
breaks = quantile(summary_data_long_s$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE),
include.lowest = TRUE, labels = FALSE)
summary_data_long_proportions <- summary_data_long_s %>%
# filter(exitSurvey == 'no') %>%
group_by(decile) %>%
mutate(total_count = sum(count)) %>%
group_by(decile, message_type) %>%
summarize(proportion = sum(count) / mean(total_count)
)
# Plotting
summary_data_long_proportions %>%
mutate(message_type = fct_relevel(message_type, "p_count", 's_count')) %>%
ggplot(aes(x = factor(decile),  y = proportion, fill = message_type)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_brewer(palette = 'Accent',
labels = c("p_count" = "personal", "s_count" = "social")) +
labs(title = "",
x = "error (binned)",
y = "proportion",
fill = "message type") +
theme(aspect.ratio = 1, legend.position = "top") +
guides(fill = guide_legend(nrow = 2))
summary_data_long_s <- summary_data_long_s %>%
mutate(message_type = fct_relevel(message_type,
'p_count', 's_count')) %>%
group_by(gameID) %>%
mutate(totalCount = sum(count))
m <- glm(count / totalCount ~ message_type * decile,
weights=totalCount,
data = summary_data_long_s,
family = "binomial")
summary(m)
summary_data_b <- d.allmsg %>%
filter(!received_code == 'o') %>%
group_by(gameID) %>%
summarize(
avg_error = mean(error[round == 8], na.rm = TRUE), #
n_count = sum(str_count(received_code, "n")),
b_count = sum(str_count(received_code, "b")),
)
summary_data_long_b <- summary_data_b %>%
select(gameID, avg_error, b_count, n_count) %>%
pivot_longer(cols = c(b_count, n_count),
names_to = "message_type", values_to = "count")
summary_data_long_b$decile <- cut(summary_data_long_b$avg_error,
breaks = quantile(summary_data_long_b$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE),
include.lowest = TRUE, labels = FALSE)
summary_data_long_proportions <- summary_data_long_b %>%
# filter(exitSurvey == 'no') %>%
group_by(decile) %>%
mutate(total_count = sum(count)) %>%
group_by(decile, message_type) %>%
summarize(proportion = sum(count) / mean(total_count)
)
# Plotting
summary_data_long_proportions %>%
mutate(message_type = fct_relevel(message_type, "b_count", 'n_count')) %>%
ggplot(aes(x = factor(decile),  y = proportion, fill = message_type)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_brewer(palette = 'Accent',
labels = c("b_count" = "belief", "n_count" = "number")) +
labs(title = "",
x = "error (binned)",
y = "proportion",
fill = "message type") +
theme(aspect.ratio = 1, legend.position = "top") +
guides(fill = guide_legend(nrow = 2))
summary_data_3 <- d.allmsg %>%
filter(!received_code == 'o') %>%
group_by(gameID) %>%
summarize(
avg_error = mean(error[round == 8], na.rm = TRUE), #
pn_count = sum(str_count(received_code, "pn")),
sn_count = sum(str_count(received_code, "sn")),
pb_count = sum(str_count(received_code, "pb")),
sb_count = sum(str_count(received_code, "sb"))
)
ggplot(summary_data_3, aes(x = avg_error, y =sb_count)) +
geom_point() +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
) +geom_smooth(method="lm")
summary_data_3 %>% mutate(decile = ntile(avg_error, 5)) %>%
lm(log(avg_error) ~ sn_count+sb_count+pb_count+pn_count,
data = .) %>% summary()
####
summary_data_3 <- d.allmsg %>%
filter(!received_code == 'o') %>%
group_by(gameID) %>%
summarize(
avg_error = mean(error[round == 8], na.rm = TRUE), #
pn_count = sum(str_count(received_code, "pn")),
sn_count = sum(str_count(received_code, "sn")),
pb_count = sum(str_count(received_code, "pb")),
sb_count = sum(str_count(received_code, "sb"))
)
summary_data_long_3 <- summary_data_3 %>%
select(gameID, avg_error, pn_count, sn_count, pb_count, sb_count) %>%
pivot_longer(cols = c(pn_count, sn_count, pb_count, sb_count),
names_to = "message_type", values_to = "count")
summary_data_long_3$decile <- cut(summary_data_long_3$avg_error,
breaks = quantile(summary_data_long_3$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE),
include.lowest = TRUE, labels = FALSE)
summary_data_long_proportions <- summary_data_long_3 %>%
# filter(exitSurvey == 'no') %>%
group_by(decile) %>%
mutate(total_count = sum(count)) %>%
group_by(decile, message_type) %>%
summarize(proportion = sum(count) / mean(total_count)
)
# Plotting
summary_data_long_proportions %>%
mutate(message_type = fct_relevel(message_type, "pn_count", 'pb_count',  'sn_count', 'sb_count')) %>%
ggplot(aes(x = factor(decile),  y = proportion, fill = message_type)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_brewer(palette = 'Accent',
labels = c("pn_count" = "personal number", "sn_count" = "social number",
"pb_count" = "personal belief", "sb_count" = "social belief")) +
labs(title = "",
x = "error (binned)",
y = "proportion",
fill = "message type") +
theme(aspect.ratio = 1, legend.position = "top") +
guides(fill = guide_legend(nrow = 4))
summary_data_long_3 <- summary_data_long_3 %>%
mutate(message_type = fct_relevel(message_type,
'pn_count', 'sb_count','pb_count', 'sn_count')) %>%
group_by(gameID) %>%
mutate(totalCount = sum(count))
m <- glm(count / totalCount ~ message_type * decile,
weights=totalCount,
data = summary_data_long_3,
family = "binomial")
summary(m)
dsummary_data_deciles_3 <- summary_data_long_3 %>%
ungroup()%>%
select(-gameID, -avg_error)%>%
group_by(decile, message_type) %>%
summarize(count = sum(count), .groups = "drop") %>%  pivot_wider(names_from = message_type, values_from = count)%>% mutate(d = factor(decile))
contrasts(dsummary_data_deciles_3$d) <- contr.sum(length(levels(dsummary_data_deciles_3$d)))
glm_pn <- glm(cbind(pn_count, sn_count +sb_count + pb_count) ~ d,
family = binomial, data = dsummary_data_deciles_3)
summary(glm_pn)
glm_pb <- glm(cbind(pb_count, sn_count +sb_count + pn_count) ~ d,
family = binomial, data = dsummary_data_deciles_3)
#summary(glm_pb)
glm_sn <- glm(cbind(sn_count, pn_count +sb_count + pb_count) ~ d,
family = binomial, data = dsummary_data_deciles_3)
#summary(glm_sn)
glm_sb <- glm(cbind(sb_count, sn_count +pn_count + pb_count) ~ d,
family = binomial, data = dsummary_data_deciles_3)
summary(glm_sb)
summary_data_s2 <- d.allmsg_exp1 %>%
filter(!received_code == 'o') %>%
group_by(gameID) %>%
summarize(
avg_error = mean(error[round == 8], na.rm = TRUE),
p_count = sum(str_count(received_code, "p")),
s_count = sum(str_count(received_code, "s")),
b_count = sum(str_count(received_code, "b")),
n_count = sum(str_count(received_code, "n")),
)
summary_data_long_s <- summary_data_s2 %>%
select(gameID, avg_error, p_count, s_count) %>%
pivot_longer(cols = c(p_count, s_count),
names_to = "message_type", values_to = "count")
summary_data_long_s$decile <- cut(summary_data_long_s$avg_error,
breaks = quantile(summary_data_long_s$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE),
include.lowest = TRUE, labels = FALSE)
summary_data_long_proportions <- summary_data_long_s %>%
# filter(exitSurvey == 'no') %>%
group_by(decile) %>%
mutate(total_count = sum(count)) %>%
group_by(decile, message_type) %>%
summarize(proportion = sum(count) / mean(total_count)
)
# Plotting
summary_data_long_proportions %>%
mutate(message_type = fct_relevel(message_type, "p_count", 's_count')) %>%
ggplot(aes(x = factor(decile),  y = proportion, fill = message_type)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_brewer(palette = 'Accent',
labels = c("p_count" = "personal", "s_count" = "social")) +
labs(title = "",
x = "error (binned)",
y = "proportion",
fill = "message type") +
theme(aspect.ratio = 1, legend.position = "top") +
guides(fill = guide_legend(nrow = 2))
summary_data_b2 <- d.allmsg_exp1 %>%
filter(!received_code == 'o') %>%
group_by(gameID) %>%
summarize(
avg_error = mean(error[round == 8], na.rm = TRUE), #
n_count = sum(str_count(received_code, "n")),
b_count = sum(str_count(received_code, "b")),
)
summary_data_long_b <- summary_data_b2 %>%
select(gameID, avg_error, b_count, n_count) %>%
pivot_longer(cols = c(b_count, n_count),
names_to = "message_type", values_to = "count")
summary_data_long_b$decile <- cut(summary_data_long_b$avg_error,
breaks = quantile(summary_data_long_b$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE),
include.lowest = TRUE, labels = FALSE)
summary_data_long_proportions <- summary_data_long_b %>%
# filter(exitSurvey == 'no') %>%
group_by(decile) %>%
mutate(total_count = sum(count)) %>%
group_by(decile, message_type) %>%
summarize(proportion = sum(count) / mean(total_count)
)
# Plotting
summary_data_long_proportions %>%
mutate(message_type = fct_relevel(message_type, "b_count", 'n_count')) %>%
ggplot(aes(x = factor(decile),  y = proportion, fill = message_type)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_brewer(palette = 'Accent',
labels = c("b_count" = "belief", "n_count" = "number")) +
labs(title = "",
x = "error (binned)",
y = "proportion",
fill = "message type") +
theme(aspect.ratio = 1, legend.position = "top") +
guides(fill = guide_legend(nrow = 2))
summary_data_2 <- d.allmsg_exp1 %>%
filter(!received_code == 'o') %>%
filter(!treatment== 'slider') %>%
group_by(gameID) %>%
summarize(
avg_error = mean(error[round == 12], na.rm = TRUE),#
pn_count = sum(str_count(received_code, "pn")),
sn_count = sum(str_count(received_code, "sn")),
pb_count = sum(str_count(received_code, "pb")),
sb_count = sum(str_count(received_code, "sb"))
) %>% mutate(sb_present = mean(sb_count > 0))
ggplot(summary_data_2, aes(x = avg_error, y =sb_count)) +
geom_point() +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
) +geom_smooth(method="lm")
summary_data_2 %>%
mutate(log_error = log(avg_error + 1e-6)) %>%
lm(log_error ~ sn_count + sb_count + pb_count + pn_count, data = .) %>%
summary()
summary_data_2 <- d.allmsg_exp1 %>%
filter(!received_code == 'o') %>%
filter(!treatment== 'slider') %>%
group_by(gameID) %>%
summarize(
# exitSurvey = if_else(any(str_detect(exitSurvey, 'yes')), "yes", "no"),
avg_error = mean(error , na.rm = TRUE),#
pn_count = sum(str_count(received_code, "pn")),
sn_count = sum(str_count(received_code, "sn")),
pb_count = sum(str_count(received_code, "pb")),
sb_count = sum(str_count(received_code, "sb"))
) %>% mutate(sb_present = mean(sb_count > 0))
summary_data_long_2 <- summary_data_2 %>%
select(gameID, avg_error, pn_count, sn_count, pb_count, sb_count) %>%
pivot_longer(cols = c(pn_count, sn_count, pb_count, sb_count),
names_to = "message_type", values_to = "count")
unique_quantiles <- unique(quantile(summary_data_long_2$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE))
print(unique_quantiles)
#summary_data_long$decile <- cut(summary_data_long$avg_error,
#                                breaks = quantile(summary_data_long$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE),
#                               include.lowest = TRUE, labels = FALSE)
summary_data_long_2 <- summary_data_long_2 %>%
mutate(decile = ntile(avg_error, 5)) %>% filter(!is.na(decile))
summary_data_long_proportions <- summary_data_long_2 %>%
# filter(exitSurvey == 'no') %>%
group_by(decile) %>%
mutate(total_count = sum(count)) %>%
group_by(decile, message_type) %>%
summarize(proportion = sum(count) / mean(total_count)
)
# Plotting
summary_data_long_proportions %>%
mutate(message_type = fct_relevel(message_type, "pn_count", 'pb_count',  'sn_count', 'sb_count')) %>%
ggplot(aes(x = factor(decile),  y = proportion, fill = message_type)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_brewer(palette = 'Accent',
labels = c("pn_count" = "personal number", "sn_count" = "social number",
"pb_count" = "personal belief", "sb_count" = "social belief")) +
labs(title = "",
x = "error (binned)",
y = "proportion",
fill = "message type") +
theme(aspect.ratio = 1, legend.position = "left") +
guides(fill = guide_legend(nrow = 4))
summary_data_long_2 <- summary_data_long_2 %>%
mutate(message_type = fct_relevel(message_type,
'pn_count', 'sb_count','pb_count', 'sn_count')) %>%
group_by(gameID) %>%
mutate(totalCount = sum(count))
dsummary_data_deciles_2 <- summary_data_long_2 %>%
ungroup()%>%
select(-gameID, -avg_error)%>%
group_by(decile, message_type) %>%
summarize(count = sum(count), .groups = "drop") %>%  pivot_wider(names_from = message_type, values_from = count)%>% mutate(d = factor(decile))
contrasts(dsummary_data_deciles_2$d) <- contr.sum(length(levels(dsummary_data_deciles_2$d)))
glm_pn <- glm(cbind(pn_count, sn_count +sb_count + pb_count) ~ d,
family = binomial, data = dsummary_data_deciles_2)
summary(glm_pn)
glm_pb <- glm(cbind(pb_count, sn_count +sb_count + pn_count) ~ d,
family = binomial, data = dsummary_data_deciles_2)
summary(glm_pb)
glm_sn <- glm(cbind(sn_count, pn_count +sb_count + pb_count) ~ d,
family = binomial, data = dsummary_data_deciles_2)
summary(glm_sn)
glm_sb <- glm(cbind(sb_count, sn_count +pn_count + pb_count) ~ d,
family = binomial, data = dsummary_data_deciles_2)
summary(glm_sb)
summary_data_3  %>%
lm(log(avg_error) ~ sn_count+sb_count+pb_count+pn_count,
data = .) %>% summary()
summary_data_s  %>%
lm(log(avg_error) ~ s_count+p_count,
data = .) %>% summary()
summary_data_b  %>%
lm(log(avg_error) ~ n_count+b_count,
data = .) %>% summary()
summary_data_2  %>%  mutate(log_error = log(avg_error + 1e-6)) %>%
lm(log_error ~ sn_count+sb_count+pb_count+pn_count,
data = .) %>% summary()
summary_data_s2  %>%
lm(log(avg_error) ~ s_count+p_count,
data = .) %>% summary()
summary_data_b2  %>%
lm(log(avg_error) ~ n_count+b_count,
data = .) %>% summary()
summary_data_deciles <- rbind(dsummary_data_deciles_2,dsummary_data_deciles_3)%>%
select(-d)%>%
group_by(decile) %>%
summarise(across(everything(), ~ sum(.x, na.rm = TRUE)), .groups = "drop")%>% mutate(d = factor(decile))
contrasts(summary_data_deciles$d) <- contr.sum(length(levels(summary_data_deciles$d)))
glm_pn <- glm(cbind(pn_count, sn_count +sb_count + pb_count) ~ d,
family = binomial, data = summary_data_deciles)
summary(glm_pn)
glm_pb <- glm(cbind(pb_count, sn_count +sb_count + pn_count) ~ d,
family = binomial, data = summary_data_deciles)
summary(glm_pb)
glm_sn <- glm(cbind(sn_count, pn_count +sb_count + pb_count) ~ d,
family = binomial, data = summary_data_deciles)
summary(glm_sn)
glm_sb <- glm(cbind(sb_count, sn_count +pn_count + pb_count) ~ d,
family = binomial, data = summary_data_deciles)
summary(glm_sb)
summary_data_3_2 <- bind_rows(summary_data_3, summary_data_2) %>%
select(-sb_present)
summary_data_s3_2 <- bind_rows(summary_data_s, summary_data_s2)
summary_data_3_2  %>%
lm(log(avg_error + 1e-6) ~ sb_count+pn_count+sn_count+pb_count,
data = .) %>% summary()
summary_data_s2  %>%
lm(log(avg_error) ~ s_count+p_count,
data = .) %>% summary()
summary(glm(avg_error ~ s_count+p_count, data = summary_data_s3_2))
summary(glm(avg_error ~ sb_count+pn_count+sn_count+pb_count, data = summary_data_3_2))
summary(glm(avg_error ~ s_count*p_count+b_count*n_count, data = summary_data_s3_2))
summary(glm(avg_error ~ s_count*p_count*b_count*n_count, data = summary_data_s3_2))
summary(glm(avg_error ~ s_count+p_count+b_count+n_count, data = summary_data_s3_2))
summary_data_3_2  %>%
lm(log(avg_error + 1e-6) ~ sb_count+pn_count+sn_count+pb_count,
data = .) %>% summary()
summary_data_s2  %>%
lm(log(avg_error) ~ s_count+p_count,
data = .) %>% summary()
summary(glm(avg_error ~ s_count+p_count, data = summary_data_s3_2))
summary(glm(avg_error ~ sb_count+pn_count+sn_count+pb_count, data = summary_data_3_2))
summary(glm(avg_error ~ s_count*p_count+b_count*n_count, data = summary_data_s3_2))
summary(glm(avg_error ~ s_count*p_count*b_count*n_count, data = summary_data_s3_2))
summary(glm(avg_error ~ scale(s_count)+scale(p_count)+scale(b_count)+scale(n_count), data = summary_data_s3_2))
