persistentnoClick <- distinct(persistentnoClick)
gameIDs_to_remove <- persistentnoClick %>%
count(gameID) %>%
filter(n >= 2) %>%
pull(gameID)
decode <- decode %>%
mutate(across(c(nCrittersGame, representation, designatedGame), as.character))
d.allgameplayers <- d.allgameplayers %>%
mutate(across(c(nCrittersGame, representation, designatedGame, treatmentName.x), as.character))%>%
filter(!(gameID %in% gameIDs_to_remove))
d.count.chat <- d.allgameplayers %>%
filter(str_ends(treatmentName.x, "interactive"))
d.count.slider <- d.allgameplayers %>%
filter(str_ends(treatmentName.x, "slider"))
# Count the occurrences of each designatedGame in decode
decode_counts <- decode %>%
count(designatedGame, name = "decode_count")
# Count the occurrences of each designatedGame in d.count.chat
chat_counts <- d.count.chat %>%
count(designatedGame, name = "chat_count")
# Count the occurrences of each designatedGame in d.count.slider
slider_counts <- d.count.slider %>%
count(designatedGame, name = "slider_count")
# Join counts to compare
missing_chat <- decode_counts %>%
left_join(chat_counts, by = "designatedGame") %>%
filter(is.na(chat_count) | decode_count > chat_count)
missing_slider <- decode_counts %>%
left_join(slider_counts, by = "designatedGame") %>%
filter(is.na(slider_count) | decode_count > slider_count)
# Print missing games for each
cat("Missing or insufficient games in d.count.chat:\n")
print(missing_chat)
cat("\nMissing or insufficient games in d.count.slider:\n")
print(missing_slider)
d.allnovel <- d.all %>%
filter(is.na(designatedGame)) %>%
group_by(gameID) %>%
distinct(playerID, .keep_all = TRUE) %>%
mutate(
countRabbits = list(nRabbits),
countSquirrels = list(nSquirrels)
) %>%
ungroup()
#10120 turns out to be the problem. generated 5 players (?)
#games ran with 4, making them novel
#filtered out above
d.modified <- d.all %>%
filter(is.na(designatedGame))%>%
mutate(
designatedGame = 0,
entropy_bin = '(0.81,1.1]',
representation_bin = '(0.24,0.36]',
nCrittersGame_bin = '(20,25]'
)
d.all$designatedGame <- as.character(d.all$designatedGame)
d.modified$designatedGame <- as.character(d.modified$designatedGame)
d.all <- d.all %>%
filter(!is.na(designatedGame))%>%
bind_rows(d.modified)
decode_missing_chat <- decode %>%
filter(designatedGame %in% missing_chat$designatedGame) %>%
mutate(treatment = "interactive")
decode_missing_slider <- decode %>%
filter(designatedGame %in% missing_slider$designatedGame) %>%
mutate(treatment = "slider")
decode_combined <- bind_rows(decode_missing_slider, decode_missing_chat)
write_json(decode_combined, "missing_both_games_jan8.json", pretty = TRUE)
list_cols <- sapply(d.all, is.list)
d.all[list_cols] <- lapply(d.all[list_cols], function(col) {
sapply(col, paste, collapse = ";") # Collapse lists into strings
})
d.all <- d.all %>%
select(-messages, -emojiArray)
write.csv(d.all, "exp2_clean_data_jan8.csv", row.names = FALSE)
crash <-me
low_count<- read_csv(here('analysis/2_experiment_2/low_count.csv'))
# Fill missing nCrittersGame_bin
low_count_a <- low_count %>%
filter(is.na(nCrittersGame_bin)) %>%
left_join(decode, by = c("representation_bin", "entropy_bin")) %>%
mutate(nCrittersGame_bin = coalesce(nCrittersGame_bin.x, nCrittersGame_bin.y)) %>%
select(-nCrittersGame_bin.x, -nCrittersGame_bin.y)
# Fill missing representation_bin
low_count_b <- low_count %>%
filter(is.na(representation_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "entropy_bin")) %>%
mutate(representation_bin = coalesce(representation_bin.x, representation_bin.y)) %>%
select(-representation_bin.x, -representation_bin.y)
# Fill missing entropy_bin
low_count_c <- low_count %>%
filter(is.na(entropy_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "representation_bin")) %>%
mutate(entropy_bin = coalesce(entropy_bin.x, entropy_bin.y)) %>%
select(-entropy_bin.x, -entropy_bin.y)
# Combine filled datasets
low_count_filled <- bind_rows(low_count_a, low_count_b, low_count_c)
# Make sure only one row per low_count row
low_count_filled <- low_count_filled %>%
distinct(low_count_filled) %>%
semi_join(low_count, by = c("nCrittersGame_bin", "representation_bin", "entropy_bin"))
low_count<- read_csv(here('analysis/2_experiment_2/low_count.csv'))
# Fill missing nCrittersGame_bin
low_count_a <- low_count %>%
filter(is.na(nCrittersGame_bin)) %>%
left_join(decode, by = c("representation_bin", "entropy_bin")) %>%
mutate(nCrittersGame_bin = coalesce(nCrittersGame_bin.x, nCrittersGame_bin.y)) %>%
select(-nCrittersGame_bin.x, -nCrittersGame_bin.y)
# Fill missing representation_bin
low_count_b <- low_count %>%
filter(is.na(representation_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "entropy_bin")) %>%
mutate(representation_bin = coalesce(representation_bin.x, representation_bin.y)) %>%
select(-representation_bin.x, -representation_bin.y)
# Fill missing entropy_bin
low_count_c <- low_count %>%
filter(is.na(entropy_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "representation_bin")) %>%
mutate(entropy_bin = coalesce(entropy_bin.x, entropy_bin.y)) %>%
select(-entropy_bin.x, -entropy_bin.y)
# Combine filled datasets
low_count_filled <- bind_rows(low_count_a, low_count_b, low_count_c)
# Make sure only one row per low_count row
low_count_filled <- low_count_filled %>%
semi_join(low_count, by = c("nCrittersGame_bin", "representation_bin", "entropy_bin"))
low_count<- read_csv(here('analysis/2_experiment_2/low_count.csv'))
# Fill missing nCrittersGame_bin
low_count_a <- low_count %>%
filter(is.na(nCrittersGame_bin)) %>%
left_join(decode, by = c("representation_bin", "entropy_bin")) %>%
mutate(nCrittersGame_bin = coalesce(nCrittersGame_bin.x, nCrittersGame_bin.y)) %>%
select(-nCrittersGame_bin.x, -nCrittersGame_bin.y)
# Fill missing representation_bin
low_count_b <- low_count %>%
filter(is.na(representation_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "entropy_bin")) %>%
mutate(representation_bin = coalesce(representation_bin.x, representation_bin.y)) %>%
select(-representation_bin.x, -representation_bin.y)
# Fill missing entropy_bin
low_count_c <- low_count %>%
filter(is.na(entropy_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "representation_bin")) %>%
mutate(entropy_bin = coalesce(entropy_bin.x, entropy_bin.y)) %>%
select(-entropy_bin.x, -entropy_bin.y)
# Combine filled datasets
low_count_filled <- bind_rows(low_count_a, low_count_b, low_count_c)
# Ensure one row per low_count row
low_count_filled <- low_count %>%
left_join(low_count_filled, by = c("nCrittersGame_bin", "representation_bin", "entropy_bin")) %>%
distinct()
View(low_count_filled)
low_count<- read_csv(here('analysis/2_experiment_2/low_count.csv'))
# Fill missing nCrittersGame_bin
low_count_a <- low_count %>%
filter(is.na(nCrittersGame_bin)) %>%
left_join(decode, by = c("representation_bin", "entropy_bin")) %>%
mutate(nCrittersGame_bin = coalesce(nCrittersGame_bin.x, nCrittersGame_bin.y)) %>%
select(-nCrittersGame_bin.x, -nCrittersGame_bin.y)
# Fill missing representation_bin
low_count_b <- low_count %>%
filter(is.na(representation_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "entropy_bin")) %>%
mutate(representation_bin = coalesce(representation_bin.x, representation_bin.y)) %>%
select(-representation_bin.x, -representation_bin.y)
# Fill missing entropy_bin
low_count_c <- low_count %>%
filter(is.na(entropy_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "representation_bin")) %>%
mutate(entropy_bin = coalesce(entropy_bin.x, entropy_bin.y)) %>%
select(-entropy_bin.x, -entropy_bin.y)
# Combine filled datasets
low_count_filled <- bind_rows(low_count_a, low_count_b, low_count_c)
# Remove duplicate entries by selecting the first match for each row in low_count
low_count_filled <- low_count_filled %>%
distinct(nCrittersGame_bin, representation_bin, entropy_bin, .keep_all = TRUE)
View(low_count_filled)
low_count<- read_csv(here('analysis/2_experiment_2/low_count.csv'))
# Fill missing nCrittersGame_bin
low_count_a <- low_count %>%
filter(is.na(nCrittersGame_bin)) %>%
left_join(decode, by = c("representation_bin", "entropy_bin")) %>%
mutate(nCrittersGame_bin = coalesce(nCrittersGame_bin.x, nCrittersGame_bin.y)) %>%
select(-nCrittersGame_bin.x, -nCrittersGame_bin.y)
# Fill missing representation_bin
low_count_b <- low_count %>%
filter(is.na(representation_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "entropy_bin")) %>%
mutate(representation_bin = coalesce(representation_bin.x, representation_bin.y)) %>%
select(-representation_bin.x, -representation_bin.y)
# Fill missing entropy_bin
low_count_c <- low_count %>%
filter(is.na(entropy_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "representation_bin")) %>%
mutate(entropy_bin = coalesce(entropy_bin.x, entropy_bin.y)) %>%
select(-entropy_bin.x, -entropy_bin.y)
# Combine filled datasets
low_count_filled <- bind_rows(low_count_a, low_count_b, low_count_c)
# Remove duplicate entries by selecting the first match for each row in low_count
low_count_filled <- low_count_filled %>%
distinct(nCrittersGame_bin, representation_bin, entropy_bin, .keep_all = TRUE)
low_count<- read_csv(here('analysis/2_experiment_2/low_count.csv')) %>%
filter(count == 1)
# Fill missing nCrittersGame_bin
low_count_a <- low_count %>%
filter(is.na(nCrittersGame_bin)) %>%
left_join(decode, by = c("representation_bin", "entropy_bin")) %>%
mutate(nCrittersGame_bin = coalesce(nCrittersGame_bin.x, nCrittersGame_bin.y)) %>%
select(-nCrittersGame_bin.x, -nCrittersGame_bin.y)
# Fill missing representation_bin
low_count_b <- low_count %>%
filter(is.na(representation_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "entropy_bin")) %>%
mutate(representation_bin = coalesce(representation_bin.x, representation_bin.y)) %>%
select(-representation_bin.x, -representation_bin.y)
# Fill missing entropy_bin
low_count_c <- low_count %>%
filter(is.na(entropy_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "representation_bin")) %>%
mutate(entropy_bin = coalesce(entropy_bin.x, entropy_bin.y)) %>%
select(-entropy_bin.x, -entropy_bin.y)
# Combine filled datasets
low_count_filled <- bind_rows(low_count_a, low_count_b, low_count_c)
# Remove duplicate entries by selecting the first match for each row in low_count
low_count_filled <- low_count_filled %>%
distinct(nCrittersGame_bin, representation_bin, entropy_bin, .keep_all = TRUE)
View(low_count_filled)
View(low_count_b)
low_count_b <- low_count %>%
filter(is.na(representation_bin))
View(low_count_b)
low_count<- read_csv(here('analysis/2_experiment_2/low_count.csv')) %>%
filter(count == 1)
# Fill missing nCrittersGame_bin
low_count_a <- low_count %>%
filter(is.na(nCrittersGame_bin)) %>%
left_join(decode, by = c("representation_bin", "entropy_bin")) %>%
mutate(nCrittersGame_bin = coalesce(nCrittersGame_bin.x, nCrittersGame_bin.y)) %>%
select(-nCrittersGame_bin.x, -nCrittersGame_bin.y)
# Fill missing entropy_bin
low_count_c <- low_count %>%
filter(is.na(entropy_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "representation_bin")) %>%
mutate(entropy_bin = coalesce(entropy_bin.x, entropy_bin.y)) %>%
select(-entropy_bin.x, -entropy_bin.y)
# Combine filled datasets
low_count_filled <- bind_rows(low_count_a, low_count_c)
# Remove duplicate entries by selecting the first match for each row in low_count
low_count_filled <- low_count_filled %>%
distinct(nCrittersGame_bin, representation_bin, entropy_bin, .keep_all = TRUE)
low_count<- read_csv(here('analysis/2_experiment_2/low_count.csv')) %>%
filter(count == 1)
# Fill missing nCrittersGame_bin
low_count_a <- low_count %>%
filter(is.na(nCrittersGame_bin)) %>%
left_join(decode, by = c("representation_bin", "entropy_bin")) %>%
slice_head(n = 1) %>%  # Keep the first match
mutate(nCrittersGame_bin = coalesce(nCrittersGame_bin.x, nCrittersGame_bin.y)) %>%
select(-nCrittersGame_bin.x, -nCrittersGame_bin.y)
# Fill missing entropy_bin
low_count_c <- low_count %>%
filter(is.na(entropy_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "representation_bin")) %>%
slice_head(n = 1) %>%  # Keep the first match
mutate(entropy_bin = coalesce(entropy_bin.x, entropy_bin.y)) %>%
select(-entropy_bin.x, -entropy_bin.y)
# Combine filled datasets
low_count_filled <- bind_rows(low_count_a, low_count_c)
# Remove any remaining duplicates
low_count_filled <- low_count_filled %>%
distinct(nCrittersGame_bin, representation_bin, entropy_bin, .keep_all = TRUE)
low_count<- read_csv(here('analysis/2_experiment_2/low_count.csv')) %>%
filter(count == 1)
# Fill missing nCrittersGame_bin
low_count_a <- low_count %>%
filter(is.na(nCrittersGame_bin)) %>%
left_join(decode, by = c("representation_bin", "entropy_bin")) %>%
slice_head(n = 1) %>%  # Keep the first match
mutate(nCrittersGame_bin = coalesce(nCrittersGame_bin.x, nCrittersGame_bin.y)) %>%
select(-nCrittersGame_bin.x, -nCrittersGame_bin.y)
# Fill missing entropy_bin
low_count_c <- low_count %>%
filter(is.na(entropy_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "representation_bin")) %>%
slice_head(n = 1) %>%  # Keep the first match
mutate(entropy_bin = coalesce(entropy_bin.x, entropy_bin.y)) %>%
select(-entropy_bin.x, -entropy_bin.y)
# Combine filled datasets
low_count_filled <- bind_rows(low_count_a, low_count_c)
# Remove any remaining duplicates
low_count_filled <- low_count_filled %>%
distinct(nCrittersGame_bin, representation_bin, entropy_bin, .keep_all = TRUE)
low_count<- read_csv(here('analysis/2_experiment_2/low_count.csv')) %>%
filter(count == 1)
# Fill missing nCrittersGame_bin
low_count_a <- low_count %>%
filter(is.na(nCrittersGame_bin)) %>%
left_join(decode, by = c("representation_bin", "entropy_bin")) %>%
mutate(nCrittersGame_bin = coalesce(nCrittersGame_bin.x, nCrittersGame_bin.y)) %>%
select(-nCrittersGame_bin.x, -nCrittersGame_bin.y)
# Fill missing entropy_bin
low_count_c <- low_count %>%
filter(is.na(entropy_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "representation_bin")) %>%
mutate(entropy_bin = coalesce(entropy_bin.x, entropy_bin.y)) %>%
select(-entropy_bin.x, -entropy_bin.y)
# Combine filled datasets
low_count_filled <- bind_rows(low_count_a, low_count_c)
# Remove duplicate entries by selecting the first match for each row in low_count
low_count_filled <- low_count_filled %>%
distinct(nCrittersGame_bin, representation_bin, entropy_bin, .keep_all = TRUE)
View(low_count_filled)
low_count<- read_csv(here('analysis/2_experiment_2/low_count.csv')) %>%
filter(count == 1)
# Fill missing nCrittersGame_bin
low_count_a <- low_count %>%
filter(is.na(nCrittersGame_bin)) %>%
left_join(decode, by = c("representation_bin", "entropy_bin")) %>%
mutate(nCrittersGame_bin = coalesce(nCrittersGame_bin.x, nCrittersGame_bin.y)) %>%
select(-nCrittersGame_bin.x, -nCrittersGame_bin.y)
# Fill missing entropy_bin
low_count_c <- low_count %>%
filter(is.na(entropy_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "representation_bin")) %>%
mutate(entropy_bin = coalesce(entropy_bin.x, entropy_bin.y)) %>%
select(-entropy_bin.x, -entropy_bin.y)
# Combine filled datasets
low_count_filled <- bind_rows(low_count_a, low_count_c)
# Remove duplicate entries by selecting the first match for each row in low_count
low_count_filled <- low_count_filled %>%
distinct(nCrittersGame_bin, representation_bin, entropy_bin, .keep_all = TRUE) %>%
distinct(gameID, .keep_all = TRUE)
low_count<- read_csv(here('analysis/2_experiment_2/low_count.csv')) %>%
filter(count == 1)
# Fill missing nCrittersGame_bin
low_count_a <- low_count %>%
filter(is.na(nCrittersGame_bin)) %>%
left_join(decode, by = c("representation_bin", "entropy_bin")) %>%
mutate(nCrittersGame_bin = coalesce(nCrittersGame_bin.x, nCrittersGame_bin.y)) %>%
select(-nCrittersGame_bin.x, -nCrittersGame_bin.y)
# Fill missing entropy_bin
low_count_c <- low_count %>%
filter(is.na(entropy_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "representation_bin")) %>%
mutate(entropy_bin = coalesce(entropy_bin.x, entropy_bin.y)) %>%
select(-entropy_bin.x, -entropy_bin.y)
# Combine filled datasets
low_count_filled <- bind_rows(low_count_a, low_count_c)
# Remove duplicate entries by selecting the first match for each row in low_count
low_count_filled <- low_count_filled %>%
distinct(nCrittersGame_bin, representation_bin, entropy_bin, .keep_all = TRUE) %>%
distinct(designatedGame, .keep_all = TRUE)%>%
select(-treatment, -representation_bin, -count, -prop,-direction, -entropy_bin, everything(), treatment, representation_bin, count, prop,direction, entropy_bin) %>%
arrange(treatment)
low_count<- read_csv(here('analysis/2_experiment_2/low_count.csv')) %>%
filter(count == 1)
# Fill missing nCrittersGame_bin
low_count_a <- low_count %>%
filter(is.na(nCrittersGame_bin)) %>%
left_join(decode, by = c("representation_bin", "entropy_bin")) %>%
mutate(nCrittersGame_bin = coalesce(nCrittersGame_bin.x, nCrittersGame_bin.y)) %>%
select(-nCrittersGame_bin.x, -nCrittersGame_bin.y)
# Fill missing entropy_bin
low_count_c <- low_count %>%
filter(is.na(entropy_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "representation_bin")) %>%
mutate(entropy_bin = coalesce(entropy_bin.x, entropy_bin.y)) %>%
select(-entropy_bin.x, -entropy_bin.y)
# Combine filled datasets
low_count_filled <- bind_rows(low_count_a, low_count_c)
# Remove duplicate entries by selecting the first match for each row in low_count
low_count_filled <- low_count_filled %>%
distinct(nCrittersGame_bin, representation_bin, entropy_bin, .keep_all = TRUE) %>%
distinct(designatedGame, .keep_all = TRUE)%>%
select(-treatment, -representation_bin, -count, -prop,-direction, -entropy_bin, everything(), treatment, representation_bin, count, prop,direction, entropy_bin) %>%
arrange(treatment)
write_json(decode_combined_with_direction, "missing_games_jan10.json", pretty = TRUE)
low_count<- read_csv(here('analysis/2_experiment_2/low_count.csv')) %>%
filter(count == 1)
# Fill missing nCrittersGame_bin
low_count_a <- low_count %>%
filter(is.na(nCrittersGame_bin)) %>%
left_join(decode, by = c("representation_bin", "entropy_bin")) %>%
mutate(nCrittersGame_bin = coalesce(nCrittersGame_bin.x, nCrittersGame_bin.y)) %>%
select(-nCrittersGame_bin.x, -nCrittersGame_bin.y)
# Fill missing entropy_bin
low_count_c <- low_count %>%
filter(is.na(entropy_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "representation_bin")) %>%
mutate(entropy_bin = coalesce(entropy_bin.x, entropy_bin.y)) %>%
select(-entropy_bin.x, -entropy_bin.y)
# Combine filled datasets
low_count_filled <- bind_rows(low_count_a, low_count_c)
# Remove duplicate entries by selecting the first match for each row in low_count
low_count_filled <- low_count_filled %>%
distinct(nCrittersGame_bin, representation_bin, entropy_bin, .keep_all = TRUE) %>%
distinct(designatedGame, .keep_all = TRUE)%>%
select(-treatment, -representation_bin, -count, -prop,-direction, -entropy_bin, everything(), treatment, representation_bin, count, prop,direction, entropy_bin) %>%
arrange(treatment)
write_json(low_count_filled, "missing_games_jan10.json", pretty = TRUE)
low_count<- read_csv(here('analysis/2_experiment_2/low_count.csv')) %>%
filter(count == 1)
# Fill missing nCrittersGame_bin
low_count_a <- low_count %>%
filter(is.na(nCrittersGame_bin)) %>%
left_join(decode, by = c("representation_bin", "entropy_bin")) %>%
mutate(nCrittersGame_bin = coalesce(nCrittersGame_bin.x, nCrittersGame_bin.y)) %>%
select(-nCrittersGame_bin.x, -nCrittersGame_bin.y)
# Fill missing entropy_bin
low_count_c <- low_count %>%
filter(is.na(entropy_bin)) %>%
left_join(decode, by = c("nCrittersGame_bin", "representation_bin")) %>%
mutate(entropy_bin = coalesce(entropy_bin.x, entropy_bin.y)) %>%
select(-entropy_bin.x, -entropy_bin.y)
# Combine filled datasets
low_count_filled <- bind_rows(low_count_a, low_count_c)
# Remove duplicate entries by selecting the first match for each row in low_count
low_count_filled <- low_count_filled %>%
distinct(nCrittersGame_bin, representation_bin, entropy_bin, .keep_all = TRUE) %>%
distinct(designatedGame, .keep_all = TRUE)%>%
select(-treatment, -representation_bin, -count, -prop,-direction, -entropy_bin, everything(), treatment, representation_bin, count, prop,direction, entropy_bin) %>%
arrange(treatment)
write_json(low_count_filled, "missing_games_jan10.json", pretty = TRUE)
heatmap_test <- d.allgame %>%
filter(treatment %in% c('slider', 'interactive')) %>%
filter(direction %in% c('SR', 'RS')) %>%
group_by(treatment, direction, nCrittersGame_bin, representation_bin) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(prop = count / sum(count, na.rm = TRUE))
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
theme_set(theme_few())
d.all <- read_csv(here('analysis/2_experiment_2/exp2_clean_data_jan8.csv'))
d.all <- d.all %>%
separate(treatmentName.x, into = c("direction", "treatment"), sep = "_")
persistentnoClick <- data.frame(gameID = character(), playerID = character(), stringsAsFactors = FALSE)
for (i in 1:7) {
idx_pair <- c(i + 1, i + 2)
filtered_players <- d.all %>%
group_by(gameID, playerID) %>%
filter(all(is.na(guess[idx_pair]))) %>%
select(gameID, playerID) %>%
distinct()
persistentnoClick <- bind_rows(persistentnoClick, filtered_players)
}
persistentnoClick <- distinct(persistentnoClick)
gameIDs_to_remove <- persistentnoClick %>%
count(gameID) %>%
filter(n >= 2) %>%
pull(gameID)
d.all <- d.all %>%
filter(!(gameID %in% gameIDs_to_remove))
d.allnovel <-d.all %>%
filter(is.na(designatedGame))%>%
distinct(gameID)
d.allgame <- d.all %>%
distinct(gameID, .keep_all = TRUE)
heatmap_test <- d.allgame %>%
filter(treatment %in% c('slider', 'interactive')) %>%
filter(direction %in% c('SR', 'RS')) %>%
group_by(treatment, direction, nCrittersGame_bin, representation_bin) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(prop = count / sum(count, na.rm = TRUE))
ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1,
axis.text.x = element_text(angle = 45, hjust = 1)
) #+
# facet_wrap(~treatment #+ direction
#          )
heatmap_test <- d.allgame %>%
filter(treatment %in% c('slider', 'interactive')) %>%
filter(direction %in% c('SR', 'RS')) %>%
group_by(treatment, direction, entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "entropy", y = "representation") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
) #+
# facet_wrap(~treatment #+ direction
#         )
nCritters_entropy_heatmap_new <- d.allgame %>%
filter(treatment %in% c('slider', 'interactive')) %>%
filter(direction %in% c('SR', 'RS')) %>%
group_by(treatment, direction, nCrittersGame_bin, entropy_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(nCritters_entropy_heatmap_new, aes(x = entropy_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Entropy", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
) #+
#facet_wrap(~treatment #+ direction
#          )
