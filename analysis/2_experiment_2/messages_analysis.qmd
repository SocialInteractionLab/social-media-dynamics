---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r, include=FALSE}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
library(plotly)


theme_set(theme_few())
```

## Read in data

```{r,include=FALSE}

d.allmsg <- read_csv(here('analysis/2_experiment_2/message_data/coded.csv'))%>%
  rename_with(~ gsub("\\.x$", "", .x), ends_with(".x")) %>%
  select(-ends_with(".y")) 

d.all <- read_csv(here('analysis/2_experiment_2/exp2_clean_data_jan17.csv'))

d.all <- d.all %>%
  separate(treatmentName.x, into = c("direction", "treatment"), sep = "_")

d.all <- d.all %>%
  mutate(error = if_else(direction == "RS", abs((100-guess) - (mleGame*100)), abs(guess - (mleGame*100))))

d.allmsg_exp1 <- read_csv(here('analysis/2_experiment_2/message_data/recoded_messages_exp1.csv'))%>%
  rename_with(~ gsub("\\.x$", "", .x), ends_with(".x")) %>%
  select(-ends_with(".y"))
d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))%>%
  rename_with(~ gsub("\\.x$", "", .x), ends_with(".x")) %>%
  select(-ends_with(".y"))

d.allmsg_exp1  <- merge(d.allmsg_exp1, d.guesses, by.x = c("gameID", "sender.id", "round"), by.y = c("gameID", "playerID", "idx"), all = TRUE)  %>% filter(!is.na(coding))%>% 
  distinct(across(-coding), .keep_all = TRUE) %>% filter(!is.na(roundID)) %>% mutate (error = abs(mleEstimateGame-guess))%>% unique() 

```

# combine data & calculate bins

```{r}
d.allmsg_exp1 <- d.allmsg_exp1 %>%
   rename(mleGame = mleEstimateGame)%>%
  rename(mleEstimate = mleEstimateIndiv) %>%
   select(-roundID, -time) %>% 
  separate(treatmentName.x, into = c("prefix", "treatment", "direction"), sep = "-") %>%
  mutate(across(c(treatment, direction), trimws)) %>% 
  select(-prefix, -treatmentName.y, -...1, -mleEstimate, -mleGame, -nRabbitsGame, -nSquirrelsGame)

d.allmsg<-d.allmsg%>%
   select(-sender.name, -designatedGame, -mleGame, -entropy_bin, -representation, -representation_bin, -nCritters, -nCrittersGame_bin, -mleEstimate, -mleGame, -nRabbitsGame, -nSquirrelsGame)
   

common_cols <- intersect(names(d.allmsg), names(d.allmsg_exp1))
unique_to_df1 <- setdiff(names(d.allmsg), names(d.allmsg_exp1))
unique_to_df2 <- setdiff(names(d.allmsg_exp1), names(d.allmsg))

#print(common_cols)
print(unique_to_df1)

print(unique_to_df2)


combined_df <- bind_rows(d.allmsg, d.allmsg_exp1)
combined_df_binning <- combined_df%>%
  select(sender.id, gameID, nRabbits, nSquirrels, entropy)%>%
unique()%>%
  mutate(nCritters = nSquirrels + nRabbits,    
         mleEstimate = nRabbits / (nRabbits + nSquirrels),
)%>%
  group_by(gameID) %>%
  filter(n_distinct(sender.id) == 4) %>%
  mutate(
   nRabbitsGame = sum(nRabbits),
    nSquirrelsGame = sum(nSquirrels),
    mleGame = nRabbitsGame / (nRabbitsGame + nSquirrelsGame),
    totalCritters = sum(nCritters),
    prob = nCritters / totalCritters,
    entropy_new = -sum(ifelse(prob > 0, prob * log(prob), 0)),
    representation = mean(abs(mleEstimate - mleGame))
  ) %>% 
  ungroup() %>% 
    mutate(
      entropy_bin = cut((entropy_new), breaks = seq(0, 2, .27), right = TRUE, include.lowest = TRUE, dig.lab = 2), 
      representation_bin = cut((representation), breaks = seq(0, 1, .12), right = TRUE, include.lowest = TRUE, dig.lab = 2),
      nCrittersGame_bin = cut(totalCritters, breaks = seq(15, 100, by = 5), right = TRUE, include.lowest = TRUE))%>%
  select( -nRabbits, -nSquirrels, -entropy)

#      mutate(entropy_bin_new = cut(abs(entropy_new), breaks = seq(min(entropy_new), max(entropy_new), length.out = 7), include.lowest = TRUE), 
   #          representation_bin_new = cut(abs(representation_new), breaks = seq(min(representation_new), max(representation_new), length.out = 7), include.lowest = TRUE),
    #          nCrittersGame_bin_new = cut(totalCritters_new, breaks = seq(min(totalCritters_new), max(totalCritters_new), length.out = 7), include.lowest = TRUE))

```

```{r}
d.allmsg <- d.allmsg %>% left_join(combined_df_binning, by = c("gameID", "sender.id")) %>%
  group_by(gameID) %>%
  filter(n_distinct(sender.id) == 4) %>%
  ungroup() %>%  mutate(error = if_else(direction == "RS", abs((100-guess) - (mleGame*100)), abs(guess - (mleGame*100)))) 
  
d.allmsg_exp1 <- d.allmsg_exp1 %>% left_join(combined_df_binning, by = c("gameID", "sender.id")) %>%
  group_by(gameID) %>%
  filter(n_distinct(sender.id) == 4) %>%
  ungroup()%>% mutate (error = abs(as.numeric(mleGame*100) - guess))

combined_df <- combined_df %>% left_join(combined_df_binning, by = c("gameID", "sender.id"))%>%
  group_by(gameID) %>%
  filter(n_distinct(sender.id) == 4) %>%
  ungroup()%>%  mutate(error = if_else(direction == "RS", abs((100-guess) - (mleGame*100)), abs(guess - (mleGame*100))))  #%>% filter(!guess == 50)
  

```

```{r}
persistentnoClick <- data.frame(gameID = character(), playerID = character(), stringsAsFactors = FALSE)

for (i in 1:7) {
  idx_pair <- c(i + 1, i + 2)
    filtered_players <- d.all %>%
    group_by(gameID, playerID) %>%
    filter(all(is.na(guess[idx_pair]))) %>%
    select(gameID, playerID) %>%
    distinct()
    persistentnoClick <- bind_rows(persistentnoClick, filtered_players)
}
persistentnoClick <- distinct(persistentnoClick)

games_with_4_players <- d.all %>%
  group_by(gameID) %>%
  summarise(unique_players = n_distinct(playerID)) %>% 
  filter(unique_players == 4)

gameIDs_to_remove <- persistentnoClick %>%
  count(gameID) %>%
  filter(n >= 2) %>%
  pull(gameID)

d.all <- d.all %>%
  filter(!(gameID %in% gameIDs_to_remove)) %>% 
  filter(gameID %in% games_with_4_players$gameID)

d.allnovel <-d.all %>%
  filter(is.na(designatedGame))%>%
  distinct(gameID)

d.allgame <- d.all %>%
   distinct(gameID, .keep_all = TRUE)

d.all <- d.all %>%
  mutate(
    nCrittersGame_bin = str_remove_all(nCrittersGame_bin, "[\\[\\]()]"),
    entropy_bin = str_remove_all(entropy_bin, "[\\[\\]()]"),
    representation_bin = str_remove_all(representation_bin, "[\\[\\]()]")
  )
```

# analyze codes

```{r}
#used this to correct accidental miscodes as pn, as that's essentially the default msg
compare.msg <- d.allmsg_exp1 %>%
  filter(str_detect(coding, "pn"), !str_detect(coding, "[sb]"), round != 1) %>%
  mutate(extracted = str_extract_all(text, "\\d+")) %>%
  filter(map_lgl(extracted, ~ length(.x) == 2)) %>%
  mutate(
    num1 = as.numeric(map_chr(extracted, 1)),
    num2 = as.numeric(map_chr(extracted, 2))
  ) %>%
  filter(
    !((num1 == nRabbits & num2 == nSquirrels) | (num1 == nSquirrels & num2 == nRabbits)), 
  ) #%>%
  #select(-extracted, -sender.name, -recipient, -treatment, -direction, -guess, -confidence)

compare.msg <- compare.msg %>%
  group_by(gameID) %>%
  filter(n_distinct(sender.id) > 2) %>%
  ungroup()
```

```{r}
d.allmsg <- d.allmsg %>%
  left_join(d.all %>%
            select(gameID, playerID, exitSurvey), 
            by = c("gameID", "sender.id" = "playerID"))  %>%
#  mutate(usedCalculator = str_extract(exitSurvey, '(?<="usedCalculator":")[^"]*'),
mutate(exitSurvey = if_else(str_detect(exitSurvey, '"usedCalculator":"yes"'),
                                  "yes",
                                  "no")) %>% unique()
```

```{r}
summary_data_3 <- d.allmsg %>%
  filter(!coding == 'o') %>%
  group_by(gameID) %>%
  summarize(
    exitSurvey = if_else(any(str_detect(exitSurvey, 'yes')), "yes", "no"),
    avg_error = mean(error[round == 8], na.rm = TRUE),
    pn_count = sum(str_count(coding, "pn")),
    sn_count = sum(str_count(coding, "sn")),
    pb_count = sum(str_count(coding, "pb")),
    sb_count = sum(str_count(coding, "sb"))
  ) 


summary_data_long_3 <- summary_data_3 %>%
  select(gameID, exitSurvey, avg_error, pn_count, sn_count, pb_count, sb_count) %>%
  pivot_longer(cols = c(pn_count, sn_count, pb_count, sb_count), 
               names_to = "message_type", values_to = "count")

summary_data_long_3$decile <- cut(summary_data_long_3$avg_error, 
                                breaks = quantile(summary_data_long_3$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE), 
                                include.lowest = TRUE, labels = FALSE)

summary_data_long_proportions <- summary_data_long_3 %>%
 # filter(exitSurvey == 'no') %>%
  group_by(decile) %>% 
  mutate(total_count = sum(count)) %>% 
  group_by(decile, message_type) %>%
  summarize(proportion = sum(count) / mean(total_count)
  ) 

# Plotting
summary_data_long_proportions %>%
  mutate(message_type = fct_relevel(message_type, "pn_count", 'pb_count',  'sn_count', 'sb_count')) %>%
  ggplot(aes(x = factor(decile),  y = proportion, fill = message_type)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_brewer(palette = 'Accent', 
                    labels = c("pn_count" = "personal number", "sn_count" = "social number",
                               "pb_count" = "personal belief", "sb_count" = "social belief")) +
  labs(title = "",
       x = "error (binned)",
       y = "proportion",
       fill = "message type") +
  theme(aspect.ratio = 1, legend.position = "top") +
  guides(fill = guide_legend(nrow = 2))

```

```{r}
summary_data_long_3 <- summary_data_long_3 %>%   
  mutate(message_type = fct_relevel(message_type, 
                                    'pn_count', 'sb_count','pb_count', 'sn_count')) %>%
  group_by(gameID) %>%
  mutate(totalCount = sum(count))

m <- glm(count / totalCount ~ message_type * decile, 
         weights=totalCount,
         data = summary_data_long_3, 
         family = "binomial")

summary(m)

```

```{r}

dsummary_data_deciles_3 <- summary_data_long_3 %>% 
  ungroup()%>%
  select(-gameID, -avg_error, -exitSurvey)%>%
  group_by(decile, message_type) %>%
  summarize(count = sum(count), .groups = "drop") %>%  pivot_wider(names_from = message_type, values_from = count)%>% mutate(d = factor(decile)) 

contrasts(dsummary_data_deciles_3$d) <- contr.sum(length(levels(dsummary_data_deciles_3$d)))

glm_pn <- glm(cbind(pn_count, sn_count +sb_count + pb_count) ~ d,
             family = binomial, data = dsummary_data_deciles_3)

summary(glm_pn)

glm_pb <- glm(cbind(pb_count, sn_count +sb_count + pn_count) ~ d,
             family = binomial, data = dsummary_data_deciles_3)

summary(glm_pb)


glm_sn <- glm(cbind(sn_count, pn_count +sb_count + pb_count) ~ d,
             family = binomial, data = dsummary_data_deciles_3)
summary(glm_sn)


glm_sb <- glm(cbind(sb_count, sn_count +pn_count + pb_count) ~ d,
             family = binomial, data = dsummary_data_deciles_3)
summary(glm_sb)

```

# preregistered data only

```{r}
summary_data_2 <- d.allmsg_exp1 %>%
  filter(!coding == 'o') %>%
    filter(!treatment== 'slider') %>%
  group_by(gameID) %>%
  summarize(
   # exitSurvey = if_else(any(str_detect(exitSurvey, 'yes')), "yes", "no"),
    avg_error = mean(error [round == 12], na.rm = TRUE),
    pn_count = sum(str_count(coding, "pn")),
    sn_count = sum(str_count(coding, "sn")),
    pb_count = sum(str_count(coding, "pb")),
    sb_count = sum(str_count(coding, "sb"))
  ) %>% mutate(sb_present = mean(sb_count > 0))


summary_data_long_2 <- summary_data_2 %>%
  select(gameID, avg_error, pn_count, sn_count, pb_count, sb_count) %>%
  pivot_longer(cols = c(pn_count, sn_count, pb_count, sb_count), 
               names_to = "message_type", values_to = "count")

unique_quantiles <- unique(quantile(summary_data_long_2$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE))
print(unique_quantiles)

#summary_data_long$decile <- cut(summary_data_long$avg_error, 
#                                breaks = quantile(summary_data_long$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE), 
 #                               include.lowest = TRUE, labels = FALSE)

summary_data_long_2 <- summary_data_long_2 %>%
  mutate(decile = ntile(avg_error, 5)) %>% filter(!is.na(decile))

summary_data_long_proportions <- summary_data_long_2 %>%
 # filter(exitSurvey == 'no') %>%
  group_by(decile) %>% 
  mutate(total_count = sum(count)) %>% 
  group_by(decile, message_type) %>%
  summarize(proportion = sum(count) / mean(total_count)
  ) 

# Plotting
summary_data_long_proportions %>%
  mutate(message_type = fct_relevel(message_type, "pn_count", 'pb_count',  'sn_count', 'sb_count')) %>%
  ggplot(aes(x = factor(decile),  y = proportion, fill = message_type)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_brewer(palette = 'Accent', 
                    labels = c("pn_count" = "personal number", "sn_count" = "social number",
                               "pb_count" = "personal belief", "sb_count" = "social belief")) +
  labs(title = "",
       x = "error (binned)",
       y = "proportion",
       fill = "message type") +
  theme(aspect.ratio = 1, legend.position = "top") +
  guides(fill = guide_legend(nrow = 2))
```

```{r}
summary_data_long_2 <- summary_data_long_2 %>%   
  mutate(message_type = fct_relevel(message_type, 
                                    'pn_count', 'sb_count','pb_count', 'sn_count')) %>%
  group_by(gameID) %>%
  mutate(totalCount = sum(count))

dsummary_data_deciles_2 <- summary_data_long_2 %>% 
  ungroup()%>%
  select(-gameID, -avg_error)%>%
  group_by(decile, message_type) %>%
  summarize(count = sum(count), .groups = "drop") %>%  pivot_wider(names_from = message_type, values_from = count)%>% mutate(d = factor(decile)) 

contrasts(dsummary_data_deciles_2$d) <- contr.sum(length(levels(dsummary_data_deciles_2$d)))

glm_pn <- glm(cbind(pn_count, sn_count +sb_count + pb_count) ~ d,
             family = binomial, data = dsummary_data_deciles_2)

summary(glm_pn)

glm_pb <- glm(cbind(pb_count, sn_count +sb_count + pn_count) ~ d,
             family = binomial, data = dsummary_data_deciles_2)

summary(glm_pb)


glm_sn <- glm(cbind(sn_count, pn_count +sb_count + pb_count) ~ d,
             family = binomial, data = dsummary_data_deciles_2)
summary(glm_sn)


glm_sb <- glm(cbind(sb_count, sn_count +pn_count + pb_count) ~ d,
             family = binomial, data = dsummary_data_deciles_2)
summary(glm_sb)

```

```{r}
ggplot(summary_data_3, aes(x = avg_error, y =sb_count)) +
  geom_point() +
  theme_few() +
  theme(
    aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
  ) +geom_smooth(method="lm")
```

```{r}

#summary_data_3 %>% mutate(decile = ntile(avg_error, 5)) %>%
# glm(sb_count ~ avg_error, family = "poisson",
 #      data = .) %>% summary()
#summary_data_3 %>% mutate(decile = ntile(avg_error, 5)) %>%
# glm(sn_count ~ avg_error, family = "poisson",
 #      data = .) %>% summary()
summary_data_3 %>% mutate(decile = ntile(avg_error, 5)) %>%
 lm(log(avg_error) ~ sn_count+sb_count+pb_count+pn_count,
       data = .) %>% summary()
summary_data_2 %>% mutate(decile = ntile(avg_error, 5)) %>%
 lm(log(avg_error) ~ sn_count+sb_count+pb_count+pn_count,
       data = .) %>% summary()
```

# merged summary

```{r}
summary_data_deciles <- rbind(dsummary_data_deciles_2,dsummary_data_deciles_3)%>% 
  select(-d)%>%
  group_by(decile) %>%
  summarise(across(everything(), ~ sum(.x, na.rm = TRUE)), .groups = "drop")%>% mutate(d = factor(decile)) 

contrasts(summary_data_deciles$d) <- contr.sum(length(levels(summary_data_deciles$d)))
  
glm_pn <- glm(cbind(pn_count, sn_count +sb_count + pb_count) ~ d,
             family = binomial, data = summary_data_deciles)

summary(glm_pn)

glm_pb <- glm(cbind(pb_count, sn_count +sb_count + pn_count) ~ d,
             family = binomial, data = summary_data_deciles)

summary(glm_pb)


glm_sn <- glm(cbind(sn_count, pn_count +sb_count + pb_count) ~ d,
             family = binomial, data = summary_data_deciles)
summary(glm_sn)


glm_sb <- glm(cbind(sb_count, sn_count +pn_count + pb_count) ~ d,
             family = binomial, data = summary_data_deciles)
summary(glm_sb)

```

# original data by group type

```{r}


d.allmsg2 <- d.allmsg %>% 
  mutate(
    entropy_minmax = ifelse(entropy <= median(entropy), "H_etpy", "E_etpy"),
    representation_minmax = ifelse(representation <= median(representation), "E_rep", "H_rep"),
    nCrittersGame_minmax = ifelse(totalCritters <= median(totalCritters), "H_crits", "E_crits"), group = paste(entropy_minmax, representation_minmax, nCrittersGame_minmax, sep = "\n")
  ) %>%filter(group !='E_etpy\nH_rep\nE_crits') %>%
  group_by(representation_bin, entropy_bin, nCrittersGame_bin, treatment) %>%
  mutate(errorAvg = mean(error, na.rm = TRUE)) %>% 
  ungroup() %>% 
  filter(round == 8)

summary_data <- d.allmsg2 %>%
  group_by(gameID, group) %>%
  summarize(
    avg_error = mean(error, na.rm = TRUE),
    pn_count = sum(str_count(coding, "pn")),
    sn_count = sum(str_count(coding, "sn")),
    pb_count = sum(str_count(coding, "pb")),
    sb_count = sum(str_count(coding, "sb"))
  ) %>% ungroup() %>%
  mutate(
    total_count = pn_count + sn_count + pb_count + sb_count,
    pn_prop = pn_count / total_count,
    sn_prop = sn_count / total_count,
    pb_prop = pb_count / total_count,
    sb_prop = sb_count / total_count
  )

summary_data_long <- summary_data %>%
  select(gameID, avg_error, pn_count, sn_count, pb_count, sb_count, group) %>%
  pivot_longer(cols = c(pn_count, sn_count, pb_count, sb_count), 
               names_to = "message_type", 
               values_to = "count")

# Create deciles for avg_error
decile_breaks <- unique(quantile(summary_data_long$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE))
summary_data_long$decile <- cut(summary_data_long$avg_error, 
                                breaks = decile_breaks, 
                                include.lowest = TRUE, labels = FALSE)

# Summarize to calculate proportions per decile and group
summary_data_long_proportions <- summary_data_long %>%
  group_by( group) %>% 
  mutate(total_count = sum(count)) %>% 
  ungroup() %>%
  group_by( group, message_type) %>%
  summarize(proportion = sum(count) / first(total_count), .groups = "drop")


# Set the custom order for 'group'
group_order <- c( "H_etpy\nE_rep\nH_crits", "H_etpy\nE_rep\nE_crits",
                 "E_etpy\nE_rep\nE_crits", "E_etpy\nE_rep\nH_crits", "H_etpy\nH_rep\nE_crits",
                 "E_etpy\nH_rep\nH_crits", "H_etpy\nH_rep\nH_crits", "E_etpy\nH_rep\nE_crits")

summary_data_long_proportions$group <- factor(summary_data_long_proportions$group, levels = group_order)

ggplot(summary_data_long_proportions, aes(x = group, y = proportion, fill = message_type)) +
 geom_bar(stat = "identity", position = "stack") +
 theme_few() +
 labs(title = "Proportion of Message Types by Group",
      x = "Group", 
      y = "Proportion",
      fill = "Message Type") +
 theme(legend.position = 'top',
       axis.text.x = element_text(angle = 0, hjust = 1, vjust = 1),
       plot.margin = margin(b = 20, l = 20, r = 20, t = 20)) +
 scale_x_discrete(expand = c(0.02, 0.02)) +
 theme(aspect.ratio = 0.5) # Made plot wider by reducing aspect ratio
```

```{r}
d.allmsg2 <- d.allmsg %>% 
  filter(!is.na(guess))%>%
  group_by(gameID, round) %>%
  mutate(avg_error = mean(abs(error))) %>%
  ungroup() %>%
  group_by(gameID) %>%
  mutate(
    error_change_overall = (first(avg_error[round == max(round)]) - first(avg_error[round == min(round)])),
    s_count = sum(str_count(coding, "s"), na.rm = TRUE)
  ) %>%
  ungroup()


  
d.allmsg_exp1_2 <- d.allmsg_exp1 %>%
    filter(!is.na(guess))%>%
  group_by(gameID, round) %>%
  mutate(avg_error = mean(abs(error))) %>%
  ungroup() %>%
  group_by(gameID) %>%
  mutate(
    error_change_overall = (first(avg_error[round == max(round)]) - first(avg_error[round == min(round)])),
    s_count = sum(str_count(coding, "s"), na.rm = TRUE)
  ) %>%
  ungroup()

ggplot(subset(d.allmsg_exp1_2, round == 12), aes(x = s_count, y = error_change_overall)) +
  geom_point() +geom_smooth(method="lm")+
  labs(
    y = "error_change_overall",
    x = "s",
    title = "Scatter Plot of Error vs S Count"
  )
ggplot(subset(d.allmsg2, round == 8), aes(x = s_count, y = error_change_overall)) +
  geom_point() + geom_smooth(method="lm")+
  labs(
    y = "error_change_overall",
    x = "s",
    title = "Scatter Plot of Error vs S Count"
  )
```

# Error change for complex and preregistered datasets

```{r}
d.allmsg2 <- d.allmsg2 %>% 
    select(-text) %>%
   group_by(across(-coding)) %>%
  summarise(coding = paste(coding, collapse = " "), .groups = "drop")

d.allmsg_exp1_2 <- d.allmsg_exp1_2 %>%
   select(-text) %>%
   group_by(across(-coding)) %>%
  summarise(coding = paste(coding, collapse = " "), .groups = "drop")
```

```{r}
d.allmsg2 <- d.allmsg2 %>%
  mutate(round = as.numeric(round)) %>% 
  left_join(
    d.allmsg2 %>%
      mutate(round = as.numeric(round)) %>%
            mutate(round = round + 1) %>% 
      select(gameID, recipient, round, coding) %>%
      rename(coding_received = coding),
    by = c("gameID", "sender.id" = "recipient", "round")
  )%>%
  mutate(coding_received_s =  paste0(
    if_else(str_detect(coding_received, "s"), "s", ""),
    if_else(str_detect(coding_received, "p"), "p", "")
  ))%>% 
  mutate(roundError = abs(mleGame*100 - guess))

d.allmsg_exp1_2 <- d.allmsg_exp1_2 %>%
   mutate(round = as.numeric(round)) %>% 
  left_join(
    d.allmsg_exp1_2 %>%
      mutate(round = as.numeric(round)) %>%
            mutate(round = round + 1) %>% 
      select(gameID, recipient, round, coding) %>%
      rename(coding_received = coding),
    by = c("gameID", "sender.id" = "recipient", "round")
  )%>%
  mutate(coding_received_s =  paste0(
    if_else(str_detect(coding_received, "s"), "s", ""),
    if_else(str_detect(coding_received, "p"), "p", "")
  ))%>% 
  mutate(roundError = abs(mleGame*100 - guess))

d.allmsg2 <- d.allmsg2%>% 
  left_join(
    d.allmsg2 %>%
      mutate(round = as.numeric(round)) %>%
            mutate(round = round + 1) %>% 
      select(gameID, sender.id, round, roundError) %>%
      rename(roundErrorPrev = roundError),
    by = c("gameID", "sender.id", "round"))%>% 
  mutate(roundErrorChange = abs(roundErrorPrev - roundError))

d.allmsg_exp1_2 <- d.allmsg_exp1_2%>% 
  left_join(
    d.allmsg_exp1_2 %>%
      mutate(round = as.numeric(round)) %>%
            mutate(round = round + 1) %>% 
      select(gameID, sender.id, round, roundError) %>%
      rename(roundErrorPrev = roundError),
    by = c("gameID", "sender.id", "round"))%>% 
  mutate(roundErrorChange = abs(roundErrorPrev - roundError))
```

```{r}
d.allmsg2 <- d.allmsg2 %>% 
mutate(s_bin = cut(s_count, breaks = seq(min(s_count), max(s_count), length.out = 3), include.lowest = TRUE))

d.allmsg_exp1_2 <- d.allmsg_exp1_2 %>% 
  filter(!treatment == "unidirectional")%>%
mutate(s_bin = cut(s_count, breaks = seq(min(s_count), max(s_count), length.out = 3), include.lowest = TRUE))

ggplot(d.allmsg2, aes(x = round, y = error, color = s_bin)) +
  geom_smooth(method = 'lm') +
stat_summary(fun = mean, geom = "point")+
  theme_minimal()

#lmer(error ~ s_bin + (1 | gameID), data = d.allmsg2)

#glm(log(error) ~ s_bin, family = "poisson",
   #    data = d.allmsg2)

ggplot(d.allmsg_exp1_2, aes(x = round, y = error, color = s_bin)) +
  geom_smooth(method = 'lm') +
stat_summary(fun = mean, geom = "point")+
  theme_minimal()

#lmer(error ~ s_bin + (1 | gameID), data = d.allmsg_exp1_2)

summary(glm((error+0.1) ~ s_count*round, family = "Gamma",
       data = d.allmsg2))

summary(lm((error) ~ s_count*round,
       data = d.allmsg2))
```

```{r}
d.allmsg2 <- d.allmsg2 %>% 
  mutate(s_bin = ifelse(s_count < 5, "zero", "not zero"))

d.allmsg_exp1_2 <- d.allmsg_exp1_2 %>% 
  filter(!treatment== "unidirectional")%>%
  mutate(s_bin = ifelse(s_count <5, "zero", "not zero"))


ggplot(d.allmsg2, aes(x = round, y = error, color = s_bin)) +
  geom_smooth(method = 'lm') +
  #geom_point() +
  theme_minimal()

lmer(error ~ s_bin + (1 | gameID), data = d.allmsg2)

#glm(log(error) ~ s_bin, family = "poisson",
   #    data = d.allmsg2)

ggplot(d.allmsg_exp1_2, aes(x = round, y = error, color = s_bin)) +
  geom_smooth(method = 'lm') +
  #geom_point() +
  theme_minimal()

summary(lmer(error ~ s_count*round + (1 | gameID), data = d.allmsg_exp1_2))
summary(lmer(error ~ s_count*round + (1 | gameID), data = d.allmsg2))

```

# game count for complex dataset

```{r}
heatmap_test <- d.allmsg %>%
    filter(!treatment== "unidirectional")%>%
  group_by(treatment, direction, nCrittersGame_bin, representation_bin) %>%
  summarise(count = n(), .groups = "drop") %>%
  mutate(prop = count / sum(count, na.rm = TRUE))

ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
  geom_tile(aes(fill = count), color = "white") +
  scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
  labs(x = "Representation", y = "nCrittersGame") +
  theme_few() +
  theme(
    aspect.ratio = 1,
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  facet_wrap(~treatment #+ direction
             )
heatmap_test <- d.allmsg %>%
    filter(!treatment== "unidirectional")%>%
  group_by(treatment, direction, entropy_bin, representation_bin) %>%
  summarise(count = n()) %>%
  mutate(prop = count / sum(count))

ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
  geom_tile(aes(fill = count), color = "white") +
  scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
  labs(x = "entropy", y = "representation") +
  theme_few() +
  theme(
    aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  facet_wrap(~treatment #+ direction
            )

nCritters_entropy_heatmap_new <- d.allmsg %>%
    filter(!treatment== "unidirectional")%>%
  group_by(treatment, direction, nCrittersGame_bin, entropy_bin) %>%
  summarise(count = n()) %>%
  mutate(prop = count / sum(count))

ggplot(nCritters_entropy_heatmap_new, aes(x = entropy_bin, y = nCrittersGame_bin)) +
  geom_tile(aes(fill = count), color = "white") +
  scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
  labs(x = "Entropy", y = "nCrittersGame") +
  theme_few() +
  theme(
    aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  facet_wrap(~treatment #+ direction
            )

```

# game count for preregistered dataset

```{r}
heatmap_test <- d.allmsg_exp1 %>%
    filter(!treatment== "unidirectional")%>%
  group_by(treatment, direction, nCrittersGame_bin, representation_bin) %>%
  summarise(count = n(), .groups = "drop") %>%
  mutate(prop = count / sum(count, na.rm = TRUE))

ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
  geom_tile(aes(fill = count), color = "white") +
  scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
  labs(x = "Representation", y = "nCrittersGame") +
  theme_few() +
  theme(
    aspect.ratio = 1,
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  facet_wrap(~treatment #+ direction
             )
heatmap_test <- d.allmsg_exp1 %>%
    filter(!treatment== "unidirectional")%>%
  group_by(treatment, direction, entropy_bin, representation_bin) %>%
  summarise(count = n()) %>%
  mutate(prop = count / sum(count))

ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
  geom_tile(aes(fill = count), color = "white") +
  scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
  labs(x = "entropy", y = "representation") +
  theme_few() +
  theme(
    aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  facet_wrap(~treatment #+ direction
            )

nCritters_entropy_heatmap_new <- d.allmsg_exp1 %>%
    filter(!treatment== "unidirectional")%>%
  group_by(treatment, direction, nCrittersGame_bin, entropy_bin) %>%
  summarise(count = n()) %>%
  mutate(prop = count / sum(count))

ggplot(nCritters_entropy_heatmap_new, aes(x = entropy_bin, y = nCrittersGame_bin)) +
  geom_tile(aes(fill = count), color = "white") +
  scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
  labs(x = "Entropy", y = "nCrittersGame") +
  theme_few() +
  theme(
    aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  facet_wrap(~treatment #+ direction
            )
```

# combined game count

```{r}


heatmap_test <- combined_df %>%
    filter(!treatment == "unidirectional") %>%
    group_by(treatment, direction, nCrittersGame_bin, representation_bin) %>%
    summarise(count = n(), .groups = "drop") %>%
    mutate(prop = count / sum(count, na.rm = TRUE))

ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
  geom_tile(aes(fill = count), color = "white") +
  scale_fill_gradient(
  name = "Count of Games",
 low = "lightgreen",  high = "darkblue",
  trans = "log",
  breaks = scales::trans_breaks("log10", function(x) 10^x),
  labels = function(x) formatC(x, format = "f", digits = 0, big.mark = ",")
) +
  labs(x = "Representation", y = "nCrittersGame") +
  theme_few() +
  theme(
    aspect.ratio = 1,
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  facet_wrap(~treatment)

heatmap_test <- combined_df %>%
    filter(!treatment == "unidirectional") %>%
    group_by(treatment, direction, entropy_bin, representation_bin) %>%
    summarise(count = n(), .groups = "drop") %>%
    mutate(prop = count / sum(count))

ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
  geom_tile(aes(fill = count), color = "white") +
  scale_fill_gradient(
  name = "Count of Games",
 low = "lightgreen",  high = "darkblue",
  trans = "log",
  breaks = scales::trans_breaks("log10", function(x) 10^x),
  labels = function(x) formatC(x, format = "f", digits = 0, big.mark = ",")
) +
  labs(x = "Entropy", y = "Representation") +
  theme_few() +
  theme(
    aspect.ratio = 1, 
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  facet_wrap(~treatment)

nCritters_entropy_heatmap_new <- combined_df %>%
    filter(!treatment == "unidirectional") %>%
    group_by(treatment, direction, nCrittersGame_bin, entropy_bin) %>%
    summarise(count = n(), .groups = "drop") %>%
    mutate(prop = count / sum(count))

ggplot(nCritters_entropy_heatmap_new, aes(x = entropy_bin, y = nCrittersGame_bin)) +
  geom_tile(aes(fill = count), color = "white") +
  scale_fill_gradient(
  name = "Count of Games",
  low = "lightgreen",
  high = "darkblue",
  trans = "log",
  breaks = scales::trans_breaks("log10", function(x) 10^x),
  labels = function(x) formatC(x, format = "f", digits = 0, big.mark = ",")
) +
  labs(x = "Entropy", y = "nCrittersGame") +
  theme_few() +
  theme(
    aspect.ratio = 1, 
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  facet_wrap(~treatment)

```

# combined s count error

```{r}
combined_df2 <- bind_rows(d.allmsg2, d.allmsg_exp1_2) 
combined_df2 <- combined_df2 %>% 
mutate(s_bin = cut(s_count, breaks = seq(min(s_count), max(s_count), length.out = 3), include.lowest = TRUE)) %>% 
  filter(!treatment == "unidirectional")

ggplot(combined_df2, aes(x = round, y = error, color = s_bin)) +
  geom_smooth(method = 'lm',formula = y~poly(x,2)) +
stat_summary(fun = mean, geom = "point")+
  theme_minimal()

summary(lmer(error ~ s_count*round + (1 | gameID), data = combined_df2))

```

```{r}
d.all_minmax <- combined_df2 %>%  mutate(
    entropy_median = median(entropy_new),
    representation_median = median(representation),
    nCrittersGame_median = median(totalCritters)
  ) %>%
  mutate(
    entropy_minmax = ifelse(entropy_new <= entropy_median, "H_etpy", "E_etpy"),
    representation_minmax = ifelse(representation <= representation_median, "E_rep", "H_rep"),
    nCrittersGame_minmax = ifelse(totalCritters <= nCrittersGame_median, "H_crits", "E_crits"),
    group = paste(entropy_minmax, representation_minmax, nCrittersGame_minmax, sep = "\n")
  ) %>%
  group_by(gameID, s_bin) %>%
  mutate(errorAvg = mean(error, na.rm = TRUE)) %>%
  ungroup()

print(unique(d.all_minmax %>% select(entropy_median, representation_median, nCrittersGame_median)))

lm_model <- lm(errorAvg ~ group, data = d.all_minmax)

# Calculate center lines and their distances
group_distances <- d.all_minmax %>%
  filter(group !='E_etpy\nH_rep\nE_crits') %>%
  group_by(group, s_bin) %>% 
  summarise(median_error = median(errorAvg)) %>%
  pivot_wider(names_from = s_bin, values_from = median_error) %>%
  mutate(distance = abs(`(19.5,39]` - `[0,19.5]`)) %>%
  arrange(distance)

# Calculate game counts per group and s_count condition
counts <- d.all_minmax %>%
  filter(group !='E_etpy\nH_rep\nE_crits') %>%
  group_by(group, s_bin) %>%
  summarise(nGames = n()) %>%
  pivot_wider(names_from = s_bin, values_from = nGames, names_prefix = "nGames_")

# Calculate center lines for group ordering
center_lines <- d.all_minmax %>%
  group_by(group, s_bin) %>%
  filter(group !='E_etpy\nH_rep\nE_crits')%>%
  summarise(center_line = median(errorAvg)) %>%
  pivot_wider(names_from = s_bin, values_from = center_line) %>%
  mutate(center_line_distance =abs(`(19.5,39]` - `[0,19.5]`))

# Reorder groups based on center line distance
d.all_minmax2 <- d.all_minmax %>%
  mutate(group = factor(group, levels = center_lines %>%
                          arrange(center_line_distance) %>%
                          pull(group))) %>% 
  filter(group !='E_etpy\nH_rep\nE_crits') %>% 
  droplevels()

d <- d.all_minmax2 %>%
  ggplot(aes(x = group, y = errorAvg, color = as.factor(s_bin), fill = as.factor(s_bin))) +  
  scale_color_brewer(palette = 'Accent') +
  scale_fill_brewer(palette = 'Accent') + 
  geom_boxplot(alpha = 0.5) +
  labs(x = "", y = "Error", color = "s_bin", fill = "s_bin") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust = 1),
        legend.position = "top",
        panel.background = element_rect(fill = NA, color = "black"),
        panel.grid = element_blank())
d
```

# s count game representation

```{r}
combined_df_final_rounds <- bind_rows(d.allmsg2[d.allmsg2$round == 8, ], 
                          d.allmsg_exp1_2[d.allmsg_exp1_2$round == 12, ])

heatmap_test <- combined_df_final_rounds%>%
  group_by(representation_bin, nCrittersGame_bin, s_bin) %>%
  summarize(errorAvg = mean(error, na.rm = TRUE)) 


ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
  geom_tile(aes(fill = errorAvg), color = "white") +  # Fill by error
  scale_fill_gradient(name = "Error", low = "lightblue", high = "darkblue") +  # Adjust scale
  labs(x = "Representation", y = "nCrittersGame") +
  theme_few() +
  theme(
    aspect.ratio = 1,
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  facet_wrap(~s_bin) 

heatmap_test_2 <- combined_df_final_rounds%>%
  group_by(entropy_bin, nCrittersGame_bin, s_bin) %>%
  summarize(errorAvg = mean(error, na.rm = TRUE))

ggplot(heatmap_test_2, aes(x = entropy_bin, y = nCrittersGame_bin)) +
  geom_tile(aes(fill = errorAvg), color = "white") +  # Fill by error
  scale_fill_gradient(name = "Error", low = "lightblue", high = "darkblue") +  # Adjust scale
  labs(x = "Entropy", y = "nCrittersGame") +
  theme_few() +
  theme(
    aspect.ratio = 1,
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  facet_wrap(~s_bin) 

heatmap_test_3 <- combined_df_final_rounds%>%
  group_by(representation_bin, entropy_bin, s_bin) %>%
  summarize(errorAvg = mean(error, na.rm = TRUE))

ggplot(heatmap_test_3, aes(x = entropy_bin, y = representation_bin)) +
  geom_tile(aes(fill = errorAvg), color = "white") +  # Fill by error
  scale_fill_gradient(name = "Error", low = "lightblue", high = "darkblue") +  # Adjust scale
  labs(x = "Entropy", y = "Representation") +
  theme_few() +
  theme(
    aspect.ratio = 1,
    
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  facet_wrap(~s_bin)
```

```{r}
combined_s_participants <- combined_df2 %>%  
  group_by(gameID) %>% 
  mutate(s_player_count = n_distinct(sender.id[str_detect(coding, "s")])) %>%
  ungroup() %>% 
  mutate(s_player_count = as.factor(s_player_count)) %>% 
  filter(treatment != "unidirectional")

ggplot(combined_s_participants, aes(x = round, y = error, color = s_player_count)) +
  geom_smooth(method = 'lm', 
             # formula = y ~ poly(x, 2)
              ) +
  stat_summary(fun = mean, geom = "point") +
  theme_minimal() +
  facet_wrap(~s_bin)

```

```{r}
combined_df2 <- combined_df2 %>%  
  group_by(gameID) %>% 
  mutate(s_player_count = n_distinct(sender.id[str_detect(coding, "s")])) %>%
  ungroup() %>% 
  mutate(s_player_count_group = ifelse(s_player_count <= 1, "0-1", "2-4")) %>% 
  filter(treatment != "unidirectional")

ggplot(combined_df2, aes(x = round, y = error, color = s_player_count_group)) +
  geom_smooth(method = 'lm', 
             # formula = y ~ poly(x, 2)
              ) +
  stat_summary(fun = mean, geom = "point") +
  theme_minimal()


```

```{r}
model1 <-  lmerTest::lmer(error ~ s_player_count*round + (1 | gameID), data = combined_s_participants)

summary(model1)

model2 <-  lmerTest::lmer(error ~ s_player_count_group*round + (1 | gameID), data = combined_df2)

summary(model2)
```

```{r}
combined_df2 %>%
  ggplot(aes(x = as.numeric(error))) +
    geom_histogram(binwidth =1) +
    facet_wrap(~ direction, scales = "free") +
    #xlim(0,100) +
    labs(title = "Distribution of mleEstimate for each treatmentName") +
  theme_few() #+facet_wrap(~treatment)

```

# grouped

```{r}

d.all_minmax <- d.all%>% mutate(
    entropy_median = median(entropy),
    representation_median = median(representation),
    nCrittersGame_median = median(nCrittersGame)
  ) %>%
  mutate(
    entropy_minmax = ifelse(entropy <= entropy_median, "H_etpy", "E_etpy"),
    representation_minmax = ifelse(representation <= representation_median, "E_rep", "H_rep"),
    nCrittersGame_minmax = ifelse(nCrittersGame <= nCrittersGame_median, "H_crits", "E_crits"),
    group = paste(entropy_minmax, representation_minmax, nCrittersGame_minmax, sep = "\n")
  ) %>%
 #group_by(representation_bin, entropy_bin, nCrittersGame_bin, treatment) %>%
  group_by(gameID, treatment)%>%
  mutate(errorAvg = mean(error, na.rm = TRUE)) %>%
  ungroup() # %>%
  #filter(idx == 8)

#print(unique(d.all_minmax %>% select(entropy_median, representation_median, nCrittersGame_median)))

lm_model <- lm(errorAvg ~ group, data = d.all_minmax)

# Calculate center lines and their distances
group_distances <- d.all_minmax %>%
  filter(group !='E_etpy\nH_rep\nE_crits') %>%
  group_by(group, treatment) %>% 
  summarise(median_error = median(errorAvg)) %>%
  pivot_wider(names_from = treatment, values_from = median_error) %>%
  mutate(distance = abs(interactive - slider)) %>%
  arrange(distance)

# Calculate game counts per group and treatment
counts <- d.all_minmax %>%
  filter(group !='E_etpy\nH_rep\nE_crits') %>%
  group_by(group, treatment) %>%
  summarise(nGames = n()) %>%
  pivot_wider(names_from = treatment, values_from = nGames, names_prefix = "nGames_")

# Calculate center lines for group ordering
center_lines <- d.all_minmax %>%
  group_by(group, treatment) %>%
  filter(group !='E_etpy\nH_rep\nE_crits')%>%
  summarise(center_line = median(errorAvg)) %>%
  pivot_wider(names_from = treatment, values_from = center_line) %>%
  mutate(center_line_distance = abs(interactive - slider))

# Reorder groups based on center line distance
d.all_minmax2 <- d.all_minmax %>%
  mutate(group = factor(group, levels = center_lines %>%
                          arrange(center_line_distance) %>%
                          pull(group))) %>% filter(group !='E_etpy\nH_rep\nE_crits') %>% droplevels()

d <-d.all_minmax2 %>%
  ggplot(aes(x = group, y = errorAvg, color = treatment, fill = treatment)) +  
   scale_color_brewer(palette = 'Accent') +
  scale_fill_brewer(palette = 'Accent') + 
  geom_boxplot(alpha = 0.5) +
  #geom_text(data = counts, 
           # aes(x = group, y = Inf, 
                #label = paste0("I: ", nGames_interactive, 
                              # "\nS: ", nGames_slider)),
           # vjust = 1.5, inherit.aes = FALSE) +
  labs(x = "", y = "Error") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust = 1),
        legend.position = "top",
        panel.background = element_rect(fill = NA, color = "black"),
        panel.grid = element_blank())
d
```

# grouped but s_count

```{r}

d.all_minmax <- d.all%>% mutate(
    entropy_median = median(entropy),
    representation_median = median(representation),
    nCrittersGame_median = median(nCrittersGame)
  ) %>%
  mutate(
    entropy_minmax = ifelse(entropy <= entropy_median, "H_etpy", "E_etpy"),
    representation_minmax = ifelse(representation <= representation_median, "E_rep", "H_rep"),
    nCrittersGame_minmax = ifelse(nCrittersGame <= nCrittersGame_median, "H_crits", "E_crits"),
    group = paste(entropy_minmax, representation_minmax, nCrittersGame_minmax, sep = "\n")
  ) %>%
 #group_by(representation_bin, entropy_bin, nCrittersGame_bin, treatment) %>%
  group_by(gameID, treatment)%>%
  mutate(errorAvg = mean(error, na.rm = TRUE)) %>%
  ungroup() # %>%
  #filter(idx == 8)

d.all_minmax <-d.all_minmax %>%
  left_join(combined_df2%>% select(round, recipient, sender.id, gameID, s_count),
            by = c("gameID", "recipient","playerID" = "sender.id", "idx" = "round"))


#print(unique(d.all_minmax %>% select(entropy_median, representation_median, nCrittersGame_median)))

lm_model <- lm(errorAvg ~ group, data = d.all_minmax)

# Calculate center lines and their distances
group_distances <- d.all_minmax %>%
  filter(group !='E_etpy\nH_rep\nE_crits') %>%
  group_by(group, treatment) %>% 
  summarise(median_error = median(errorAvg)) %>%
  pivot_wider(names_from = treatment, values_from = median_error) %>%
  mutate(distance = abs(interactive - slider)) %>%
  arrange(distance)

# Calculate game counts per group and treatment
counts <- d.all_minmax %>%
  filter(group !='E_etpy\nH_rep\nE_crits') %>%
  group_by(group, treatment) %>%
  summarise(nGames = n()) %>%
  pivot_wider(names_from = treatment, values_from = nGames, names_prefix = "nGames_")

# Calculate center lines for group ordering
center_lines <- d.all_minmax %>%
  group_by(group, treatment) %>%
  filter(group !='E_etpy\nH_rep\nE_crits')%>%
  summarise(center_line = median(errorAvg)) %>%
  pivot_wider(names_from = treatment, values_from = center_line) %>%
  mutate(center_line_distance = abs(interactive - slider))

# Reorder groups based on center line distance
d.all_minmax2 <- d.all_minmax %>%
  mutate(group = factor(group, levels = center_lines %>%
                          arrange(center_line_distance) %>%
                          pull(group))) %>% filter(group !='E_etpy\nH_rep\nE_crits') %>% droplevels()
d.sum <- d.all_minmax2 %>%
  filter(treatment == 'interactive') %>%
  group_by(gameID, group) %>%
  summarize(
    s_count_total = sum(s_count, na.rm = TRUE),
    error_mean = mean(error, na.rm = TRUE),
    .groups = "drop"
  )

d.sum %>%
  mutate(s_bin = case_when(
    s_count_total > 5 ~ "over 5",
    TRUE ~ "under 5"
  )) %>%
  ggplot(aes(x = group, y = error_mean, fill = s_bin)) +  
  geom_boxplot(alpha = 0.5, position = position_dodge(width = 0.8)) +
  labs(x = "", y = "Error", fill = "S_count bin") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust = 1),
        legend.position = "top",
        panel.background = element_rect(fill = NA, color = "black"),
        panel.grid = element_blank())

```

# combined data

```{r}

d.all_minmax <- combined_df2%>% mutate(
    entropy_median = median(entropy_new),
    representation_median = median(representation),
    nCrittersGame_median = median(totalCritters)
  ) %>%
  mutate(
    entropy_minmax = ifelse(entropy_new <= entropy_median, "H_etpy", "E_etpy"),
    representation_minmax = ifelse(representation <= representation_median, "E_rep", "H_rep"),
    nCrittersGame_minmax = ifelse(totalCritters <= nCrittersGame_median, "H_crits", "E_crits"),
    group = paste(entropy_minmax, representation_minmax, nCrittersGame_minmax, sep = "\n")
  ) %>%
 #group_by(representation_bin, entropy_bin, nCrittersGame_bin, treatment) %>%
  group_by(gameID, treatment)%>%
  mutate(errorAvg = mean(error, na.rm = TRUE)) %>%
  ungroup() # %>%
  #filter(idx == 8)



#print(unique(d.all_minmax %>% select(entropy_median, representation_median, nCrittersGame_median)))

lm_model <- lm(errorAvg ~ group, data = d.all_minmax)


# Calculate game counts per group and treatment
counts <- d.all_minmax %>%
  filter(group !='E_etpy\nH_rep\nE_crits') %>%
  group_by(group, treatment) %>%
  summarise(nGames = n()) %>%
  pivot_wider(names_from = treatment, values_from = nGames, names_prefix = "nGames_")


# Reorder groups based on center line distance
d.all_minmax2 <- d.all_minmax 

d.sum <- d.all_minmax2 %>%
  filter(treatment == 'interactive') %>%
  group_by(gameID, group) %>%
  summarize(
    s_count_total = sum(s_count, na.rm = TRUE),
    error_mean = mean(error, na.rm = TRUE),
    .groups = "drop"
  )

d.sum %>%
  mutate(s_bin = case_when(
    s_count_total > 5 ~ "over 5",
    TRUE ~ "under 5"
  )) %>%
  ggplot(aes(x = group, y = error_mean, fill = s_bin)) +  
  geom_boxplot(alpha = 0.5, position = position_dodge(width = 0.8)) +
  labs(x = "", y = "Error", fill = "S_count bin") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust = 1),
        legend.position = "top",
        panel.background = element_rect(fill = NA, color = "black"),
        panel.grid = element_blank())

```

```{r}
exclude_anchors <- c(0, 50, 100)

d.all_unmoored <- d.all %>%
  filter(!Reduce(`|`, lapply(exclude_anchors, function(x) between(guess, x - 0, x + 0))))

combined_df2_unmoored <- combined_df2 %>%  filter(!Reduce(`|`, lapply(exclude_anchors, function(x) between(guess, x - 0, x + 0))))

combined_df2_unmoored %>%
  ggplot(aes(x = as.numeric(error))) +
    geom_histogram(binwidth =1) +
    facet_wrap(~ direction, scales = "free") +
    #xlim(0,100) +
    labs(title = "Distribution of mleEstimate for each treatmentName") +
  theme_few() #+facet_wrap(~treatment)
```

```{r}

d.all_minmax <- d.all_unmoored%>% mutate(
    entropy_median = median(entropy),
    representation_median = median(representation),
    nCrittersGame_median = median(nCrittersGame)
  ) %>%
  mutate(
    entropy_minmax = ifelse(entropy <= entropy_median, "H_etpy", "E_etpy"),
    representation_minmax = ifelse(representation <= representation_median, "E_rep", "H_rep"),
    nCrittersGame_minmax = ifelse(nCrittersGame <= nCrittersGame_median, "H_crits", "E_crits"),
    group = paste(entropy_minmax, representation_minmax, nCrittersGame_minmax, sep = "\n")
  ) %>%
 #group_by(representation_bin, entropy_bin, nCrittersGame_bin, treatment) %>%
  group_by(gameID, treatment)%>%
  mutate(errorAvg = mean(error, na.rm = TRUE)) %>%
  ungroup() # %>%
  #filter(idx == 8)

#print(unique(d.all_minmax %>% select(entropy_median, representation_median, nCrittersGame_median)))

lm_model <- lm(errorAvg ~ group, data = d.all_minmax)

# Calculate center lines and their distances
group_distances <- d.all_minmax %>%
  filter(group !='E_etpy\nH_rep\nE_crits') %>%
  group_by(group, treatment) %>% 
  summarise(median_error = median(errorAvg)) %>%
  pivot_wider(names_from = treatment, values_from = median_error) %>%
  mutate(distance = abs(interactive - slider)) %>%
  arrange(distance)

# Calculate game counts per group and treatment
counts <- d.all_minmax %>%
  filter(group !='E_etpy\nH_rep\nE_crits') %>%
  group_by(group, treatment) %>%
  summarise(nGames = n()) %>%
  pivot_wider(names_from = treatment, values_from = nGames, names_prefix = "nGames_")

# Calculate center lines for group ordering
center_lines <- d.all_minmax %>%
  group_by(group, treatment) %>%
  filter(group !='E_etpy\nH_rep\nE_crits')%>%
  summarise(center_line = median(errorAvg)) %>%
  pivot_wider(names_from = treatment, values_from = center_line) %>%
  mutate(center_line_distance = abs(interactive - slider))

# Reorder groups based on center line distance
d.all_minmax2 <- d.all_minmax %>%
  mutate(group = factor(group, levels = center_lines %>%
                          arrange(center_line_distance) %>%
                          pull(group))) %>% filter(group !='E_etpy\nH_rep\nE_crits') %>% droplevels()

d <-d.all_minmax2 %>%
  ggplot(aes(x = group, y = errorAvg, color = treatment, fill = treatment)) +  
   scale_color_brewer(palette = 'Accent') +
  scale_fill_brewer(palette = 'Accent') + 
  geom_boxplot(alpha = 0.5) +
  #geom_text(data = counts, 
           # aes(x = group, y = Inf, 
                #label = paste0("I: ", nGames_interactive, 
                              # "\nS: ", nGames_slider)),
           # vjust = 1.5, inherit.aes = FALSE) +
  labs(x = "", y = "Error") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust = 1),
        legend.position = "top",
        panel.background = element_rect(fill = NA, color = "black"),
        panel.grid = element_blank())
d

```

```{r}

d.all_minmax <- d.all_unmoored%>% mutate(
    entropy_median = median(entropy),
    representation_median = median(representation),
    nCrittersGame_median = median(nCrittersGame)
  ) %>%
  mutate(
    entropy_minmax = ifelse(entropy <= entropy_median, "H_etpy", "E_etpy"),
    representation_minmax = ifelse(representation <= representation_median, "E_rep", "H_rep"),
    nCrittersGame_minmax = ifelse(nCrittersGame <= nCrittersGame_median, "H_crits", "E_crits"),
    group = paste(entropy_minmax, representation_minmax, nCrittersGame_minmax, sep = "\n")
  ) %>%
 #group_by(representation_bin, entropy_bin, nCrittersGame_bin, treatment) %>%
  group_by(gameID, treatment)%>%
  mutate(errorAvg = mean(error, na.rm = TRUE)) %>%
  ungroup() # %>%
  #filter(idx == 8)

d.all_minmax <-d.all_minmax %>%
  left_join(combined_df2%>% select(round, recipient, sender.id, gameID, s_count),
            by = c("gameID", "recipient","playerID" = "sender.id", "idx" = "round"))


#print(unique(d.all_minmax %>% select(entropy_median, representation_median, nCrittersGame_median)))

lm_model <- lm(errorAvg ~ group, data = d.all_minmax)

# Calculate center lines and their distances
group_distances <- d.all_minmax %>%
  filter(group !='E_etpy\nH_rep\nE_crits') %>%
  group_by(group, treatment) %>% 
  summarise(median_error = median(errorAvg)) %>%
  pivot_wider(names_from = treatment, values_from = median_error) %>%
  mutate(distance = abs(interactive - slider)) %>%
  arrange(distance)

# Calculate game counts per group and treatment
counts <- d.all_minmax %>%
  filter(group !='E_etpy\nH_rep\nE_crits') %>%
  group_by(group, treatment) %>%
  summarise(nGames = n()) %>%
  pivot_wider(names_from = treatment, values_from = nGames, names_prefix = "nGames_")

# Calculate center lines for group ordering
center_lines <- d.all_minmax %>%
  group_by(group, treatment) %>%
  filter(group !='E_etpy\nH_rep\nE_crits')%>%
  summarise(center_line = median(errorAvg)) %>%
  pivot_wider(names_from = treatment, values_from = center_line) %>%
  mutate(center_line_distance = abs(interactive - slider))

# Reorder groups based on center line distance
d.all_minmax2 <- d.all_minmax %>%
  mutate(group = factor(group, levels = center_lines %>%
                          arrange(center_line_distance) %>%
                          pull(group))) %>% filter(group !='E_etpy\nH_rep\nE_crits') %>% droplevels()
d.sum <- d.all_minmax2 %>%
  filter(treatment == 'interactive') %>%
  filter(idx == '8') %>%
  group_by(gameID, group) %>%
  summarize(
    s_count_total = sum(s_count, na.rm = TRUE),
    error_mean = mean(error, na.rm = TRUE),
    .groups = "drop"
  ) #%>%
#mutate(s_bin = cut(s_count_total, breaks = seq(min(s_count_total), max(s_count_total), length.out = 3), include.lowest = TRUE))

d.sum %>%
  mutate(s_bin = case_when(
    s_count_total > 5 ~ "over 5",
   TRUE ~ "under 5"
  )) %>%
  ggplot(aes(x = group, y = error_mean, fill = s_bin)) +  
  geom_boxplot(alpha = 0.5, position = position_dodge(width = 0.8)) +
  labs(x = "", y = "Error", fill = "S_count bin") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust = 1),
        legend.position = "top",
        panel.background = element_rect(fill = NA, color = "black"),
        panel.grid = element_blank())

```

```{r}

d.all_minmax <- combined_df2_unmoored%>% mutate(
    entropy_median = median(entropy_new),
    representation_median = median(representation),
    nCrittersGame_median = median(totalCritters)
  ) %>%
  mutate(
    entropy_minmax = ifelse(entropy_new <= entropy_median, "H_etpy", "E_etpy"),
    representation_minmax = ifelse(representation <= representation_median, "E_rep", "H_rep"),
    nCrittersGame_minmax = ifelse(totalCritters <= nCrittersGame_median, "H_crits", "E_crits"),
    group = paste(entropy_minmax, representation_minmax, nCrittersGame_minmax, sep = "\n")
  ) %>%
 #group_by(representation_bin, entropy_bin, nCrittersGame_bin, treatment) %>%
  group_by(gameID, treatment)%>%
  mutate(errorAvg = mean(error, na.rm = TRUE)) %>%
  ungroup() # %>%
  #filter(idx == 8)



#print(unique(d.all_minmax %>% select(entropy_median, representation_median, nCrittersGame_median)))

lm_model <- lm(errorAvg ~ group, data = d.all_minmax)


# Calculate game counts per group and treatment
counts <- d.all_minmax %>%
  filter(group !='E_etpy\nH_rep\nE_crits') %>%
  group_by(group, treatment) %>%
  summarise(nGames = n()) %>%
  pivot_wider(names_from = treatment, values_from = nGames, names_prefix = "nGames_")


# Reorder groups based on center line distance
d.all_minmax2 <- d.all_minmax 

d.sum <- d.all_minmax2 %>%
  filter(treatment == 'interactive') %>% 
  filter(round == '8')%>%
  group_by(gameID, group) %>%
  summarize(
    s_count_total = sum(s_count, na.rm = TRUE),
    error_mean = mean(error, na.rm = TRUE),
    .groups = "drop"
  )%>%
mutate(s_bin = cut(s_count_total, breaks = seq(min(s_count_total), max(s_count_total), length.out = 3), include.lowest = TRUE))

d.sum %>%
 # mutate(s_bin = case_when(
 #   s_count_total > 5 ~ "over 5",
#    TRUE ~ "under 5"
#  )) %>%
  ggplot(aes(x = group, y = error_mean, fill = s_bin)) +  
  geom_boxplot(alpha = 0.5, position = position_dodge(width = 0.8)) +
  labs(x = "", y = "Error", fill = "S_count bin") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust = 1),
        legend.position = "top",
        panel.background = element_rect(fill = NA, color = "black"),
        panel.grid = element_blank())

```
