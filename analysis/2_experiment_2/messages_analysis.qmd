---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
library(plotly)


theme_set(theme_few())
```

## Read in data

```{r}

d.allmsg <- read_csv(here('analysis/2_experiment_2/coded.csv'))%>%
  rename_with(~ gsub("\\.x$", "", .x), ends_with(".x")) %>%
  select(-ends_with(".y"))

```

```{r}
#used this to correct accidental miscodes as pn, as that's essentially the default msg
compare.msg <- d.allmsg %>%
  filter(str_detect(coding, "pn"), !str_detect(coding, "[sb]"), round != 1) %>%
  mutate(extracted = str_extract_all(text, "\\d+")) %>%
  filter(map_lgl(extracted, ~ length(.x) == 2)) %>%
  mutate(
    num1 = as.numeric(map_chr(extracted, 1)),
    num2 = as.numeric(map_chr(extracted, 2))
  ) %>%
  filter(
    !((num1 == nRabbits & num2 == nSquirrels) | (num1 == nSquirrels & num2 == nRabbits)), 
  ) %>%
  select(-extracted, -sender.name, -recipient, -treatment, -direction, -guess, -confidence)

compare.msg <- compare.msg %>%
  group_by(gameID) %>%
  filter(n_distinct(sender.id) > 2) %>%
  ungroup()
```

```{r}
summary_data <- d.allmsg %>%
  filter(!coding == 'o') %>%
  group_by(gameID) %>%
  summarize(
    avg_error = mean(error[round == 8], na.rm = TRUE),
    pn_count = sum(str_count(coding, "pn")),
    sn_count = sum(str_count(coding, "sn")),
    pb_count = sum(str_count(coding, "pb")),
    sb_count = sum(str_count(coding, "sb"))
  ) 


summary_data_long <- summary_data %>%
  select(gameID, avg_error, pn_count, sn_count, pb_count, sb_count) %>%
  pivot_longer(cols = c(pn_count, sn_count, pb_count, sb_count), 
               names_to = "message_type", values_to = "count")

summary_data_long$decile <- cut(summary_data_long$avg_error, 
                                breaks = quantile(summary_data_long$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE), 
                                include.lowest = TRUE, labels = FALSE)

summary_data_long <- summary_data_long %>%
  group_by(decile)%>% 
  mutate(
    total_count = sum(count)) %>% ungroup() %>%
  mutate(
    proportion = count / total_count
  ) 

# Plotting
ggplot(summary_data_long, aes(x = factor(decile), y = proportion, fill = message_type)) +
  geom_bar(stat = "identity", position = "stack") +
  theme_minimal() +
  scale_fill_brewer(palette = 'Accent', 
                    labels = c("pn_count" = "personal number", "sn_count" = "social number",
                               "pb_count" = "personal belief", "sb_count" = "social belief")) +
  labs(title = "",
       x = "error (binned)",
       y = "proportion",
       fill = "message type") +
  theme(aspect.ratio = 1, legend.position = "top") +
  guides(fill = guide_legend(nrow = 2))

```

```{r}
d.allmsg2 <- d.allmsg %>%
  group_by(gameID, sender.id) %>%
  mutate(nCrittersGame = sum(nCritters)) %>%
  ungroup()

d.allmsg2 <- d.allmsg2 %>% 
  mutate(
    entropy_minmax = ifelse(entropy <= median(entropy), "H_etpy", "E_etpy"),
    representation_minmax = ifelse(representation <= median(representation), "E_rep", "H_rep"),
    nCrittersGame_minmax = ifelse(nCrittersGame <= median(nCrittersGame), "H_crits", "E_crits"),
    group = paste(entropy_minmax, representation_minmax, nCrittersGame_minmax, sep = "\n")
  ) %>%
  group_by(representation_bin, entropy_bin, nCrittersGame_bin, treatment) %>%
  mutate(errorAvg = mean(error, na.rm = TRUE)) %>% 
  ungroup() %>% 
  filter(round == 8)

summary_data <- d.allmsg2 %>%
  group_by(gameID, group) %>%
  summarize(
    avg_error = mean(error, na.rm = TRUE),
    pn_count = sum(str_count(coding, "pn")),
    sn_count = sum(str_count(coding, "sn")),
    pb_count = sum(str_count(coding, "pb")),
    sb_count = sum(str_count(coding, "sb"))
  ) %>% ungroup() %>%
  mutate(
    total_count = pn_count + sn_count + pb_count + sb_count,
    pn_prop = pn_count / total_count,
    sn_prop = sn_count / total_count,
    pb_prop = pb_count / total_count,
    sb_prop = sb_count / total_count
  )

# Summarize the data for proportions by group
summary_data_long <- summary_data %>%
  select(group, pn_prop, sn_prop, pb_prop, sb_prop) %>%
  pivot_longer(cols = c(pn_prop, sn_prop, pb_prop, sb_prop), 
               names_to = "message_type", values_to = "proportion")

# Remove rows with NA values in 'proportion' or 'group'
summary_data_long <- summary_data_long %>%
  filter(!is.na(proportion) & !is.na(group))

# Normalize proportions to ensure they sum to 1 within each group
summary_data_long <- summary_data_long %>%
  group_by(group) %>%
  mutate(proportion = proportion / sum(proportion)) %>%
  ungroup()

# Set the custom order for 'group'
group_order <- c( "H_etpy\nE_rep\nH_crits", "H_etpy\nE_rep\nE_crits",
                 "E_etpy\nE_rep\nE_crits", "E_etpy\nE_rep\nH_crits", "H_etpy\nH_rep\nE_crits",
                 "E_etpy\nH_rep\nH_crits", "H_etpy\nH_rep\nH_crits", "E_etpy\nH_rep\nE_crits")

summary_data_long$group <- factor(summary_data_long$group, levels = group_order)

ggplot(summary_data_long, aes(x = group, y = proportion, fill = message_type)) +
 geom_bar(stat = "identity", position = "stack") +
 theme_few() +
 labs(title = "Proportion of Message Types by Group",
      x = "Group", 
      y = "Proportion",
      fill = "Message Type") +
 theme(legend.position = 'top',
       axis.text.x = element_text(angle = 0, hjust = 1, vjust = 1),
       plot.margin = margin(b = 20, l = 20, r = 20, t = 20)) +
 scale_x_discrete(expand = c(0.02, 0.02)) +
 theme(aspect.ratio = 0.5) # Made plot wider by reducing aspect ratio
```

ss
