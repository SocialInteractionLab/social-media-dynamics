---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r, include=FALSE}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
library(plotly)


theme_set(theme_few())
```

## Read in data prereg (exp 2)

```{r,include=FALSE}

d.allmsg <- read_csv(here('analysis/2_experiment_2/message_data/coded.csv'))%>%
  rename_with(~ gsub("\\.x$", "", .x), ends_with(".x")) %>%
  select(-ends_with(".y")) 

d.all <- read_csv(here('analysis/2_experiment_2/exp2_clean_data_jan17.csv'))



d.all <- d.all %>%
  separate(treatmentName.x, into = c("direction", "treatment"), sep = "_")


d.all <- d.all %>%
  mutate(error = if_else(direction == "RS", abs((100-guess) - (mleGame*100)), abs(guess - (mleGame*100))))

persistentnoClick <- data.frame(gameID = character(), playerID = character(), stringsAsFactors = FALSE)

for (i in 1:7) {
  idx_pair <- c(i + 1, i + 2)
    filtered_players <- d.all %>%
    group_by(gameID, playerID) %>%
    filter(all(is.na(guess[idx_pair]))) %>%
    select(gameID, playerID) %>%
    distinct()
    persistentnoClick <- bind_rows(persistentnoClick, filtered_players)
}
persistentnoClick <- distinct(persistentnoClick)

games_with_4_players <- d.all %>%
  group_by(gameID) %>%
  summarise(unique_players = n_distinct(playerID)) %>% 
  filter(unique_players == 4)

gameIDs_to_remove <- persistentnoClick %>%
  count(gameID) %>%
  filter(n >= 2) %>%
  pull(gameID)

d.all <- d.all %>%
  filter(!(gameID %in% gameIDs_to_remove)) %>% 
  filter(gameID %in% games_with_4_players$gameID)

d.allnovel <-d.all %>%
  filter(is.na(designatedGame))%>%
  distinct(gameID)

d.allgame <- d.all %>%
   distinct(gameID, .keep_all = TRUE)

d.all <- d.all %>%
  mutate(
    nCrittersGame_bin = str_remove_all(nCrittersGame_bin, "[\\[\\]()]"),
    entropy_bin = str_remove_all(entropy_bin, "[\\[\\]()]"),
    representation_bin = str_remove_all(representation_bin, "[\\[\\]()]")
  )

d.allmsg  <- merge(d.allmsg, d.all, by.x = c("gameID", "sender.id", "round"), by.y = c("gameID", "playerID", "idx"), all = TRUE)  %>% filter(!is.na(coding))%>% 
  distinct(across(-coding), .keep_all = TRUE) %>% filter(!is.na(roundID))  %>%  rename_with(~ gsub("\\.x$", "", .x), ends_with(".x")) %>%
  select(-ends_with(".y")) 
```

```{r}

d.allmsg_exp1 <- read_csv(here('analysis/2_experiment_2/message_data/recoded_messages_exp1.csv'))%>%
  rename_with(~ gsub("\\.x$", "", .x), ends_with(".x")) %>%
  select(-ends_with(".y"))
d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))%>%
  rename_with(~ gsub("\\.x$", "", .x), ends_with(".x")) %>%
  select(-ends_with(".y"))

#d.guesses <- d.guesses %>%
 # filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")))



persistentnoClick <- c()  
for (i in 1:11) {
  idx_pair <- c(i+1, i+2)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx %in% idx_pair]))) %>%
      filter(idx != 1) %>%  # Filter out idx == 1
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)


games_with_4_players <- d.guesses %>%
 filter(!(playerID %in% persistentnoClick)) %>%
  group_by(gameID) %>%
  summarise(unique_players = n_distinct(playerID)) %>% 
  filter(unique_players == 4)

NCritterCount <- d.guesses %>%  distinct(playerID, gameID, .keep_all = TRUE) %>%group_by(gameID) %>%
  summarise(
    nRabbitsGame = sum(nRabbits, na.rm = TRUE),
    nSquirrelsGame = sum(nSquirrels, na.rm = TRUE),
    nCrittersGame = nRabbitsGame+nSquirrelsGame
  )
d.guesses <-left_join(d.guesses, NCritterCount, by = "gameID")

d.guesses <- semi_join(d.guesses, games_with_4_players, by = "gameID") 

d.allmsg_exp1  <- merge(d.allmsg_exp1, d.guesses, by.x = c("gameID", "sender.id", "round"), by.y = c("gameID", "playerID", "idx"), all = TRUE)  %>% filter(!is.na(coding))%>% 
  distinct(across(-coding), .keep_all = TRUE) %>% filter(!is.na(roundID)) %>% mutate (error = abs(mleEstimateGame-guess))%>% unique() %>%   rename_with(~ gsub("\\.x$", "", .x), ends_with(".x")) %>%
  select(-ends_with(".y")) %>% filter(!gameID == "01HW6JMDRBMZ4QAQ88VVTFKBJ0") 

```

# combine data & calculate bins

```{r}
d.allmsg_exp1 <- d.allmsg_exp1 %>%
   rename(mleGame = mleEstimateGame)%>%
  rename(mleEstimate = mleEstimateIndiv) %>%
   select(-roundID, -time) %>% 
  separate(treatmentName, into = c("prefix", "treatment", "direction"), sep = "-") %>%
  mutate(across(c(treatment, direction), trimws)) %>% 
  select(-prefix, -...1, -mleEstimate, -mleGame, -nRabbitsGame, -nSquirrelsGame)

d.allmsg<-d.allmsg%>%
   select(-sender.name, -designatedGame, -mleGame, -entropy_bin, -representation, -representation_bin, -nCritters, -nCrittersGame_bin, -mleEstimate, -mleGame, -nRabbitsGame, -nSquirrelsGame)
   

common_cols <- intersect(names(d.allmsg), names(d.allmsg_exp1))
unique_to_df1 <- setdiff(names(d.allmsg), names(d.allmsg_exp1))
unique_to_df2 <- setdiff(names(d.allmsg_exp1), names(d.allmsg))

#print(common_cols)
print(unique_to_df1)

print(unique_to_df2)


combined_df <- bind_rows(d.allmsg, d.allmsg_exp1)
combined_df_binning <- combined_df%>%
  select(sender.id, gameID, nRabbits, nSquirrels, entropy)%>%
unique()%>%
  mutate(nCritters = nSquirrels + nRabbits,    
         mleEstimate = nRabbits / (nRabbits + nSquirrels),
)%>%
  group_by(gameID) %>%
  filter(n_distinct(sender.id) == 4) %>%
  mutate(
   nRabbitsGame = sum(nRabbits),
    nSquirrelsGame = sum(nSquirrels),
    mleGame = nRabbitsGame / (nRabbitsGame + nSquirrelsGame),
    totalCritters = sum(nCritters),
    prob = nCritters / totalCritters,
    entropy_new = -sum(ifelse(prob > 0, prob * log(prob), 0)),
    representation = mean(abs(mleEstimate - mleGame))
  ) %>% 
  ungroup() %>% 
    mutate(
      entropy_bin = cut((entropy_new), breaks = seq(0, 2, .27), right = TRUE, include.lowest = TRUE, dig.lab = 2), 
      representation_bin = cut((representation), breaks = seq(0, 1, .12), right = TRUE, include.lowest = TRUE, dig.lab = 2),
      nCrittersGame_bin = cut(totalCritters, breaks = seq(15, 100, by = 5), right = TRUE, include.lowest = TRUE))%>%
  select( -nRabbits, -nSquirrels, -entropy)


```

```{r}
d.allmsg <- d.allmsg %>% left_join(combined_df_binning, by = c("gameID", "sender.id")) %>%
  group_by(gameID) %>%
  filter(n_distinct(sender.id) == 4) %>%
  ungroup() %>%  mutate(error = if_else(direction == "RS", abs((100-guess) - (mleGame*100)), abs(guess - (mleGame*100)))) 
  
d.allmsg_exp1 <- d.allmsg_exp1 %>% left_join(combined_df_binning, by = c("gameID", "sender.id")) %>%
  group_by(gameID) %>%
  filter(n_distinct(sender.id) == 4) %>%
  ungroup()%>% mutate (error = abs(as.numeric(mleGame*100) - guess))

combined_df <- combined_df %>% left_join(combined_df_binning, by = c("gameID", "sender.id"))%>%
  group_by(gameID) %>%
  filter(n_distinct(sender.id) == 4) %>%
  ungroup()%>%  mutate(error = if_else(direction == "RS", abs((100-guess) - (mleGame*100)), abs(guess - (mleGame*100))))  #%>% filter(!guess == 50)
  

```

# analyze codes

```{r}
#used this to correct accidental miscodes as pn, as that's essentially the default msg
compare.msg <- d.allmsg_exp1 %>%
  filter(str_detect(coding, "pn"), !str_detect(coding, "[sb]"), round != 1) %>%
  mutate(extracted = str_extract_all(text, "\\d+")) %>%
  filter(map_lgl(extracted, ~ length(.x) == 2)) %>%
  mutate(
    num1 = as.numeric(map_chr(extracted, 1)),
    num2 = as.numeric(map_chr(extracted, 2))
  ) %>%
  filter(
    !((num1 == nRabbits & num2 == nSquirrels) | (num1 == nSquirrels & num2 == nRabbits)), 
  ) #%>%
  #select(-extracted, -sender.name, -recipient, -treatment, -direction, -guess, -confidence)

compare.msg <- compare.msg %>%
  group_by(gameID) %>%
  filter(n_distinct(sender.id) > 2) %>%
  ungroup()
```

```{r}
summary_data_3 <- d.allmsg %>%
  filter(!coding == 'o') %>%
  group_by(gameID) %>%
  summarize(
    avg_error = mean(error[round == 8], na.rm = TRUE),
    pn_count = sum(str_count(coding, "pn")),
    sn_count = sum(str_count(coding, "sn")),
    pb_count = sum(str_count(coding, "pb")),
    sb_count = sum(str_count(coding, "sb"))
  ) 


summary_data_long_3 <- summary_data_3 %>%
  select(gameID, avg_error, pn_count, sn_count, pb_count, sb_count) %>%
  pivot_longer(cols = c(pn_count, sn_count, pb_count, sb_count), 
               names_to = "message_type", values_to = "count")

summary_data_long_3$decile <- cut(summary_data_long_3$avg_error, 
                                breaks = quantile(summary_data_long_3$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE), 
                                include.lowest = TRUE, labels = FALSE)

summary_data_long_proportions <- summary_data_long_3 %>%
 # filter(exitSurvey == 'no') %>%
  group_by(decile) %>% 
  mutate(total_count = sum(count)) %>% 
  group_by(decile, message_type) %>%
  summarize(proportion = sum(count) / mean(total_count)
  ) 

# Plotting
summary_data_long_proportions %>%
  mutate(message_type = fct_relevel(message_type, "pn_count", 'pb_count',  'sn_count', 'sb_count')) %>%
  ggplot(aes(x = factor(decile),  y = proportion, fill = message_type)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_brewer(palette = 'Accent', 
                    labels = c("pn_count" = "personal number", "sn_count" = "social number",
                               "pb_count" = "personal belief", "sb_count" = "social belief")) +
  labs(title = "",
       x = "error (binned)",
       y = "proportion",
       fill = "message type") +
  theme(aspect.ratio = 1, legend.position = "top") +
  guides(fill = guide_legend(nrow = 2))

```

```{r}
summary_data_long_3 <- summary_data_long_3 %>%   
  mutate(message_type = fct_relevel(message_type, 
                                    'pn_count', 'sb_count','pb_count', 'sn_count')) %>%
  group_by(gameID) %>%
  mutate(totalCount = sum(count))

m <- glm(count / totalCount ~ message_type * decile, 
         weights=totalCount,
         data = summary_data_long_3, 
         family = "binomial")

summary(m)

```

```{r}

dsummary_data_deciles_3 <- summary_data_long_3 %>% 
  ungroup()%>%
  select(-gameID, -avg_error)%>%
  group_by(decile, message_type) %>%
  summarize(count = sum(count), .groups = "drop") %>%  pivot_wider(names_from = message_type, values_from = count)%>% mutate(d = factor(decile)) 

contrasts(dsummary_data_deciles_3$d) <- contr.sum(length(levels(dsummary_data_deciles_3$d)))

glm_pn <- glm(cbind(pn_count, sn_count +sb_count + pb_count) ~ d,
             family = binomial, data = dsummary_data_deciles_3)

summary(glm_pn)

glm_pb <- glm(cbind(pb_count, sn_count +sb_count + pn_count) ~ d,
             family = binomial, data = dsummary_data_deciles_3)

#summary(glm_pb)


glm_sn <- glm(cbind(sn_count, pn_count +sb_count + pb_count) ~ d,
             family = binomial, data = dsummary_data_deciles_3)
#summary(glm_sn)


glm_sb <- glm(cbind(sb_count, sn_count +pn_count + pb_count) ~ d,
             family = binomial, data = dsummary_data_deciles_3)
summary(glm_sb)

```

# preregistered data only

```{r}
summary_data_2 <- d.allmsg_exp1 %>%
  filter(!coding == 'o') %>%
    filter(!treatment== 'slider') %>%
  group_by(gameID) %>%
  summarize(
   # exitSurvey = if_else(any(str_detect(exitSurvey, 'yes')), "yes", "no"),
    avg_error = mean(error [round == 12], na.rm = TRUE),
    pn_count = sum(str_count(coding, "pn")),
    sn_count = sum(str_count(coding, "sn")),
    pb_count = sum(str_count(coding, "pb")),
    sb_count = sum(str_count(coding, "sb"))
  ) %>% mutate(sb_present = mean(sb_count > 0))


summary_data_long_2 <- summary_data_2 %>%
  select(gameID, avg_error, pn_count, sn_count, pb_count, sb_count) %>%
  pivot_longer(cols = c(pn_count, sn_count, pb_count, sb_count), 
               names_to = "message_type", values_to = "count")

unique_quantiles <- unique(quantile(summary_data_long_2$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE))
print(unique_quantiles)

#summary_data_long$decile <- cut(summary_data_long$avg_error, 
#                                breaks = quantile(summary_data_long$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE), 
 #                               include.lowest = TRUE, labels = FALSE)

summary_data_long_2 <- summary_data_long_2 %>%
  mutate(decile = ntile(avg_error, 5)) %>% filter(!is.na(decile))

summary_data_long_proportions <- summary_data_long_2 %>%
 # filter(exitSurvey == 'no') %>%
  group_by(decile) %>% 
  mutate(total_count = sum(count)) %>% 
  group_by(decile, message_type) %>%
  summarize(proportion = sum(count) / mean(total_count)
  ) 

# Plotting
summary_data_long_proportions %>%
  mutate(message_type = fct_relevel(message_type, "pn_count", 'pb_count',  'sn_count', 'sb_count')) %>%
  ggplot(aes(x = factor(decile),  y = proportion, fill = message_type)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_brewer(palette = 'Accent', 
                    labels = c("pn_count" = "personal number", "sn_count" = "social number",
                               "pb_count" = "personal belief", "sb_count" = "social belief")) +
  labs(title = "",
       x = "error (binned)",
       y = "proportion",
       fill = "message type") +
  theme(aspect.ratio = 1, legend.position = "top") +
  guides(fill = guide_legend(nrow = 2))
```

```{r}
summary_data_long_2 <- summary_data_long_2 %>%   
  mutate(message_type = fct_relevel(message_type, 
                                    'pn_count', 'sb_count','pb_count', 'sn_count')) %>%
  group_by(gameID) %>%
  mutate(totalCount = sum(count))

dsummary_data_deciles_2 <- summary_data_long_2 %>% 
  ungroup()%>%
  select(-gameID, -avg_error)%>%
  group_by(decile, message_type) %>%
  summarize(count = sum(count), .groups = "drop") %>%  pivot_wider(names_from = message_type, values_from = count)%>% mutate(d = factor(decile)) 

contrasts(dsummary_data_deciles_2$d) <- contr.sum(length(levels(dsummary_data_deciles_2$d)))

glm_pn <- glm(cbind(pn_count, sn_count +sb_count + pb_count) ~ d,
             family = binomial, data = dsummary_data_deciles_2)

summary(glm_pn)

glm_pb <- glm(cbind(pb_count, sn_count +sb_count + pn_count) ~ d,
             family = binomial, data = dsummary_data_deciles_2)

summary(glm_pb)


glm_sn <- glm(cbind(sn_count, pn_count +sb_count + pb_count) ~ d,
             family = binomial, data = dsummary_data_deciles_2)
summary(glm_sn)


glm_sb <- glm(cbind(sb_count, sn_count +pn_count + pb_count) ~ d,
             family = binomial, data = dsummary_data_deciles_2)
summary(glm_sb)

```

```{r}

#summary_data_3 %>% mutate(decile = ntile(avg_error, 5)) %>%
# glm(sb_count ~ avg_error, family = "poisson",
 #      data = .) %>% summary()
#summary_data_3 %>% mutate(decile = ntile(avg_error, 5)) %>%
# glm(sn_count ~ avg_error, family = "poisson",
 #      data = .) %>% summary()
summary_data_3 %>% mutate(decile = ntile(avg_error, 5)) %>%
 lm(log(avg_error) ~ sn_count+sb_count+pb_count+pn_count,
       data = .) %>% summary()
summary_data_2 %>% mutate(decile = ntile(avg_error, 5)) %>%
 lm(log(avg_error) ~ sn_count+sb_count+pb_count+pn_count,
       data = .) %>% summary()
```

# merged summary

```{r}
summary_data_deciles <- rbind(dsummary_data_deciles_2,dsummary_data_deciles_3)%>% 
  select(-d)%>%
  group_by(decile) %>%
  summarise(across(everything(), ~ sum(.x, na.rm = TRUE)), .groups = "drop")%>% mutate(d = factor(decile)) 

contrasts(summary_data_deciles$d) <- contr.sum(length(levels(summary_data_deciles$d)))
  
glm_pn <- glm(cbind(pn_count, sn_count +sb_count + pb_count) ~ d,
             family = binomial, data = summary_data_deciles)

summary(glm_pn)

glm_pb <- glm(cbind(pb_count, sn_count +sb_count + pn_count) ~ d,
             family = binomial, data = summary_data_deciles)

summary(glm_pb)


glm_sn <- glm(cbind(sn_count, pn_count +sb_count + pb_count) ~ d,
             family = binomial, data = summary_data_deciles)
summary(glm_sn)


glm_sb <- glm(cbind(sb_count, sn_count +pn_count + pb_count) ~ d,
             family = binomial, data = summary_data_deciles)
summary(glm_sb)

```

```{r}
summary_data_3_2 <- bind_rows(summary_data_3, summary_data_2) %>% 
  select(-sb_present)

```

```{r}




summary_data_long_3_2 <- summary_data_3_2 %>%
  select(gameID, avg_error, pn_count, sn_count, pb_count, sb_count) %>%
  pivot_longer(cols = c(pn_count, sn_count, pb_count, sb_count), 
               names_to = "message_type", values_to = "count")

summary_data_long_3_2$decile <- cut(summary_data_long_3_2$avg_error, 
                                breaks = quantile(summary_data_long_3_2$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE), 
                                include.lowest = TRUE, labels = FALSE)

summary_data_long_proportions <- summary_data_long_3_2 %>%
 # filter(exitSurvey == 'no') %>%
  group_by(decile) %>% 
  mutate(total_count = sum(count)) %>% 
  group_by(decile, message_type) %>%
  summarize(proportion = sum(count) / mean(total_count)
  ) 

# Plotting
summary_data_long_proportions %>%
  mutate(message_type = fct_relevel(message_type, "pn_count", 'pb_count',  'sn_count', 'sb_count')) %>%
  ggplot(aes(x = factor(decile),  y = proportion, fill = message_type)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_brewer(palette = 'Accent', 
                    labels = c("pn_count" = "personal number", "sn_count" = "social number",
                               "pb_count" = "personal belief", "sb_count" = "social belief")) +
  labs(title = "",
       x = "error (binned)",
       y = "proportion",
       fill = "message type") +
  theme(aspect.ratio = 1, legend.position = "top") +
  guides(fill = guide_legend(nrow = 2))

```

```{r}
summary_data_long_3_2 <- summary_data_long_3_2 %>%   
  mutate(message_type = fct_relevel(message_type, 
                                    'pn_count', 'sb_count','pb_count', 'sn_count')) %>%
  group_by(gameID) %>%
  mutate(totalCount = sum(count))

m <- glm(count / totalCount ~ message_type * decile, 
         weights=totalCount,
         data = summary_data_long_3, 
         family = "binomial")

summary(m)

```

```{r}

dsummary_data_deciles_3_2 <- summary_data_long_3_2 %>% 
  ungroup()%>%
  select(-gameID, -avg_error)%>%
  group_by(decile, message_type) %>%
  summarize(count = sum(count), .groups = "drop") %>%  pivot_wider(names_from = message_type, values_from = count)%>% mutate(d = factor(decile)) 

contrasts(dsummary_data_deciles_3_2$d) <- contr.sum(length(levels(dsummary_data_deciles_3_2$d)))

glm_pn <- glm(cbind(pn_count, sn_count +sb_count + pb_count) ~ d,
             family = binomial, data = dsummary_data_deciles_3_2)

summary(glm_pn)

glm_pb <- glm(cbind(pb_count, sn_count +sb_count + pn_count) ~ d,
             family = binomial, data = dsummary_data_deciles_3_2)

#summary(glm_pb)


glm_sn <- glm(cbind(sn_count, pn_count +sb_count + pb_count) ~ d,
             family = binomial, data = dsummary_data_deciles_3_2)
#summary(glm_sn)


glm_sb <- glm(cbind(sb_count, sn_count +pn_count + pb_count) ~ d,
             family = binomial, data = dsummary_data_deciles_3_2)
summary(glm_sb)

```
