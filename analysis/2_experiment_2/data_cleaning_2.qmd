---
title: "Experiment1"
format: html
editor: visual
---

# Import packages

```{r, echo=FALSE, results='hide', message=FALSE, warning=FALSE}

library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
```

## Read in data

```{r, echo=FALSE, results='hide', message=FALSE, warning=FALSE}
d.1 <- bind_rows(
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-1848/playerStage.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2022/playerStage.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2134/playerStage.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2211/playerStage.csv'))
)

d.2 <- bind_rows(
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-1848/round.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2022/round.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2134/round.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2211/round.csv'))
)%>% 
  rename(roundID = id) 

d.3 <- bind_rows(
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-1848/stage.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2022/stage.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib//01-02-2134/stage.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2211/stage.csv'))
)%>% 
  rename(stageID = id)%>%
  rename(stageName = name)

d.5 <- bind_rows(
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-1848/playerGame.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2022/playerGame.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib//01-02-2134/playerGame.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2211/playerGame.csv'))
)


d.6 <- bind_rows(
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-1848/player.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2022/player.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2134/player.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2211/player.csv'))
)%>% 
  rename(playerID = id) %>% 
  select(-contains("LastChangedAt")) %>%
  filter(ended == "game ended")

d.8 <- bind_rows(
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-1848/game.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2022/game.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2134/game.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2211/game.csv'))
)%>% 
  rename(gameID = id)

d.9 <- bind_rows(
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-1848/batch.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2022/batch.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2134/batch.csv')),
  read_csv(here('data/2_experiment_2_rare_distrib/01-02-2211/batch.csv'))
)%>% 
  rename(batchID = id)

decode <- read_json(here('experiments/server/games_2.json'), simplifyVector = TRUE) %>%
  as_tibble() %>%
  rename(nCrittersGame = totalCritters) %>%
  rename(designatedGame = gameID)


```

## Merge files

```{r}
d.gamebatch <- merge(d.8, d.9, by = c("batchID"), all=T)%>%
  select(-contains("LastChangedAt"))

d.playergamebatch <-merge(d.6, d.gamebatch, by="gameID", all = T)

d.59 <-merge(d.playergamebatch,d.5, by = c("gameID", "playerID"), all = T)%>%
  select(-contains("LastChangedAt"))

rm(d.8, d.9, d.6, d.gamebatch, d.playergamebatch, d.5)

d.stageID <- merge(d.1, d.3, by = c("stageID", "gameID", "roundID"), all = T) %>%
  select(-contains("LastChangedAt"))


d.playerstageround <-merge(d.stageID,d.2, by = c("roundID", "gameID"), all = T)%>%
  select(-contains("LastChangedAt"))%>%
  select(gameID, stageName, roundID, confidence, guess, playerID, stageID,idx)

rm(d.1, d.2, d.stageID, d.3)

d.all <-merge(d.playerstageround,d.59, by = c("playerID", "gameID"), all = T)%>%
  select(gameID, playerID, stageName, treatmentName.x, ended.x, roundID, confidence, guess, stageID.x, idx, emojiArray, exitSurvey, participantID, recipient,treatment.x, chat,messages)%>%
  mutate(
    emojiArray = str_remove_all(emojiArray, "\\s"),
    emojiArray = str_extract_all(emojiArray, "üêá|üêøÔ∏è"),
    nRabbits = sapply(emojiArray, function(x) sum(x == "üêá")),
    nSquirrels = sapply(emojiArray, function(x) sum(x == "üêøÔ∏è")),
    nCritters = nSquirrels + nRabbits,
    mleEstimate = nRabbits / (nRabbits + nSquirrels)
  ) 

rm(d.59, d.playerstageround)
```

## Filter for relevant rows

```{r}
d.all <- d.all %>%
  distinct() %>%
  group_by(gameID) %>%
  mutate(num_players = n_distinct(playerID)) %>%
  ungroup() %>%
  filter(num_players == 4) %>%
  filter(ended.x == 'game ended') %>%
  filter(stageName == 'observe')

```

## calculations to merge desired with played games

```{r}
d.allgameplayers <- d.all %>%
  distinct(playerID, gameID, .keep_all = TRUE) %>%
  group_by(gameID) %>%
  mutate(
    nRabbitsGame = sum(nRabbits, na.rm = TRUE),
    nSquirrelsGame = sum(nSquirrels, na.rm = TRUE),
    nCrittersGame = sum(nCritters, na.rm = TRUE),
    mleGame = round(nRabbitsGame / (nRabbitsGame + nSquirrelsGame), 4),
    prob = round(nCritters / nCrittersGame, 4),
    entropy = round(-sum(ifelse(prob > 0, prob * log(prob), 0)), 4),
    representation = round(mean(abs(mleEstimate - mleGame)), 4)
  ) %>%
  ungroup()


d.gamelist <- d.allgameplayers%>%
  group_by(gameID) %>%
  slice(1) %>% 
  ungroup()

```

```{r}
n_unique <- nrow(unique(decode[c("nCritters", "mleGame")]))
n_unique

dup_rows <- decode  %>%
  group_by(nCrittersGame, mleGame) %>%
  filter(n() > 1) %>%
  count(designatedGame) %>%
  filter (n==1)

duplicated_rows <-decode %>%
  filter(designatedGame %in% dup_rows$designatedGame)

# Print the rows
print(dup_rows)

#looks like 10297 and 3627 are randomly generated identical pairs and 16039 only differs by one (so representation is different)
d.decode <- decode%>%
  distinct(designatedGame, .keep_all = TRUE)
```

```{r}
d.allgameplayers <- d.allgameplayers %>%
  mutate(across(c(nCrittersGame, representation, entropy), as.character))

d.decode <- d.decode %>%
  mutate(across(c(nCrittersGame, representation, entropy), as.character))


d.allgameplayers <- d.allgameplayers %>%
  left_join(d.decode %>% distinct(nCrittersGame, representation, designatedGame, entropy_bin, representation_bin,nCrittersGame_bin), 
            by = c("nCrittersGame", "representation"))

d.all <- d.all %>%
  left_join(
    d.allgameplayers %>%
      select(nSquirrelsGame, nRabbitsGame, nCrittersGame, gameID, mleGame, representation, designatedGame, entropy_bin, representation_bin,nCrittersGame_bin) %>%
      distinct(gameID, .keep_all = TRUE), 
    by = c("gameID")
  )

```

## Preemptive filter for games we'll end up excluding

```{r}
persistentnoClick <- data.frame(gameID = character(), playerID = character(), stringsAsFactors = FALSE)

for (i in 1:7) {
  idx_pair <- c(i + 1, i + 2)
    filtered_players <- d.all %>%
    group_by(gameID, playerID) %>%
    filter(all(is.na(guess[idx_pair]))) %>%
    select(gameID, playerID) %>%
    distinct()
    persistentnoClick <- bind_rows(persistentnoClick, filtered_players)
}
persistentnoClick <- distinct(persistentnoClick)

gameIDs_to_remove <- persistentnoClick %>%
  count(gameID) %>%
  filter(n >= 2) %>%
  pull(gameID)

```

## Count which games are present

```{r}
decode <- decode %>%
  mutate(across(c(nCrittersGame, representation, designatedGame), as.character))

d.allgameplayers <- d.allgameplayers %>%
  mutate(across(c(nCrittersGame, representation, designatedGame, treatmentName.x), as.character))%>%
  filter(!(gameID %in% gameIDs_to_remove))

d.count.chat <- d.allgameplayers %>%
  filter(str_ends(treatmentName.x, "interactive"))

d.count.slider <- d.allgameplayers %>%
  filter(str_ends(treatmentName.x, "slider"))


# Count the occurrences of each designatedGame in decode
decode_counts <- decode %>%
  count(designatedGame, name = "decode_count")

# Count the occurrences of each designatedGame in d.count.chat
chat_counts <- d.count.chat %>%
  count(designatedGame, name = "chat_count")

# Count the occurrences of each designatedGame in d.count.slider
slider_counts <- d.count.slider %>%
  count(designatedGame, name = "slider_count")

# Join counts to compare
missing_chat <- decode_counts %>%
  left_join(chat_counts, by = "designatedGame") %>%
  filter(is.na(chat_count) | decode_count > chat_count)

missing_slider <- decode_counts %>%
  left_join(slider_counts, by = "designatedGame") %>%
  filter(is.na(slider_count) | decode_count > slider_count)

# Print missing games for each
cat("Missing or insufficient games in d.count.chat:\n")
print(missing_chat)

cat("\nMissing or insufficient games in d.count.slider:\n")
print(missing_slider)

```

```{r}
d.allnovel <- d.all %>%
  filter(is.na(designatedGame)) %>%
  group_by(gameID) %>%
  distinct(playerID, .keep_all = TRUE) %>%
  mutate(
    countRabbits = list(nRabbits),
    countSquirrels = list(nSquirrels)
  ) %>%
  ungroup()

#10120 turns out to be the problem. generated 5 players (?)
#games ran with 4, making them novel
#filtered out above
d.modified <- d.all %>%
  filter(is.na(designatedGame)) %>%
  mutate(
    designatedGame = 1,
    entropy_bin = '(0.81,1.1]',
    representation_bin = '(0.24,0.36]',
    nCrittersGame_bin = '(20,25]'
  )
d.all <- d.all %>%
  filter(!is.na(designatedGame)) %>%
  bind_rows(d.modified)
```

# save

```{r}
# Filter decode for missing_chat gameIDs
decode_missing_chat <- decode %>%
   filter(designatedGame != 10120) %>%
  filter(designatedGame %in% missing_chat$designatedGame)

# Filter decode for missing_slider gameIDs
decode_missing_slider <- decode %>%
   filter(designatedGame != 10120) %>%
  filter(designatedGame %in% missing_slider$designatedGame)

decode_combined <- bind_rows(decode_missing_slider, decode_missing_chat)

#35 then 27 games

write_json(missing_chat_json, "missing_games_2.json", pretty = TRUE)

```

```{r}

list_cols <- sapply(d.all, is.list)
d.all[list_cols] <- lapply(d.all[list_cols], function(col) {
  sapply(col, paste, collapse = ";") # Collapse lists into strings
})
d.all <- d.all %>%
  select(-messages, -emojiArray)
#write.csv(d.all, "exp2_clean_data.csv", row.names = FALSE)
```
