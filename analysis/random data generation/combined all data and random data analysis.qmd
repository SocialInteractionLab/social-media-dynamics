---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)

theme_set(theme_few())
```

## Read in data

```{r}
ParseJSONColumn <- function(x) {
  str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>% 
    fromJSON(flatten = T) 
}

#d.guesses <- read_csv(here('analysis/random data generation/random_values.csv'))
#d.guesses <- read_csv(here('analysis/random data generation/random_values10k.csv'))
#d.random <- read_csv(here('analysis/random data generation/game_results.csv'))
d.random <- read_csv(here('analysis/random data generation/game_results10k.csv'))

d.random |> 
  ggplot(aes(x = nRabbits)) +
    geom_histogram()
  
```

## Create all other columns

```{r}
d.random <- d.random %>%
  mutate(
    mleEstimate = trunc(nRabbits / (nRabbits + nSquirrels) *100),
    # 3/(3+0) *100 =100
    #Nan -> 0
    #Nan -> 0
    #Nan -> 0
    nCritters = nRabbits + nSquirrels
    # 3+0+0+0+0+0
  ) %>%
  replace_na(list(mleEstimate = 0)) %>%
  group_by(gameID) %>%
  mutate(
    nRabbitsGame = sum(nRabbits),
    #3
    nSquirrelsGame = sum(nSquirrels),
    #0
    mleGame = trunc(nRabbitsGame / (nRabbitsGame + nSquirrelsGame)*100),
    #3/3 *100 =100
    totalCritters = sum(nCritters),
    #3
    prob = nCritters / totalCritters,
    # 3/3 = 1
    # 0/3 = 0
    entropy = -sum(ifelse(prob > 0, prob * log(prob), 0)),
    # log(3)
    # 0
    avgMlePlayers = mean(mleEstimate),
  
    representation = abs(avgMlePlayers - mleGame)
  ) %>%
  ungroup()



```

```{r}
ParseJSONColumn <- function(x) {
  str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>% 
    fromJSON(flatten = T) 
}

d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- d.guesses %>%
  group_by(playerID) %>%
  filter(any(!is.na(treatmentName))) %>%
  ungroup()

unique_rows <- d.guesses %>%
  filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
  distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)

d.guesses <- d.guesses %>%
  filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")))

d.guesses <- bind_rows(d.guesses, unique_rows)

d.guesses <- d.guesses %>%
  mutate(data = "new")

d.guesses_old <- read_csv(here('data/merged_data_exp.csv'))
gameCounts <- d.guesses_old %>%
  filter(idx == 1) %>%
  group_by(gameID) %>%
  summarize(nRabbitsGame = sum(nRabbits, na.rm = TRUE),
            nSquirrelsGame = sum(nSquirrels, na.rm = TRUE)) 
d.guesses_old <- d.guesses_old %>%
  group_by(playerID) %>%
  filter(any(!is.na(treatmentName))) %>%
  ungroup() %>%
  mutate(data = "old")%>%
  filter(!is.na(guess)) %>%
  mutate(treatmentName = case_when(
    treatmentName == "experiment1-0.7" ~ 'unidirectional-0.7',
    treatmentName == "experiment1-0.3" ~ 'unidirectional-0.3',
    treatmentName =="experiment2-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="experiment2-interactive-0.7" ~ 'interactive-0.7',
    treatmentName =="experiment2-slider-0.3" ~ 'slider-0.3',
    treatmentName =="experiment2-slider-0.7" ~ 'slider-0.7'
  )) %>%
  left_join(gameCounts, by = "gameID") %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
  replace_na(list(nRabbits = 0, nSquirrels = 0, nRabbitsGame = 0, nSquirrelsGame = 0)) %>%
  mutate( mleEstimateIndiv = trunc(nRabbits / (nRabbits + nSquirrels) *100), 
         nCrittersGame = nRabbitsGame + nSquirrelsGame,
         mleEstimateGame = trunc((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv)) %>%
  arrange(playerID, idx)

d.guesses <- d.guesses %>%
  mutate(treatmentName = case_when(
    treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
    treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
    treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
    treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
    treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
  )) %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
  left_join(gameCounts) %>%
  mutate(mleEstimateIndiv = trunc((nRabbits / (nRabbits + nSquirrels)) * 100), 
         nCrittersGame = nRabbitsGame+nSquirrelsGame,
         mleEstimateGame = trunc((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
  arrange(playerID, idx)

persistentnoClick <- c()  
for (i in 1:11) {
  idx_pair <- c(i+1, i+2)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)

persistentnoClick_old <- c()  
for (i in 1:6) {
  idx_pair <- c(i+1, i+2)
  filtered_players <- d.guesses_old %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick_old <- c(persistentnoClick_old, filtered_players)
}
persistentnoClick_old <- unique(persistentnoClick_old)

persistentnoClick_combined <- unique(c(persistentnoClick_old, persistentnoClick))

#d.guesses_combined <- bind_rows(d.guesses, d.guesses_old)
#rm(d.guesses, d.guesses_old)
#d.guesses <- d.guesses_combined
#rm(d.guesses_combined)

#OR
d.guesses <-d.guesses_old %>%
  filter(!playerID %in% persistentnoClick_old)

d.guesses <- d.guesses %>%
  mutate(error = abs(guess - mleEstimateGame))


```

```{r}
df_filtered <- d.guesses %>%
  filter(idx == 2) %>%
  mutate(
    mleEstimate = trunc(nRabbits / (nRabbits + nSquirrels) *100),
    nCritters = nRabbits + nSquirrels) %>%
  replace_na(list(mleEstimate = 0)) %>%
  group_by(gameID) %>%
  mutate(
    nRabbitsGame = sum(nRabbits),
    #3
    nSquirrelsGame = sum(nSquirrels),
    #0
    mleGame = trunc(nRabbitsGame / (nRabbitsGame + nSquirrelsGame)*100),
    #3/3 *100 =100
    totalCritters = sum(nCritters),
    #3
    prob = nCritters / totalCritters,
    # 3/3 = 1
    # 0/3 = 0
    entropy = -sum(ifelse(prob > 0, prob * log(prob), 0)),
    # log(3)
    # 0
    avgMlePlayers = mean(mleEstimate),
  
    representation = abs(avgMlePlayers - mleGame) ) %>%
  ungroup() %>%
  select(playerID, gameID, nCrittersGame, nCritters, treatment, error, prob, totalCritters,
         entropy, representation, condition)



```

```{r}
# Define fixed breaks for x and y axes
x_breaks <- seq(min(d.random$entropy, df_filtered$entropy, na.rm = TRUE),
                max(d.random$entropy, df_filtered$entropy, na.rm = TRUE), length.out = 6)

y_breaks <- seq(min(abs(d.random$representation), abs(df_filtered$representation), na.rm = TRUE),
                max(abs(d.random$representation), abs(df_filtered$representation), na.rm = TRUE), length.out = 6)

# Create heatmap data for d.random with fixed intervals
heatmap_random <- d.random %>%
  mutate(
    x_bin = cut(entropy, breaks = x_breaks, include.lowest = TRUE),
    y_bin = cut(abs(representation), breaks = y_breaks, include.lowest = TRUE)
  ) %>%
  group_by(x_bin, y_bin) %>%
  summarise(count = n(), avg_entropy = mean(entropy, na.rm = TRUE), .groups = 'drop') %>%
  mutate(dataset = "Random")

# Create heatmap data for df_filtered with fixed intervals
heatmap_filtered <- df_filtered %>%
  mutate(
    x_bin = cut(entropy, breaks = x_breaks, include.lowest = TRUE),
    y_bin = cut(abs(representation), breaks = y_breaks, include.lowest = TRUE)
  ) %>%
  group_by(x_bin, y_bin) %>%
  summarise(count = n(), avg_entropy = mean(entropy, na.rm = TRUE), .groups = 'drop') %>%
  mutate(dataset = "Filtered")

# Combine both datasets for faceted plotting
combined_heatmap <- bind_rows(heatmap_random, heatmap_filtered)

ggplot(combined_heatmap, aes(x = x_bin, y = y_bin)) +
  geom_tile(aes(fill = count), color = "white") +
  scale_fill_gradient(name = "Number of Games", low = "lightblue", high = "darkblue") +
  labs(
    x = "Average Entropy",
    y = "Absolute Representation"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
  ) +
  facet_wrap(~dataset)


```

```{r}
x_breaks <- seq(min(d.random$entropy, df_filtered$entropy, na.rm = TRUE),
                max(d.random$entropy, df_filtered$entropy, na.rm = TRUE), length.out = 6)

y_breaks <- seq(min(abs(d.random$totalCritters), abs(df_filtered$totalCritters), na.rm = TRUE),
                max(abs(d.random$totalCritters), abs(df_filtered$totalCritters), na.rm = TRUE), length.out = 6)

# Create heatmap data for d.random with fixed intervals
heatmap_random <- d.random %>%
  mutate(
    x_bin = cut(entropy, breaks = x_breaks, include.lowest = TRUE),
    y_bin = cut(abs(totalCritters), breaks = y_breaks, include.lowest = TRUE)
  ) %>%
  group_by(x_bin, y_bin) %>%
  summarise(count = n(), avg_entropy = mean(entropy, na.rm = TRUE), .groups = 'drop') %>%
  mutate(dataset = "Random")

# Create heatmap data for df_filtered with fixed intervals
heatmap_filtered <- df_filtered %>%
  mutate(
    x_bin = cut(entropy, breaks = x_breaks, include.lowest = TRUE),
    y_bin = cut(abs(totalCritters), breaks = y_breaks, include.lowest = TRUE)
  ) %>%
  group_by(x_bin, y_bin) %>%
  summarise(count = n(), avg_entropy = mean(entropy, na.rm = TRUE), .groups = 'drop') %>%
  mutate(dataset = "Filtered")

# Combine both datasets for faceted plotting
combined_heatmap <- bind_rows(heatmap_random, heatmap_filtered)

# Create the faceted heatmap plot with shared scales
ggplot(combined_heatmap, aes(x = x_bin, y = y_bin)) +
  geom_tile(aes(fill = count), color = "white") +
  scale_fill_gradient(name = "Number of Games", low = "lightblue", high = "darkblue") +
  labs(
    x = "Average Entropy",
    y = "Total Critters"
  ) +
 theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
  ) +
  facet_wrap(~dataset)


```

```{r}
x_breaks <- seq(min(d.random$totalCritters, df_filtered$totalCritters, na.rm = TRUE),
                max(d.random$totalCritters, df_filtered$totalCritters, na.rm = TRUE), length.out = 6)

y_breaks <- seq(min(abs(d.random$representation), abs(df_filtered$representation), na.rm = TRUE),
                max(abs(d.random$representation), abs(df_filtered$representation), na.rm = TRUE), length.out = 6)

# Create heatmap data for d.random with fixed intervals
heatmap_random <- d.random %>%
  mutate(
    x_bin = cut(totalCritters, breaks = x_breaks, include.lowest = TRUE),
    y_bin = cut(abs(representation), breaks = y_breaks, include.lowest = TRUE)
  ) %>%
  group_by(x_bin, y_bin) %>%
  summarise(count = n(), avg_tC = mean(totalCritters, na.rm = TRUE), .groups = 'drop') %>%
  mutate(dataset = "Random")

# Create heatmap data for df_filtered with fixed intervals
heatmap_filtered <- df_filtered %>%
  mutate(
    x_bin = cut(totalCritters, breaks = x_breaks, include.lowest = TRUE),
    y_bin = cut(abs(representation), breaks = y_breaks, include.lowest = TRUE)
  ) %>%
  group_by(x_bin, y_bin) %>%
  summarise(count = n(), avg_tC = mean(totalCritters, na.rm = TRUE), .groups = 'drop') %>%
  mutate(dataset = "Filtered")

# Combine both datasets for faceted plotting
combined_heatmap <- bind_rows(heatmap_random, heatmap_filtered)

# Create the faceted heatmap plot with shared scales
ggplot(combined_heatmap, aes(x = x_bin, y = y_bin)) +
  geom_tile(aes(fill = count), color = "white") +
  scale_fill_gradient(name = "Number of Games", low = "lightblue", high = "darkblue") +
  labs(
    x = "Total Critters",
    y = "Absolute Representation"
  ) +
 theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
  ) +
  facet_wrap(~dataset)



```
