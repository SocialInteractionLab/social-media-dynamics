---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)

theme_set(theme_few())
```

## Read in data

```{r}
ParseJSONColumn <- function(x) {
  str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>% 
    fromJSON(flatten = T) 
}

d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- d.guesses %>%
  group_by(playerID) %>%
  filter(any(!is.na(treatmentName))) %>%
  ungroup()

unique_rows <- d.guesses %>%
  filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
  distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)

d.guesses <- d.guesses %>%
  filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")))

d.guesses <- bind_rows(d.guesses, unique_rows)
d.guesses <- d.guesses %>%  
  filter(idx != 1) 
```

## Implement exclusions

```{r}
confused <- d.guesses %>%
  filter(idx == 1) %>%
  mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
  mutate(discrepency = abs(guess - mleEstimate)) %>% 
  filter(discrepency > 70) %>% 
  pull(playerID)

persistentnoClick <- c()  
for (i in 1:11) {
  idx_pair <- c(i+1, i+2)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx %in% idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)


```

### Game-level distribution

```{r}
gameCounts <- d.guesses %>%
    filter(!(gameID %in% persistentnoClick)) %>%
  filter(idx == 1) %>%
  group_by(gameID, playerID, nRabbits, nSquirrels) %>%
  tally() %>% 
  group_by(gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels),)  
  
```

```{r}

d.guesses <- d.guesses %>%
  mutate(treatmentName = case_when(
    treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
    treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
    treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
    treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
    treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
  )) %>%
 
  left_join(gameCounts) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100), 
         nCrittersGame = nRabbitsGame+nSquirrelsGame,
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
  arrange(playerID, idx)

d.guesses<-d.guesses %>%
  mutate(nCritters = nRabbits + nSquirrels)
```

## Extremes of information within-game

```{r}
counts <- d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  group_by(gameID) %>%
  summarise(num_players = n_distinct(playerID)) 

group_counts <- table(counts$num_players)
print(group_counts)

# Calculate error and join with counts
d.guesses <- d.guesses %>%
   filter(!(playerID %in% confused)) %>%
   filter(!(playerID %in% persistentnoClick)) %>%
  mutate(error = abs(guess - mleEstimateGame)) %>%
    separate(treatmentName, into = c('condition', 'treatment'), sep = '-')  %>%
  left_join(counts, by = "gameID")


```

# filter from here

```{r}
d.guesses <- d.guesses %>%
filter(!(playerID %in% persistentnoClick)) %>%
    filter(!(playerID %in% confused)) %>%
      filter(num_players ==4) 
```

```{r}
d.guesses <- d.guesses %>%
  group_by(gameID, treatment) %>%
  mutate(
    true_prob = if_else(treatment == "0.7", 0.7, 0.3),
    kl_div = sum(mleEstimateIndiv * log(mleEstimateIndiv / mleEstimateGame), na.rm = TRUE)
  ) %>%
  ungroup()

```

```{r}
ggplot(d.guesses, aes(x = interaction(treatment, condition), y = abs(kl_div), fill = condition)) +
  geom_boxplot() +
  labs(title = "KL Divergence by Treatment and Condition",
       x = "Treatment-Condition Combination", y = "KL Divergence", fill = "Condition") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
calculate_unlikeliness <- function(personal_prob, true_prob) {
  # Convert percentages to probabilities if necessary
  personal_prob <- ifelse(personal_prob > 1, personal_prob / 100, personal_prob)
  true_prob <- ifelse(true_prob > 1, true_prob / 100, true_prob)
  alpha <- personal_prob  #
  beta <- 1 - personal_prob
  
  # Calculate how unlikely the true value is given the player's belief
  unlikeliness <- dbeta(true_prob, alpha, beta)
  
  return(unlikeliness)
}

d.guesses <- d.guesses %>%
  mutate(
    true_prob = if_else(treatment == "0.7", 0.7, 0.3),
    unlikeliness = calculate_unlikeliness(mleEstimateIndiv, mleEstimateGame),
  )

# Visualizing easiness scores
ggplot(d.guesses, aes(x = interaction(treatment, condition), y = unlikeliness, fill = condition)) +
  geom_boxplot() +
  labs(title = "likelihood by Treatment and Condition",
       x = "Treatment-Condition Combination", y = "likelihood", fill = "Condition") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
d.guesses %>%  

  ggplot(aes(x = unlikeliness, y =abs(error), color = condition, linetype = condition == 'interactive')) +
   geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none')
    labs(y = 'average error', x = 'round #', color = '')  +
    theme(aspect.ratio = 1, legend.position = 'top')
```

\

```{r}
d.guesses %>%  
  filter(idx == c(11,12)) %>%

  ggplot(aes(x = unlikeliness, y =abs(error), color = condition, linetype = condition == 'interactive')) +
   geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none')
    labs(y = 'average error', x = 'round #', color = '')  +
    theme(aspect.ratio = 1, legend.position = 'top')
```

```{r}
d.unlikeliness <- d.guesses %>%
  filter(condition == "unidirectional")

d.unlikeliness$unlikeliness_bin <- cut(d.unlikeliness$unlikeliness, breaks = seq(0.3, 0.8, by = 0.1))  
bin_counts <- table(d.unlikeliness$unlikeliness_bin)
print(bin_counts)
# Plotting



ggplot(d.unlikeliness, aes(x = idx, y = abs(error), color = unlikeliness_bin, linetype = unlikeliness_bin)) +

  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = 0, linetype = 'dotted') +
  labs(y = 'Average Error', x = 'idx', color = 'Unlikeliness Bin', linetype = 'Unlikeliness Bin') +
  scale_color_brewer(palette = 'Accent') +
  guides(linetype = 'none') +
  theme_minimal()

```
