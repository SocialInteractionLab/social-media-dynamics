distinct(gameID, .keep_all = TRUE) %>%
group_by(treatment, condition) %>%
tally()
truePs <- d.guesses %>%
filter(idx == 1) %>%
group_by(condition, treatment, gameID, nSquirrelsGame, nRabbitsGame) %>%
tally() %>%
group_by(condition, treatment) %>%
summarize(trueP = mean(nRabbitsGame / (nSquirrelsGame + nRabbitsGame), na.rm = T))
d.guesses %>%
group_by(condition, treatment, idx, gameID) %>%
summarize(guess = mean(guess, na.rm= T)) %>%
group_by(condition, treatment, idx) %>%
tidyboot::tidyboot_mean(guess, na.rm = T) %>%
left_join(truePs) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatment)) +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(aes(yintercept = trueP*100), linetype = 'dotted') +
theme_few() +
facet_grid(~ condition) +
labs(y = 'average guess', x = 'round #') +
scale_color_colorblind()
d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
summarize(gameError = mean(guess - mleEstimateGame, na.rm= T)) %>%
group_by(treatment, condition, idx) %>%
tidyboot::tidyboot_mean(gameError, na.rm = T) %>%
ggplot(aes(x = idx, y = empirical_stat, color = condition, group = interaction(condition, treatment))) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 1), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
theme_few() +
scale_color_colorblind() +
labs(y = 'average error', x = 'round #')
library(lmerTest)
conflicts_prefer(lmerTest::lmer)
d.guesses %>%
ungroup() %>%
mutate(condition = fct_relevel(condition, 'slider', 'unidirectional', 'interactive')) %>%
mutate(error = abs(guess - mleEstimateGame)) %>%
lmer(scale(error) ~ poly(idx, 2) + condition + (1 + poly(idx, 2) || gameID/playerID),
data = .,
contrasts = list(condition = contr.sum(3)),
control = lmerControl(optimizer = 'bobyqa')) %>%
summary()
d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm= T)) %>%
group_by(condition, idx) %>%
tidyboot::tidyboot_mean(error, na.rm = T) %>%
ggplot(aes(x = idx, y = empirical_stat, color = condition, linetype = condition == 'interactive')) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
theme_few() +
scale_color_brewer(palette = 'Accent') +
guides(linetype = 'none') +
scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
labs(y = 'average error', x = 'round #', color = '')  +
theme(aspect.ratio = 1, legend.position = 'top')
error_data <- d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame,playerID) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE)) %>%
ungroup()
model <- lmer(error ~ condition * idx + (1 | gameID/playerID), data = error_data)
#summary(model)
model2 <- lmer(error ~ idx + (1 | gameID/playerID), data = error_data)
#summary(model2)
model3 <- lmer(error ~ condition  + (1 | idx) + (1 | gameID/playerID), data = error_data)
summary(model3)
model4 <- lmer(error ~ idx + condition + (1 | gameID/playerID), data = error_data)
#summary(model4)
d.guesses %>%
ungroup() %>%
group_by(condition, gameID, idx) %>%
summarize(gameError = abs(mean(mleEstimateGame) - mean(guess, na.rm= T)),
nCrittersGame = mean(nCrittersGame)) %>%
ggplot(aes(x = nCrittersGame, y = log1p(gameError), color = condition)) +
geom_point(alpha = 0.25) +
geom_smooth(method = 'lm', formula = y ~ poly(x, 1)) +
theme_few() +
scale_color_brewer(palette = 'Accent') +
facet_grid(~ condition) +
labs(y = 'average error', x = 'total sample size') +
theme(aspect.ratio = 2, legend.position = 'none')
ggsave(here('exp2_prereg_samplesize.pdf'), height=3, width = 8)
m1 <- d.guesses %>%
ungroup() %>%
mutate(condition = fct_relevel(condition, 'slider', 'unidirectional', 'interactive')) %>%
mutate(nCrittersGame = nRabbitsGame + nSquirrelsGame,
error = abs(guess - mleEstimateGame)) %>%
lmer(scale(error) ~ condition + poly(nCrittersGame, 2) + idx +  (1 + idx | playerID),
data = .)
m2 <- d.guesses %>%
ungroup() %>%
mutate(condition = fct_relevel(condition,'unidirectional', 'slider',  'interactive')) %>%
mutate(nCrittersGame = nRabbitsGame + nSquirrelsGame,
error = abs(guess - mleEstimateGame)) %>%
lmer(scale(error) ~ condition * poly(nCrittersGame, 2) + idx + (1 + idx | playerID),
data = .)
anova(m1, m2)
summary(m2)
d.guesses %>%
arrange(playerID, idx) %>%
group_by(playerID) %>%
mutate(prevGuess = lag(guess)) %>%
mutate(distToSelf = abs(guess - prevGuess)) %>%
filter(idx > 2) %>%
group_by(idx, condition) %>%
tidyboot_mean(distToSelf, na.rm = TRUE) %>%
ggplot(aes(x = idx, y = empirical_stat, color = condition)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 1), se = FALSE) +
scale_color_brewer(palette = 'Accent') +
guides(linetype = 'none') +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10, 12)) +
labs(y = 'change from previous guess', x = 'reference point (round #)', color = '') +
theme_few() +
theme(aspect.ratio = 1, legend.position = 'top')
m1 <- d.guesses %>%
group_by(playerID) %>%
mutate(prevGuess = lag(guess)) %>%
arrange(playerID, idx) %>%
mutate(distToSelf = abs(guess - prevGuess)) %>%
group_by(idx, condition) %>%
filter(idx>1) %>%
lmer(distToSelf ~ poly(idx,2) + condition + (1+ poly(idx,2) | gameID/playerID),
data = .)
m2 <- d.guesses %>%
group_by(playerID) %>%
mutate(prevGuess = lag(guess)) %>%
arrange(playerID, idx) %>%
mutate(distToSelf = abs(guess - prevGuess)) %>%
group_by(idx, condition) %>%
filter(idx>1) %>%
lmer(distToSelf ~ poly(idx,2) * condition + (1+ poly(idx,2) | gameID/playerID),
data = .)
anova(m1,m2)
summary(m1)
error_data <- d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame,playerID) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE)) %>%
ungroup()
model <- lmer(error ~ condition * idx + (1 | gameID/playerID), data = error_data)
#summary(model)
model2 <- lmer(error ~ idx + (1 | gameID/playerID), data = error_data)
#summary(model2)
model3 <- lmer(error ~ condition  + (1 | idx) + (1 | gameID/playerID), data = error_data)
#summary(model3)
model4 <- lmer(error ~ idx + condition + (1 | gameID/playerID), data = error_data)
summary(model4)
error_data <- d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame,playerID) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE)) %>%
ungroup()
model <- lmer(error ~ condition * idx + (1 | gameID/playerID), data = error_data)
#summary(model)
model2 <- lmer(error ~ idx + (1 | gameID/playerID), data = error_data)
#summary(model2)
model3 <- lmer(error ~ condition  + (1 | idx) + (1 | gameID/playerID), data = error_data)
#summary(model3)
model4 <- lmer(error ~ idx + condition + (1 | gameID/playerID), data = error_data)
#summary(model4)
#bonferroni adjusts for multiple comparisons
pairwise_results <- model %>%
emmeans(pairwise ~ condition, adjust = "bonferroni") %>%
pluck("contrasts")
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(emmeans)
error_data <- d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame,playerID) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE)) %>%
ungroup()
model <- lmer(error ~ condition * idx + (1 | gameID/playerID), data = error_data)
#summary(model)
model2 <- lmer(error ~ idx + (1 | gameID/playerID), data = error_data)
#summary(model2)
model3 <- lmer(error ~ condition  + (1 | idx) + (1 | gameID/playerID), data = error_data)
#summary(model3)
model4 <- lmer(error ~ idx + condition + (1 | gameID/playerID), data = error_data)
#summary(model4)
#bonferroni adjusts for multiple comparisons
pairwise_results <- model %>%
emmeans(pairwise ~ condition, adjust = "bonferroni") %>%
pluck("contrasts")
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(emmeans)
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(emmeans)
install.packages("emmeans")
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(emmeans)
library(ggthemes)
theme_set(theme_few())
ParseJSONColumn <- function(x) {
str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>%
fromJSON(flatten = T)
}
d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))
d.guesses <- d.guesses %>%
filter(!is.na(treatmentName))
unique_rows <- d.guesses %>%
filter(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")) %>%
distinct(playerID, gameID, guess, roundID, .keep_all = TRUE)
# Remove excess rows from d.guesses
d.guesses <- d.guesses %>%
filter(!(treatmentName %in% c("rerun-unidirectional- 0.7", "rerun-unidirectional- 0.3")))
d.guesses <- bind_rows(d.guesses, unique_rows)
d.guesses <- d.guesses %>%
filter(idx != 1)
confused <- d.guesses %>%
filter(idx == 1) %>%
mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
mutate(discrepency = abs(guess - mleEstimate)) %>%
filter(discrepency > 70) %>%
pull(playerID)
persistentnoClick <- c()
for (i in 1:11) {
idx_pair <- c(i+1, i+2)
filtered_players <- d.guesses %>%
group_by(playerID) %>%
filter(all(is.na(guess[idx %in% idx_pair]))) %>%
filter(idx != 1) %>%  # Filter out idx == 1
distinct(playerID, .keep_all = TRUE) %>%
pull(playerID)
persistentnoClick <- c(persistentnoClick, filtered_players)
}
persistentnoClick <- unique(persistentnoClick)
games_with_4_players <- d.guesses %>%
filter(!(playerID %in% persistentnoClick)) %>%
group_by(gameID) %>%
summarise(unique_players = n_distinct(playerID)) %>%
filter(unique_players == 4)
d.guesses <- left_join(d.guesses, games_with_4_players, by = "gameID")
games_with_4_players <- games_with_4_players %>%
#filter(!(gameID %in% confused)) %>%
left_join(d.guesses, by = "gameID") %>%
select(gameID, treatmentName) %>%
distinct()
treatment_count <- as.data.frame(table(games_with_4_players$treatmentName))
print(treatment_count)
gameCounts <- d.guesses %>%
filter(!(gameID %in% persistentnoClick)) %>%
filter(idx == 1) %>%
group_by(gameID, playerID, nRabbits, nSquirrels) %>%
tally() %>%
group_by(gameID) %>%
mutate(nRabbitsGame = sum(nRabbits),
nSquirrelsGame = sum(nSquirrels))
d.guesses <- d.guesses %>%
filter(!(playerID %in% confused)) %>%
filter(!(playerID %in% persistentnoClick)) %>%
mutate(treatmentName = case_when(
treatmentName == "rerun-unidirectional- 0.7" ~ 'unidirectional-0.7',
treatmentName == "rerun-unidirectional- 0.3" ~ 'unidirectional-0.3',
treatmentName =="rerun-interactive-0.3" ~ 'interactive-0.3',
treatmentName =="rerun-interactive- 0.7" ~ 'interactive-0.7',
treatmentName =="rerun-slider- 0.3" ~ 'slider-0.3',
treatmentName =="rerun-slider- 0.7" ~ 'slider-0.7'
)) %>%
separate(treatmentName, into = c('condition', 'treatment'), sep = '-') %>%
left_join(gameCounts) %>%
mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
nCrittersGame = nRabbitsGame+nSquirrelsGame,
mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))  %>%
arrange(playerID, idx)
d.guesses %>%
filter(!is.na(treatment)) %>%
group_by(gameID, treatment) %>%
summarize(mleEstimate = mean(mleEstimateGame)) %>%
ggplot(aes(x = mleEstimate, fill = treatment)) +
geom_density(binwidth = 10, alpha = 0.5) +
theme_few()
playercount <- d.guesses %>%
filter(idx == 1) %>%
distinct(playerID, .keep_all = TRUE) %>%
group_by(treatment, condition) %>%
tally()
gamecount <- d.guesses %>%
filter(idx == 1) %>%
distinct(gameID, .keep_all = TRUE) %>%
group_by(treatment, condition) %>%
tally()
truePs <- d.guesses %>%
filter(idx == 1) %>%
group_by(condition, treatment, gameID, nSquirrelsGame, nRabbitsGame) %>%
tally() %>%
group_by(condition, treatment) %>%
summarize(trueP = mean(nRabbitsGame / (nSquirrelsGame + nRabbitsGame), na.rm = T))
d.guesses %>%
group_by(condition, treatment, idx, gameID) %>%
summarize(guess = mean(guess, na.rm= T)) %>%
group_by(condition, treatment, idx) %>%
tidyboot::tidyboot_mean(guess, na.rm = T) %>%
left_join(truePs) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatment)) +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(aes(yintercept = trueP*100), linetype = 'dotted') +
theme_few() +
facet_grid(~ condition) +
labs(y = 'average guess', x = 'round #') +
scale_color_colorblind()
d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
summarize(gameError = mean(guess - mleEstimateGame, na.rm= T)) %>%
group_by(treatment, condition, idx) %>%
tidyboot::tidyboot_mean(gameError, na.rm = T) %>%
ggplot(aes(x = idx, y = empirical_stat, color = condition, group = interaction(condition, treatment))) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 1), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
theme_few() +
scale_color_colorblind() +
labs(y = 'average error', x = 'round #')
library(lmerTest)
conflicts_prefer(lmerTest::lmer)
d.guesses %>%
ungroup() %>%
mutate(condition = fct_relevel(condition, 'slider', 'unidirectional', 'interactive')) %>%
mutate(error = abs(guess - mleEstimateGame)) %>%
lmer(scale(error) ~ poly(idx, 2) + condition + (1 + poly(idx, 2) || gameID/playerID),
data = .,
contrasts = list(condition = contr.sum(3)),
control = lmerControl(optimizer = 'bobyqa')) %>%
summary()
d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm= T)) %>%
group_by(condition, idx) %>%
tidyboot::tidyboot_mean(error, na.rm = T) %>%
ggplot(aes(x = idx, y = empirical_stat, color = condition, linetype = condition == 'interactive')) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
theme_few() +
scale_color_brewer(palette = 'Accent') +
guides(linetype = 'none') +
scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
labs(y = 'average error', x = 'round #', color = '')  +
theme(aspect.ratio = 1, legend.position = 'top')
error_data <- d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame,playerID) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE)) %>%
ungroup()
model <- lmer(error ~ condition * idx + (1 | gameID/playerID), data = error_data)
#summary(model)
model2 <- lmer(error ~ idx + (1 | gameID/playerID), data = error_data)
#summary(model2)
model3 <- lmer(error ~ condition  + (1 | idx) + (1 | gameID/playerID), data = error_data)
#summary(model3)
model4 <- lmer(error ~ idx + condition + (1 | gameID/playerID), data = error_data)
#summary(model4)
#bonferroni adjusts for multiple comparisons
pairwise_results <- model %>%
emmeans(pairwise ~ condition, adjust = "bonferroni") %>%
pluck("contrasts")
# View the pairwise comparisons
print(pairwise_results)
error_data <- d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame,playerID) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE)) %>%
ungroup()
model <- lmer(error ~ condition * idx + (1 | gameID/playerID), data = error_data, control = lmerControl(optCtrl = list(maxfun = 100000)
#summary(model)
model2 <- lmer(error ~ idx + (1 | gameID/playerID), data = error_data)
error_data <- d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame,playerID) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE)) %>%
ungroup()
model <- lmer(error ~ condition * idx + (1 | gameID/playerID), data = error_data, control = lmerControl(optCtrl = list(maxfun = 100000)))
#summary(model)
model2 <- lmer(error ~ idx + (1 | gameID/playerID), data = error_data)
#summary(model2)
model3 <- lmer(error ~ condition  + (1 | idx) + (1 | gameID/playerID), data = error_data)
#summary(model3)
model4 <- lmer(error ~ idx + condition + (1 | gameID/playerID), data = error_data)
#summary(model4)
#bonferroni adjusts for multiple comparisons
pairwise_results <- model %>%
emmeans(pairwise ~ condition, adjust = "bonferroni") %>%
pluck("contrasts")
# View the pairwise comparisons
print(pairwise_results)
emm_options(lmerTest.limit = 7826)
error_data <- d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame,playerID) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE)) %>%
ungroup()
model <- lmer(error ~ condition * idx + (1 | gameID/playerID), data = error_data, control = lmerControl(optCtrl = list(maxfun = 100000)))
#summary(model)
model2 <- lmer(error ~ idx + (1 | gameID/playerID), data = error_data)
#summary(model2)
model3 <- lmer(error ~ condition  + (1 | idx) + (1 | gameID/playerID), data = error_data)
#summary(model3)
model4 <- lmer(error ~ idx + condition + (1 | gameID/playerID), data = error_data)
#summary(model4)
#bonferroni adjusts for multiple comparisons
pairwise_results <- model %>%
emmeans(pairwise ~ condition, adjust = "bonferroni") %>%
pluck("contrasts")
# View the pairwise comparisons
print(pairwise_results)
emm_options(lmerTest.limit = 7826)
emm_options(pbkrtest.limit = 7826)
error_data <- d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame,playerID) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE)) %>%
ungroup()
model <- lmer(error ~ condition * idx + (1 | gameID/playerID), data = error_data, control = lmerControl(optCtrl = list(maxfun = 100000)))
#summary(model)
model2 <- lmer(error ~ idx + (1 | gameID/playerID), data = error_data)
#summary(model2)
model3 <- lmer(error ~ condition  + (1 | idx) + (1 | gameID/playerID), data = error_data)
#summary(model3)
model4 <- lmer(error ~ idx + condition + (1 | gameID/playerID), data = error_data)
#summary(model4)
#bonferroni adjusts for multiple comparisons
pairwise_results <- model %>%
emmeans(pairwise ~ condition, adjust = "bonferroni") %>%
pluck("contrasts")
# View the pairwise comparisons
print(pairwise_results)
emm_options(lmerTest.limit = 7826)
error_data <- d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame,playerID) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE)) %>%
ungroup()
model <- lmer(error ~ condition * idx + (1 | gameID/playerID), data = error_data, control = lmerControl(optCtrl = list(maxfun = 100000)))
#summary(model)
model2 <- lmer(error ~ idx + (1 | gameID/playerID), data = error_data)
#summary(model2)
model3 <- lmer(error ~ condition  + (1 | idx) + (1 | gameID/playerID), data = error_data)
#summary(model3)
model4 <- lmer(error ~ idx + condition + (1 | gameID/playerID), data = error_data)
#summary(model4)
#bonferroni adjusts for multiple comparisons
pairwise_results <- model %>%
emmeans(pairwise ~ condition, adjust = "bonferroni") %>%
pluck("contrasts")
# View the pairwise comparisons
print(pairwise_results)
install.packages("pbkrtest")
emm_options(lmerTest.limit = 7826)
error_data <- d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame,playerID) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE)) %>%
ungroup()
model <- lmer(error ~ condition * idx + (1 | gameID/playerID), data = error_data, control = lmerControl(optCtrl = list(maxfun = 100000)))
#summary(model)
model2 <- lmer(error ~ idx + (1 | gameID/playerID), data = error_data)
#summary(model2)
model3 <- lmer(error ~ condition  + (1 | idx) + (1 | gameID/playerID), data = error_data)
#summary(model3)
model4 <- lmer(error ~ idx + condition + (1 | gameID/playerID), data = error_data)
#summary(model4)
#bonferroni adjusts for multiple comparisons
pairwise_results <- model %>%
emmeans(pairwise ~ condition, adjust = "bonferroni") %>%
pluck("contrasts")
# View the pairwise comparisons
print(pairwise_results)
emm_options(lmerTest.limit = 7826)
emm_options(pbkrtest.limit = 7826)
error_data <- d.guesses %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame,playerID) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE)) %>%
ungroup()
model <- lmer(error ~ condition * idx + (1 | gameID/playerID), data = error_data, control = lmerControl(optCtrl = list(maxfun = 100000)))
#summary(model)
model2 <- lmer(error ~ idx + (1 | gameID/playerID), data = error_data)
#summary(model2)
model3 <- lmer(error ~ condition  + (1 | idx) + (1 | gameID/playerID), data = error_data)
#summary(model3)
model4 <- lmer(error ~ idx + condition + (1 | gameID/playerID), data = error_data)
#summary(model4)
#bonferroni adjusts for multiple comparisons
pairwise_results <- model %>%
emmeans(pairwise ~ condition, adjust = "bonferroni") %>%
pluck("contrasts")
# View the pairwise comparisons
print(pairwise_results)
library(pbkrtest)
install.packages("pbkrtest")
