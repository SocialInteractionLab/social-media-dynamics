---
title: "Experiment1"
format: html
editor: visual
---

### Import packages

```{r}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
```

### Read in data

```{r}
ParseJSONColumn <- function(x) {
  str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>% 
    fromJSON(flatten = T) 
}

# map game IDs to their treatments
d.treatments <- read_csv(here('data/experiment1/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()

# map game IDs to their treatments
d.players <- read_csv(here('data/experiment1/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

# map round IDs to their indices
d.rounds <- read_csv(here('data/experiment1/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()

# create long-form dataframe of all messages sent in each game
d.msgs <- read_csv(here('data/experiment1/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)

# create long-form dataframe of all guesses made in each game
d.guesses <- read_csv(here('data/experiment1/playerStages.csv')) %>% 
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% # experimenter practice game
  filter(!is.na(guess)) %>%
  select(gameID, roundID, playerID, guess) %>%
  left_join(d.rounds) %>%
  left_join(d.treatments) %>%
  left_join(d.players) %>% 
  distinct()
```

## Implement exclusions

```{r}
confused <- d.guesses %>%
  filter(idx == 1) %>%
  mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
  mutate(discrepency = abs(guess - mleEstimate)) %>% 
  filter(discrepency > 70) %>% 
  pull(playerID)

```

## Result #1: Convergence

```{r}
d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(guess = mean(guess)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(guess) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(30, 70), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average guess', x = 'round #') +
    scale_color_colorblind()
```

## Result #2: Examine error (collapsing across treatment)

```{r}
d.guesses <- d.guesses %>%
  mutate(indvPercent = ifelse(nRabbits > 0 & nSquirrels == 0, 100, 
                   ifelse(nSquirrels > 0 & nRabbits == 0, 1, 
                          ifelse(nRabbits + nSquirrels == 0, 0, 
                                 floor((nRabbits / (nRabbits + nSquirrels)) * 100))))) %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         AvgPercent = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))

d.guesses %>%
  group_by(gameID, treatmentName) %>%
  summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
  ggplot(aes(x = mleEstimate)) +
    geom_histogram(binwidth = 10) +
    facet_wrap(~ treatmentName, scales = "free") +
    labs(title = "Distribution of mleEstimate for each treatmentName")
```

```{r}
trueP <- d.guesses %>%
  group_by(treatmentName) %>%
  summarize(mean_AvgPercent = mean(mleEstimateIndiv, na.rm = TRUE))

list <- as.list(as.numeric(trueP$mean_AvgPercent))
d.guesses %>%
 #filter(!(playerID %in% confused)) %>% 
  #filter(!(playerID %in% persistentnoClick)) %>%
  #filter(!(playerID %in% GamingTheSystem)) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(guess = mean(guess, na.rm = TRUE)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(guess, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
  geom_hline(yintercept = c(32,66), linetype = 'dotted')+
  geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average guess', x = 'round #') +
    scale_color_colorblind()
```

## in-game player error (absolute)

```{r}
#d.guesses <- d.guesses %>%
 # mutate(error = abs(guess-AvgPercent))
unique_gameIDs <- unique(d.guesses$gameID)

#%>%
  #mutate(treatmentPercent = ifelse(.[[6]] == "experiment1-0.3", 30, 70))  %>%
  #mutate(treatmentError = abs(guess-treatmentPercent))
```

## exclude people who got no sample

```{r}
sampleLess <- d.guesses %>%
  filter(indvPercent == 0)
#print(sampleLess)
```

```{r}
d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  mutate(target = ifelse(treatmentName=='experiment1-0.3', 30, 70),
         error = guess - target) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(error = mean(error)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(abs(error))
```

```{r}
library(lmerTest)
d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  mutate(target = ifelse(treatmentName=='experiment1-0.3', 30, 70),
         error = abs(guess - target)) %>%
  lmerTest::lmer(error ~ poly(idx, 1) + treatmentName
                + (1 + poly(idx, 1) | gameID) 
                + (1 + poly(idx, 1) | playerID:gameID), 
       data = .) %>% 
  summary()

```

```{r}
d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  mutate(mleEstimate = 100 * nRabbits / (nRabbits + nSquirrels),
         distance = abs(guess - mleEstimate)) %>%
  lmerTest::lmer(distance ~ poly(idx, 1) + treatmentName
                + (1 + poly(idx, 1) | gameID) 
                + (1 + poly(idx, 1) | playerID:gameID), 
       data = .) %>% 
  summary()
```

```{r}
d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  mutate(mleEstimate = 100 * nRabbits / (nRabbits + nSquirrels),
         distance = abs(guess - mleEstimate),
         target = ifelse(treatmentName=='experiment1-0.3', 30, 70),
         error = abs(guess - target)) %>%
  pivot_longer(names_to = 'measure', values_to = 'value', cols = c('distance', 'error')) %>%
  group_by(gameID, idx, measure) %>%
  summarize(value = mean(value, na.rm = T)) %>%
  group_by(idx, measure) %>%
  tidyboot_mean(value) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = measure)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2)) +
    theme_few()
```

## 

# Result #3: Wisdom of Crowds

## participant error without absolute

```{r}
d.guesses <- d.guesses %>%
  mutate(wisError = guess-AvgPercent)#%>%
 # mutate(treatmentPercent = ifelse(.[[6]] == "experiment1-0.3", 30, 70))  %>%
#  mutate(wisTreatmentError = guess-treatmentPercent)
```

## average error per player within-game ratios

```{r}
d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(wisError) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average error', x = 'round', color="condition") +
    scale_color_colorblind(labels=c("30%","70%"))
```

## within-game error per player and average

```{r}
d.gameError <- d.guesses %>%
  group_by(gameID) %>%
  summarize(gameError = mean(wisError))

d.guesses <- left_join(d.guesses, d.gameError, by = "gameID",suffixes = c("", ""))
```

## crowd error

```{r}
# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]

# Create a ggplot for error over idx for both treatment names
plot_combined <- 
  ggplot(filtered_df, aes(x = idx, y = wisError, color = treatmentName)) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = mean(filtered_df$wisError), linetype = 'dotted') +
  theme_few() +
  labs(y = 'average error per game', x = 'round #', color="game p") +
  scale_color_colorblind(labels= c("30%","70%"))

# Print the combined plot
print(plot_combined)

```

# Result #4: Does individual data being an outlier create a consistent rate of error

```{r}
d.MLE <- d.guesses %>%
  mutate(outlierPercent = abs(indvPercent-AvgPercent))
```

```{r}
# Assuming you have a linear model fit earlier
model <- lm(abs(wisError) ~ outlierPercent, data = d.MLE)

# Calculate the slope difference
slope_difference <- coef(model)[2] - coef(model)[1]

# Now you can use it in the annotate function
ggplot(d.MLE, aes(x = outlierPercent, y = abs(wisError), color = idx)) +
  geom_point() +
  labs(y = "error", x = "individual p distance from game p", color= "round") +
  geom_smooth(method = "lm", se = FALSE, aes(group = idx)) +
  theme_minimal() +
  coord_cartesian(clip = "off") +  
  theme(legend.position = "right") #+ 
 # annotate("text", x = max(d.MLE$outlierPercent), y = max(d.MLE$error), 
   #        label = paste("decrease in slope", round(slope_difference, 2)),
   #        hjust = 1, vjust = 1, color = "black", size = 3)

```

```{r}
first <- d.MLE %>%   
  distinct(playerID, .keep_all = TRUE) %>%
  mutate(rounded_outlier = ceiling(outlierPercent/10)*10) %>%
  select(playerID, rounded_outlier)

second <- first %>% ungroup %>%
  select(playerID, rounded_outlier)
d.MLE <- d.MLE %>%
  left_join(select(second, playerID, rounded_outlier), by = "playerID")
```

```{r}
ggplot(d.MLE, aes(x = idx, y = abs(wisError), color = as.factor(rounded_outlier))) +
  geom_point() +
  labs(y = "Error", x = "Time", color = "Outlier Group") +  # Specify legend title here
  ggtitle("Scatter Plot of Error Over Time by Outlier Group") +
  geom_smooth(method = "lm", se = FALSE, aes(group = rounded_outlier)) +
  theme_minimal() +
  coord_cartesian(clip = "off") +  
  theme(legend.position = "bottom")
```

```{r}
validity <- d.MLE %>%
  distinct(playerID, rounded_outlier) %>%
  count(rounded_outlier)
print(validity)
```

## Individual MLE

```{r}
d.guesses$individualConsistency <- d.guesses$guess - d.guesses$indvPercent

# Create a line plot
ggplot(d.guesses, aes(x = idx, y = individualConsistency, group = playerID, )) +
  geom_line() +
  geom_point() +
  labs(title = "Player's Guess Difference from Personal Avg Over Time",
       x = "idx",
       y = "Difference (Guess - Truth)",
       color = "Player") +
  theme_minimal()
```

```{r}
ggplot(d.guesses, aes(x = individualConsistency, fill = factor(idx))) +
  geom_density(alpha = 0.5) +
  labs(title = "Density of Player's Guess Difference from Individual Over Time",
       x = "Difference (Guess - Personal p)",
       y = "Density",
       fill = "Round") +
  theme_minimal()
```

## Justified

```{r}
d.guesses <- d.guesses%>% 
  mutate(groupConsistency = guess-AvgPercent)
ggplot(d.guesses, aes(x = groupConsistency, fill = factor(-idx))) +
  geom_density(alpha = 0.5) +
  labs(title = "Density of Player's Guess Difference from Collective Over Time",
       x = "Difference (Guess - p)",
       y = "Density",
       fill = "Round") +
  theme_minimal()
```

```{r}
gameConsistency <- d.guesses %>% subset(groupConsistency != 0)

ggplot(gameConsistency, aes(x = individualConsistency, fill = factor(idx))) +
  geom_density(alpha = 0.5) +
  labs(title = "Density of Player's Guess Difference from Individual Over Time",
       x = "Difference (Guess - Personal p)",
       y = "Density",
       fill = "Round") +
  theme_minimal()
```

# Yonder

```{r}
crashMyReRun <-
```

## only people who got no sample

```{r}
{r}
sampleLess %>%
  filter(!(playerID %in% confused)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(error) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average error', x = 'round #') +
    scale_color_colorblind()
```

## remove games with sampleless players

```{r}
d.guesses %>%
  filter(!(gameID %in% sampleLess)) %>%
  filter(!(playerID %in% confused)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(error) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average error', x = 'round #') +
    scale_color_colorblind()
```

## only sampleless games

```{r}
samplelessGames <- sampleLess %>% distinct(gameID)
d.samplelessGames <- d.guesses %>%
  filter(gameID %in% samplelessGames$gameID)
d.samplelessGames %>%
  filter(!(playerID %in% confused)) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(guess = mean(guess)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(guess) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(30, 70), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average guess', x = 'round #') +
    scale_color_colorblind()
```

## absolute average error

```{r}
d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% sampleLess)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(error) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average error', x = 'round #') +
    scale_color_colorblind()
```

## per game abs error

```{r}

#for (gameID in unique_gameIDs) {
  #subset_df <- d.guesses[d.guesses$gameID == gameID, ]
   #plot <- ggplot(subset_df, aes(x = idx, y = error, color = as.factor(playerID))) +
    #geom_line() +
    #labs(title = paste("GameID:", gameID, "- Error Over idx by playerID"), x = "idx", y = "Error") +
    #theme_minimal()
  #print(plot)
#}
```

## avg abs error

```{r}
d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(error) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average error', x = 'round #') +
    scale_color_colorblind()
```

## avg error per player 70/30

```{r}
d.guesses %>%
  filter(!(playerID %in% confused)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(wisTreatmentError) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average error', x = 'round', color="game p") +
    scale_color_colorblind(labels=c("30%","70%"))
```

## per game average error

```{r}


filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]

for (gameID in unique_gameIDs) {
  subset_df <- filtered_df[filtered_df$gameID == gameID, ]

  plot <- 
    ggplot(subset_df, aes(x = idx, y = wisError)) +  
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
    theme_few() +
    labs(y = 'average error per game', x = 'round #') +
    scale_color_colorblind()
  print(plot) 
}

```

## all games error

```{r}

# Filter the data frame outside the loop
filtered_df <- d.guesses[!(d.guesses$playerID %in% confused), ]

# Create a ggplot for error over idx
plot <- 
  ggplot(filtered_df, aes(x = idx, y = wisError)) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = mean(filtered_df$wisError), linetype = 'dotted') +
  theme_few() +
  labs(y = 'error', x = 'round #') +
  scale_color_colorblind()

print(plot)
```

## indecisive

```{r}

#indecisive <- d.MLE %>%
 # group_by(playerID) %>%
  #filter(!(1 %in% idx)) %>%
#  pull(playerID) %>%
 # unique()

#print(indecisive)
```

## the spoilsport analysis

```{r}
{r}
spoilsport<- d.guesses %>%
  filter(idx == 8) %>%
  filter(individualConsistency == 0 ) %>% 
  pull(playerID)
```

```{r}
{r}
d.guesses %>%
  filter(!(playerID %in% spoilsport)) %>%
    filter(!(playerID %in% confused)) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(guess = mean(guess, na.rm = TRUE)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(guess) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(30, 70), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average guess', x = 'round #') +
    scale_color_colorblind()
```
