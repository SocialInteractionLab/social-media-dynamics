summarize(error = mean(abs(guess - AvgPercent), na.rm = TRUE), .groups = 'drop') %>%
group_by(treatment, idx, nCrittersGroup) %>%
tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
ungroup() %>%
mutate(nCrittersGroup = fct_relevel(nCrittersGroup, '< 18', '18-22', '> 22')) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatment)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
geom_hline(yintercept = 0, linetype = 'dotted') +
theme_few() +
scale_color_brewer(palette = 'Accent') +
scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
facet_wrap(~ nCrittersGroup) +
labs(y = 'average error', x = 'round #') +
theme(aspect.ratio = 1, legend.position = 'top')
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(lmerTest)
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
d.guesses <- read_csv(here('data/merged_data_exp.csv')) %>%
group_by(playerID) %>%
filter(any(!is.na(treatmentName))) %>%
ungroup()
playercount <- d.guesses %>%
filter(idx == 1) %>%
distinct(playerID, .keep_all = TRUE)
nrow(playercount)
keeper <- d.guesses %>%
select(gameID, playerID, idx, guess) %>%
filter(!is.na(guess))
d.guesses <-d.guesses %>% distinct(gameID, playerID, idx, .keep_all = TRUE)
d.guesses <- d.guesses %>%
left_join(keeper, by = c("gameID", "playerID", "idx")) %>%
mutate(guess = coalesce(guess.x, guess.y)) %>%
select(-guess.x, -guess.y)  # Remove redundant columns
d.guesses <- d.guesses %>%  distinct(.keep_all = TRUE)
confused <- d.guesses %>%
filter(idx == 1) %>%
mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
mutate(discrepency = abs(guess - mleEstimate)) %>%
filter(discrepency > 70) %>%
pull(playerID)
persistentnoClick <- c()
for (i in 1:7) {
idx_pair <- c(i, i+1)
filtered_players <- d.guesses %>%
group_by(playerID) %>%
filter(all(is.na(guess[idx %in% idx_pair]))) %>%
distinct(playerID, .keep_all = TRUE) %>%
pull(playerID)
persistentnoClick <- c(persistentnoClick, filtered_players)
}
print(length(unique(persistentnoClick)))
d.guesses <- d.guesses %>%
mutate(indvPercent = ifelse(nRabbits > 0 & nSquirrels == 0, 100,
ifelse(nSquirrels > 0 & nRabbits == 0, 1,
ifelse(nRabbits + nSquirrels == 0, 0,
floor((nRabbits / (nRabbits + nSquirrels)) * 100))))) %>%
group_by(idx, gameID) %>%
mutate(nRabbitsGame = sum(nRabbits),
nSquirrelsGame = sum(nSquirrels)) %>%
mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv)) %>%
mutate(nCrittersGame = nSquirrelsGame+nRabbitsGame)
d.guesses_filtered <- d.guesses %>%
filter(!(playerID %in% persistentnoClick)) %>%
mutate(treatmentName = case_when(
treatmentName == "experiment1-0.7" ~ 'unidirectional-0.7',
treatmentName == "experiment1-0.3" ~ 'unidirectional-0.3',
treatmentName =="experiment2-interactive-0.3" ~ 'interactive-0.3',
treatmentName =="experiment2-interactive-0.7" ~ 'interactive-0.7',
treatmentName =="experiment2-slider-0.3" ~ 'slider-0.3',
treatmentName =="experiment2-slider-0.7" ~ 'slider-0.7'
)) %>%
separate(treatmentName, into = c('condition', 'treatment'), sep = '-')
d.guesses_filtered %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm= T)) %>%
group_by(condition, idx) %>%
tidyboot::tidyboot_mean(error, na.rm = T) %>%
ggplot(aes(x = idx, y = empirical_stat, color = condition, linetype = condition == 'interactive')) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(0), linetype = 'dotted') +
theme_few() +
scale_color_brewer(palette = 'Accent') +
guides(linetype = 'none') +
scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
labs(y = 'average error', x = 'round #', color = '')  +
theme(aspect.ratio = 1, legend.position = 'top')
d.guesses %>%  filter(!(playerID %in% persistentnoClick)) %>%
group_by(treatmentName, idx, gameID) %>%
summarize(guess = mean(guess, na.rm = TRUE)) %>%
group_by(treatmentName, idx) %>%
tidyboot::tidyboot_mean(guess, na.rm = TRUE) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
geom_hline(yintercept = c(30,70), linetype = 'dotted') +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
theme_few() +
labs(y = 'average guess', x = 'round #') +
scale_color_colorblind()
d.guesses %>%
group_by(gameID, treatmentName) %>%
summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
ggplot(aes(x = mleEstimate)) +
geom_histogram(binwidth = 10) +
facet_wrap(~ treatmentName, scales = "free") +
labs(title = "Distribution of mleEstimate for each treatmentName")
trueP <- d.guesses %>%
group_by(treatmentName) %>%
summarize(mean_mleEstimateGame = mean(mleEstimateIndiv, na.rm = TRUE))
d.guesses <- left_join(d.guesses, trueP, by = "treatmentName")
d.guesses %>%
filter(!(playerID %in% persistentnoClick)) %>%
mutate(target = ifelse(treatmentName=='experiment1-0.3', 30, 70),
error = abs(guess - target)) %>%
lmerTest::lmer(error ~ poly(idx, 1) + treatmentName
+ (1 + poly(idx, 1) | gameID)
+ (1 + poly(idx, 1) | playerID:gameID),
data = .) %>%
summary()
d.guesses %>%
filter(!(playerID %in% persistentnoClick)) %>%
mutate(mleEstimate = 100 * nRabbits / (nRabbits + nSquirrels),
distance = abs(guess - mleEstimate)) %>%
lme4::lmer(distance ~ poly(idx, 1) + treatmentName
+ (1 + poly(idx, 1) | gameID)
+ (1 + poly(idx, 1) | playerID:gameID),
data = .) %>%
summary()
d.guesses %>%
filter(!(playerID %in% persistentnoClick)) %>%
mutate(mleEstimate = 100 * nRabbits / (nRabbits + nSquirrels),
distance = abs(guess - mleEstimate),
target = ifelse(treatmentName=='experiment1-0.3', 30, 70),
error = abs(guess - target)) %>%
pivot_longer(names_to = 'measure', values_to = 'value', cols = c('distance', 'error')) %>%
group_by(gameID, idx, measure) %>%
summarize(value = mean(value, na.rm = TRUE)) %>%
group_by(idx, measure) %>%
tidyboot_mean(value, na.rm = TRUE) %>%
ggplot(aes(x = idx, y = empirical_stat, color = measure)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2)) +
theme_few()
d.guesses <- d.guesses %>%
mutate(wisError = guess-mleEstimateGame)%>%
mutate(treatmentP = as.integer(str_extract(treatmentName, "\\d+$"))) %>%
mutate(collapsedTreatment = str_replace(treatmentName, "-0\\.3|-0\\.7", "")) # %>%
# mutate(treatError = guess-mean_mleEstimateGame)
d.guesses_filtered <- d.guesses_filtered %>%
mutate(wisError = guess-mleEstimateGame)%>%
mutate(treatmentP = as.integer(str_extract(treatmentName, "\\d+$"))) %>%
mutate(collapsedTreatment = str_replace(treatmentName, "-0\\.3|-0\\.7", "")) # %>%
# mutate(treatError = guess-mean_mleEstimateGame)
d.gameError <- d.guesses %>%
group_by(gameID) %>%
summarize(gameError = mean(wisError))
d.guesses <- left_join(d.guesses, d.gameError, by = "gameID")
d.guesses <- d.guesses %>%
mutate(outlierPercent = abs(mleEstimateIndiv-mleEstimateGame))
d.guesses_filtered <- d.guesses_filtered %>%
mutate(outlierPercent = abs(mleEstimateIndiv-mleEstimateGame))
# Assuming you have a linear model fit earlier
model <- lm(abs(wisError) ~ outlierPercent, data = d.guesses_filtered)
# Calculate the slope difference
slope_difference <- coef(model)[2] - coef(model)[1]
# Now you can use it in the annotate function
ggplot(d.guesses_filtered, aes(x = outlierPercent, y = abs(wisError), color = idx)) +
geom_point() +
labs(y = "Error", x = "Outlier Percent") +
ggtitle("Scatter Plot of Outlier Percent vs Error") +
geom_smooth(method = "lm", se = FALSE, aes(group = idx)) +
theme_minimal() +
coord_cartesian(clip = "off") +
theme(legend.position = "bottom") +
annotate("text", x = max(d.guesses_filtered$outlierPercent), y = max(d.guesses_filtered$error),
label = paste("Change across rounds:", round(slope_difference, 3)),
hjust = 1, vjust = 1, color = "black", size = 3)
validity <- d.guesses_filtered %>%
distinct(playerID, .keep_all = TRUE) %>%
group_by(round(outlierPercent)) %>%
summarize(count = n())
print(validity)
combined_data <-read_csv(here('analysis/0_exploratory/extracted_messages_exp2.csv'))
d.guesses_2 <- left_join(d.guesses, combined_data, by = c("playerID" = "recipient", "idx"= "round"))
d.neighbours <- d.guesses_2 %>%
select(playerID, guess, idx) %>%
rename(sender.id = playerID) %>%
rename(NeighborGuess = guess) %>%
ungroup()
d.guesses_2 <- left_join(d.guesses_2, d.neighbours, by = c("sender.id", "idx"))%>%
rename(gameID = gameID.x)
d.language <- d.guesses_2 %>%
filter(!is.na(sender.id)) %>%
rowwise() %>%
mutate(correlationSender = sqrt(sum((guess - NeighborGuess)^2))) %>%  group_by(gameID, idx)
d.language <-d.language %>%
group_by(playerID, gameID) %>%
mutate(guess_past = lag(guess, default = NA, order_by = idx)) %>%
fill(guess_past, .direction = "down") %>%
ungroup %>%
mutate(diffNeig = abs(guess-NeighborGuess)) %>%
mutate(diffPast = abs(guess-guess_past)) %>% filter(!is.na(guess)) %>% filter(!is.na(NeighborGuess)) %>%filter(!is.na(guess_past))
# group_by(gameID, idx) %>% filter(!is.na(guess)) %>% filter(!is.na(NeighborGuess)) %>%
#  mutate(correlationSender = cor(guess, NeighborGuess,use = "complete.obs")) %>% filter(TRUE) %>%
# filter(!is.na(guess)) %>% filter(!is.na(guess_past)) %>%
#mutate(correlationPast = cor(guess,guess_past, use = "complete.obs"))
ggplot(d.language, aes(x = diffNeig, fill = factor(-idx))) +
geom_density(alpha = 0.2) +
labs(title = "Density of Player's Guess Difference from Individual Over Time",
x = "Difference (Guess - Personal p)",
y = "Density",
fill = "Round") +
theme_minimal()
d.guesses <- d.guesses %>%
filter(!is.na(guess)) %>%
separate(treatmentName, into = c('condition', 'treatment'), sep = '-')
d.guesses %>%
mutate(nCrittersGroup = case_when(
nCrittersGame >= 10 & nCrittersGame <= 20 ~ 20,
nCrittersGame >= 21 & nCrittersGame <= 30 ~ 30,
nCrittersGame >= 31 & nCrittersGame <= 40 ~ 40,
nCrittersGame >= 41 & nCrittersGame <= 50 ~ 50,
nCrittersGame >= 51 & nCrittersGame <= 60 ~ 60,
nCrittersGame >= 61 & nCrittersGame <= 70 ~ 70,
nCrittersGame >= 71 & nCrittersGame <= 80 ~ 80,
nCrittersGame >= 81 & nCrittersGame <= 90 ~ 90,
nCrittersGame >= 91 & nCrittersGame <= 100 ~ 100,
TRUE ~ NA_real_
)) %>%
filter(!is.na(nCrittersGroup)) %>%
filter(treatment == 'interactive') %>%
group_by(nCrittersGroup) %>%
summarise(unique_games = n_distinct(gameID)) %>%
print()
d.guesses <- d.guesses%>%
mutate(nCrittersGroup = case_when(
nCrittersGame >= 0 & nCrittersGame <= 12 ~ "12",
nCrittersGame >= 13 & nCrittersGame <= 24 ~ "24",
nCrittersGame >= 25 & nCrittersGame <= 60 ~ "36",
)) %>%
filter(!is.na(nCrittersGroup))
custom_colors <- c("lightgreen", "forestgreen",  "seagreen")
d.guesses%>%
group_by(treatment, idx, gameID, mleEstimateGame, nCrittersGroup) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE), .groups = 'drop') %>%
group_by(treatment, idx, nCrittersGroup) %>%
tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
filter(treatment == 'interactive')%>%
ggplot(aes(x = idx, y = empirical_stat, color = nCrittersGroup)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
geom_hline(yintercept = 0, linetype = 'dotted') +
theme_few() +
scale_color_manual(values = custom_colors) +
scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
labs(y = 'average error', x = 'round #', color = 'Free Chat Condition') +
theme(aspect.ratio = 1, legend.position = 'top')
d.guesses %>%
mutate(nCrittersGroup = case_when(
nCrittersGame >= 10 & nCrittersGame <= 20 ~ 20,
nCrittersGame >= 21 & nCrittersGame <= 30 ~ 30,
nCrittersGame >= 31 & nCrittersGame <= 40 ~ 40,
nCrittersGame >= 41 & nCrittersGame <= 50 ~ 50,
nCrittersGame >= 51 & nCrittersGame <= 60 ~ 60,
nCrittersGame >= 61 & nCrittersGame <= 70 ~ 70,
nCrittersGame >= 71 & nCrittersGame <= 80 ~ 80,
nCrittersGame >= 81 & nCrittersGame <= 90 ~ 90,
nCrittersGame >= 91 & nCrittersGame <= 100 ~ 100,
TRUE ~ NA_real_
)) %>%
filter(!is.na(nCrittersGroup)) %>%
filter(condition == 'slider') %>%
group_by(nCrittersGroup) %>%
summarise(unique_games = n_distinct(gameID)) %>%
print()
d.guesses <- d.guesses%>%
mutate(nCrittersGroup = case_when(
nCrittersGame >= 0 & nCrittersGame <= 12 ~ "12",
nCrittersGame >= 13 & nCrittersGame <= 24 ~ "24",
nCrittersGame >= 25 & nCrittersGame <= 60 ~ "36",
)) %>%
filter(!is.na(nCrittersGroup))
custom_colors <-c("#e0bbff", "#b874ff", "#7e30ff")
d.guesses%>%
group_by(treatment, idx, gameID, mleEstimateGame, nCrittersGroup) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE), .groups = 'drop') %>%
group_by(treatment, idx, nCrittersGroup) %>%
tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
filter(treatment == 'slider')%>%
ggplot(aes(x = idx, y = empirical_stat, color = nCrittersGroup)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
geom_hline(yintercept = 0, linetype = 'dotted') +
theme_few() +
scale_color_manual(values = custom_colors) +
scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
labs(y = 'average error', x = 'round #', color = 'Scalar Condition') +
theme(aspect.ratio = 1, legend.position = 'top')
d.guesses %>%
mutate(nCrittersGroup = case_when(
nCrittersGame >= 10 & nCrittersGame <= 20 ~ 20,
nCrittersGame >= 21 & nCrittersGame <= 30 ~ 30,
nCrittersGame >= 31 & nCrittersGame <= 40 ~ 40,
nCrittersGame >= 41 & nCrittersGame <= 50 ~ 50,
nCrittersGame >= 51 & nCrittersGame <= 60 ~ 60,
nCrittersGame >= 61 & nCrittersGame <= 70 ~ 70,
nCrittersGame >= 71 & nCrittersGame <= 80 ~ 80,
nCrittersGame >= 81 & nCrittersGame <= 90 ~ 90,
nCrittersGame >= 91 & nCrittersGame <= 100 ~ 100,
TRUE ~ NA_real_
)) %>%
filter(!is.na(nCrittersGroup)) %>%
filter(condition == 'unidirectional') %>%
group_by(nCrittersGroup) %>%
summarise(unique_games = n_distinct(gameID)) %>%
print()
d.guesses <- d.guesses%>%
mutate(nCrittersGroup = case_when(
nCrittersGame >= 0 & nCrittersGame <= 12 ~ "12",
nCrittersGame >= 13 & nCrittersGame <= 24 ~ "24",
nCrittersGame >= 25 & nCrittersGame <= 60 ~ "36",
)) %>%
filter(!is.na(nCrittersGroup))
custom_colors <- c("#ffe0b3", "#ff9933", "#cc5200")
d.guesses%>%
group_by(treatment, idx, gameID, mleEstimateGame, nCrittersGroup) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE), .groups = 'drop') %>%
group_by(treatment, idx, nCrittersGroup) %>%
tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
filter(treatment %in% c('0.3')) %>% ggplot(aes(x = idx, y = empirical_stat, color = nCrittersGroup)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
geom_hline(yintercept = 0, linetype = 'dotted') +
theme_few() +
scale_color_manual(values = custom_colors) +
scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
labs(y = 'average error', x = 'round #', color = 'Unidirectional Condition') +
theme(aspect.ratio = 1, legend.position = 'top')
d.guesses %>%
mutate(nCrittersGroup = case_when(
nCrittersGame >= 10 & nCrittersGame <= 20 ~ 20,
nCrittersGame >= 21 & nCrittersGame <= 30 ~ 30,
nCrittersGame >= 31 & nCrittersGame <= 40 ~ 40,
nCrittersGame >= 41 & nCrittersGame <= 50 ~ 50,
nCrittersGame >= 51 & nCrittersGame <= 60 ~ 60,
nCrittersGame >= 61 & nCrittersGame <= 70 ~ 70,
nCrittersGame >= 71 & nCrittersGame <= 80 ~ 80,
nCrittersGame >= 81 & nCrittersGame <= 90 ~ 90,
nCrittersGame >= 91 & nCrittersGame <= 100 ~ 100,
TRUE ~ NA_real_
)) %>%
filter(!is.na(nCrittersGroup)) %>%
group_by(nCrittersGroup) %>%
summarise(unique_games = n_distinct(gameID)) %>%
print()
reducedInfo %>%
mutate(nCrittersGroup = case_when(
nCrittersGame >= 10 & nCrittersGame <= 20 ~ 20,
nCrittersGame >= 21 & nCrittersGame <= 30 ~ 30,
nCrittersGame >= 31 & nCrittersGame <= 60 ~ 60,
TRUE ~ NA_real_
)) %>%
filter(!is.na(nCrittersGroup)) %>%
group_by(treatment, condition, idx, gameID, mleEstimateGame, nCrittersGroup) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE), .groups = 'drop') %>%
group_by(condition, idx, nCrittersGroup) %>%
tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
ggplot(aes(x = idx, y = empirical_stat, color = nCrittersGroup, group = nCrittersGroup)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
geom_hline(yintercept = 0, linetype = 'dotted') +
theme_few() +
scale_color_gradient(low = "lightgreen", high = "darkgreen") +
guides(linetype = 'none') +
scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
labs(y = 'average error', x = 'round #', color = 'nCrittersGroup') +
theme(aspect.ratio = 1, legend.position = 'top') +facet_wrap(~condition)
d.guesses_filtered %>%
# filter(idx != 1) %>%
mutate(nCrittersGroup = case_when(
nCrittersGame >= 0 & nCrittersGame <= 17 ~ "< 18",
nCrittersGame >= 18 & nCrittersGame <= 22 ~ "18-22",
nCrittersGame >= 23 & nCrittersGame <= 60 ~ "> 22",
)) %>%
filter(!is.na(nCrittersGroup)) %>%
group_by(treatment, idx, gameID, AvgPercent, nCrittersGroup) %>%
summarize(error = mean(abs(guess - AvgPercent), na.rm = TRUE), .groups = 'drop') %>%
group_by(treatment, idx, nCrittersGroup) %>%
tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
ungroup() %>%
mutate(nCrittersGroup = fct_relevel(nCrittersGroup, '< 18', '18-22', '> 22')) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatment)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
geom_hline(yintercept = 0, linetype = 'dotted') +
theme_few() +
scale_color_brewer(palette = 'Accent') +
scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
facet_wrap(~ nCrittersGroup) +
labs(y = 'average error', x = 'round #') +
theme(aspect.ratio = 1, legend.position = 'top')
d.guesses_filtered %>%
# filter(idx != 1) %>%
mutate(nCrittersGroup = case_when(
nCrittersGame >= 0 & nCrittersGame <= 17 ~ "< 18",
nCrittersGame >= 18 & nCrittersGame <= 22 ~ "18-22",
nCrittersGame >= 23 & nCrittersGame <= 60 ~ "> 22",
)) %>%
filter(!is.na(nCrittersGroup)) %>%
group_by(treatment, idx, gameID, mleEstimateGame, nCrittersGroup) %>%
summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE), .groups = 'drop') %>%
group_by(treatment, idx, nCrittersGroup) %>%
tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
ungroup() %>%
mutate(nCrittersGroup = fct_relevel(nCrittersGroup, '< 18', '18-22', '> 22')) %>%
ggplot(aes(x = idx, y = empirical_stat, color = treatment)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
geom_hline(yintercept = 0, linetype = 'dotted') +
theme_few() +
scale_color_brewer(palette = 'Accent') +
scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
facet_wrap(~ nCrittersGroup) +
labs(y = 'average error', x = 'round #') +
theme(aspect.ratio = 1, legend.position = 'top')
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
# Load the necessary libraries
library(dplyr)
# Read the CSV files
chat_1 <- read_csv(here('data/0_extracted_msgs_exp1_2_exploratory/msgs_cleaned_exp1.csv'))
# Load the necessary libraries
library(dplyr)
# Read the CSV files
chat_1 <- read_csv(here('data/0_experiment2_exploratory/messages/msgs_cleaned_exp1.csv'))
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
# Load the necessary libraries
library(dplyr)
# Read the CSV files
chat_1 <- read_csv(here('data/0_experiment2_exploratory/messages/msgs_cleaned_exp1.csv'))
chat_2 <- read_csv(here('data/0_experiment2_exploratory/messages/messages_exp2.csv'))
chat_3 <- read_csv(here('data/1_preregistered_experiment_1/1_extracted_msgs_prereg/cleaned_messages.csv'))
# Standardize column names to lowercase
chat_1 <- chat_1 %>% rename_with(tolower)
chat_2 <- chat_2 %>% rename_with(tolower)
chat_3 <- chat_3 %>% rename_with(tolower)
# Find the union of all column names
all_columns <- union(union(names(chat_1), names(chat_2)), names(chat_3))
# Function to add missing columns with NA values
add_missing_columns <- function(df, all_cols) {
missing_cols <- setdiff(all_cols, names(df))
df[missing_cols] <- NA
return(df)
}
# Add missing columns to each dataframe
chat_1 <- add_missing_columns(chat_1, all_columns)
chat_2 <- add_missing_columns(chat_2, all_columns)
chat_3 <- add_missing_columns(chat_3, all_columns)
# Ensure columns are in the same order
chat_1 <- chat_1 %>% select(all_of(all_columns))
chat_2 <- chat_2 %>% select(all_of(all_columns))
chat_3 <- chat_3 %>% select(all_of(all_columns))
# Merge the dataframes
merged_chat <- bind_rows(chat_1, chat_2, chat_3) %>%
mutate(treatmentname = ifelse(treatmentname %in% c('experiment1-0.7', 'experiment1-0.3'),
'experiment1-unidirectional', treatmentname)) %>%
separate(treatmentname, into = c('condition', 'treatment'), sep = '-') %>%
# Display the merged dataframe
print(merged_chat)
coding_counts <- merged_chat %>%
filter (round >1 & round <9) %>%
separate_rows(coding, sep = "") %>%
filter(coding %in% c("n", "p", "t")) %>%
group_by(round, coding, treatment) %>%
summarise(count = n(), .groups = 'drop')
# Plot the occurrences over time
ggplot(coding_counts, aes(x = round, y = count,  color = coding, linetype = treatment)) +
geom_line() +
geom_point() +
labs(title = "",
x = "Round",
y = "Count",
color = "Coding") +
facet_grid(coding ~ ., scales = 'free_y') +
theme_few() +
theme(aspect.ratio = 1)
