labels = c("pn_count" = "personal number", "sn_count" = "social number",
"pb_count" = "personal belief", "sb_count" = "social belief")) +
labs(title = "",
x = "error (binned)",
y = "proportion",
fill = "message type") +
theme(aspect.ratio = 1, legend.position = "top") +
guides(fill = guide_legend(nrow = 2))
ggplot(summary_data, aes(x = avg_error, y =sb_count)) +
geom_point() +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
) +geom_smooth(method="lm")
summary_data %>% mutate(decile = ntile(avg_error, 5)) %>%
glm(sb_count ~ avg_error, family = "poisson",
data = .) %>% summary()
summary_data %>% mutate(decile = ntile(avg_error, 5)) %>%
glm(sn_count ~ avg_error, family = "poisson",
data = .) %>% summary()
summary_data %>% mutate(decile = ntile(avg_error, 5)) %>%
lm(log(avg_error) ~ sn_count+sb_count+pb_count+pn_count,
data = .) %>% summary()
d.allmsg2 <- d.allmsg %>%
mutate(
entropy_minmax = ifelse(entropy <= median(entropy), "H_etpy", "E_etpy"),
representation_minmax = ifelse(representation <= median(representation), "E_rep", "H_rep"),
nCrittersGame_minmax = ifelse(totalCritters <= median(totalCritters), "H_crits", "E_crits"), group = paste(entropy_minmax, representation_minmax, nCrittersGame_minmax, sep = "\n")
) %>%filter(group !='E_etpy\nH_rep\nE_crits') %>%
group_by(representation_bin, entropy_bin, nCrittersGame_bin, treatment) %>%
mutate(errorAvg = mean(error, na.rm = TRUE)) %>%
ungroup() %>%
filter(round == 8)
summary_data <- d.allmsg2 %>%
group_by(gameID, group) %>%
summarize(
avg_error = mean(error, na.rm = TRUE),
pn_count = sum(str_count(coding, "pn")),
sn_count = sum(str_count(coding, "sn")),
pb_count = sum(str_count(coding, "pb")),
sb_count = sum(str_count(coding, "sb"))
) %>% ungroup() %>%
mutate(
total_count = pn_count + sn_count + pb_count + sb_count,
pn_prop = pn_count / total_count,
sn_prop = sn_count / total_count,
pb_prop = pb_count / total_count,
sb_prop = sb_count / total_count
)
summary_data_long <- summary_data %>%
select(gameID, avg_error, pn_count, sn_count, pb_count, sb_count, group) %>%
pivot_longer(cols = c(pn_count, sn_count, pb_count, sb_count),
names_to = "message_type",
values_to = "count")
# Create deciles for avg_error
decile_breaks <- unique(quantile(summary_data_long$avg_error, probs = seq(0, 1, 0.2), na.rm = TRUE))
summary_data_long$decile <- cut(summary_data_long$avg_error,
breaks = decile_breaks,
include.lowest = TRUE, labels = FALSE)
# Summarize to calculate proportions per decile and group
summary_data_long_proportions <- summary_data_long %>%
group_by( group) %>%
mutate(total_count = sum(count)) %>%
ungroup() %>%
group_by( group, message_type) %>%
summarize(proportion = sum(count) / first(total_count), .groups = "drop")
# Set the custom order for 'group'
group_order <- c( "H_etpy\nE_rep\nH_crits", "H_etpy\nE_rep\nE_crits",
"E_etpy\nE_rep\nE_crits", "E_etpy\nE_rep\nH_crits", "H_etpy\nH_rep\nE_crits",
"E_etpy\nH_rep\nH_crits", "H_etpy\nH_rep\nH_crits", "E_etpy\nH_rep\nE_crits")
summary_data_long_proportions$group <- factor(summary_data_long_proportions$group, levels = group_order)
ggplot(summary_data_long_proportions, aes(x = group, y = proportion, fill = message_type)) +
geom_bar(stat = "identity", position = "stack") +
theme_few() +
labs(title = "Proportion of Message Types by Group",
x = "Group",
y = "Proportion",
fill = "Message Type") +
theme(legend.position = 'top',
axis.text.x = element_text(angle = 0, hjust = 1, vjust = 1),
plot.margin = margin(b = 20, l = 20, r = 20, t = 20)) +
scale_x_discrete(expand = c(0.02, 0.02)) +
theme(aspect.ratio = 0.5) # Made plot wider by reducing aspect ratio
d.allmsg2 <- d.allmsg %>%
filter(!is.na(guess))%>%
group_by(gameID, round) %>%
mutate(avg_error = mean(abs(error))) %>%
ungroup() %>%
group_by(gameID) %>%
mutate(
error_change_overall = (first(avg_error[round == max(round)]) - first(avg_error[round == min(round)])),
s_count = sum(str_count(coding, "s"), na.rm = TRUE)
) %>%
ungroup()
d.allmsg_exp1_2 <- d.allmsg_exp1 %>%
filter(!is.na(guess))%>%
group_by(gameID, round) %>%
mutate(avg_error = mean(abs(error))) %>%
ungroup() %>%
group_by(gameID) %>%
mutate(
error_change_overall = (first(avg_error[round == max(round)]) - first(avg_error[round == min(round)])),
s_count = sum(str_count(coding, "s"), na.rm = TRUE)
) %>%
ungroup()
ggplot(subset(d.allmsg_exp1_2, round == 12), aes(x = s_count, y = error_change_overall)) +
geom_point() +geom_smooth(method="lm")+
labs(
y = "error_change_overall",
x = "s",
title = "Scatter Plot of Error vs S Count"
)
ggplot(subset(d.allmsg2, round == 8), aes(x = s_count, y = error_change_overall)) +
geom_point() + geom_smooth(method="lm")+
labs(
y = "error_change_overall",
x = "s",
title = "Scatter Plot of Error vs S Count"
)
d.allmsg2 <- d.allmsg2 %>%
select(-text) %>%
group_by(across(-coding)) %>%
summarise(coding = paste(coding, collapse = " "), .groups = "drop")
d.allmsg_exp1_2 <- d.allmsg_exp1_2 %>%
select(-text) %>%
group_by(across(-coding)) %>%
summarise(coding = paste(coding, collapse = " "), .groups = "drop")
d.allmsg2 <- d.allmsg2 %>%
mutate(round = as.numeric(round)) %>%
left_join(
d.allmsg2 %>%
mutate(round = as.numeric(round)) %>%
mutate(round = round + 1) %>%
select(gameID, recipient, round, coding) %>%
rename(coding_received = coding),
by = c("gameID", "sender.id" = "recipient", "round")
)%>%
mutate(coding_received_s =  paste0(
if_else(str_detect(coding_received, "s"), "s", ""),
if_else(str_detect(coding_received, "p"), "p", "")
))%>%
mutate(roundError = abs(mleGame*100 - guess))
d.allmsg_exp1_2 <- d.allmsg_exp1_2 %>%
mutate(round = as.numeric(round)) %>%
left_join(
d.allmsg_exp1_2 %>%
mutate(round = as.numeric(round)) %>%
mutate(round = round + 1) %>%
select(gameID, recipient, round, coding) %>%
rename(coding_received = coding),
by = c("gameID", "sender.id" = "recipient", "round")
)%>%
mutate(coding_received_s =  paste0(
if_else(str_detect(coding_received, "s"), "s", ""),
if_else(str_detect(coding_received, "p"), "p", "")
))%>%
mutate(roundError = abs(mleGame*100 - guess))
d.allmsg2 <- d.allmsg2%>%
left_join(
d.allmsg2 %>%
mutate(round = as.numeric(round)) %>%
mutate(round = round + 1) %>%
select(gameID, sender.id, round, roundError) %>%
rename(roundErrorPrev = roundError),
by = c("gameID", "sender.id", "round"))%>%
mutate(roundErrorChange = abs(roundErrorPrev - roundError))
d.allmsg_exp1_2 <- d.allmsg_exp1_2%>%
left_join(
d.allmsg_exp1_2 %>%
mutate(round = as.numeric(round)) %>%
mutate(round = round + 1) %>%
select(gameID, sender.id, round, roundError) %>%
rename(roundErrorPrev = roundError),
by = c("gameID", "sender.id", "round"))%>%
mutate(roundErrorChange = abs(roundErrorPrev - roundError))
d.allmsg2 <- d.allmsg2 %>%
mutate(s_bin = cut(s_count, breaks = seq(min(s_count), max(s_count), length.out = 3), include.lowest = TRUE))
d.allmsg_exp1_2 <- d.allmsg_exp1_2 %>%
filter(!treatment == "unidirectional")%>%
mutate(s_bin = cut(s_count, breaks = seq(min(s_count), max(s_count), length.out = 3), include.lowest = TRUE))
ggplot(d.allmsg2, aes(x = round, y = error, color = s_bin)) +
geom_smooth(method = 'lm') +
stat_summary(fun = mean, geom = "point")+
theme_minimal()
#lmer(error ~ s_bin + (1 | gameID), data = d.allmsg2)
#glm(log(error) ~ s_bin, family = "poisson",
#    data = d.allmsg2)
ggplot(d.allmsg_exp1_2, aes(x = round, y = error, color = s_bin)) +
geom_smooth(method = 'lm') +
stat_summary(fun = mean, geom = "point")+
theme_minimal()
#lmer(error ~ s_bin + (1 | gameID), data = d.allmsg_exp1_2)
summary(glm((error+0.1) ~ s_count*round, family = "Gamma",
data = d.allmsg2))
summary(lm((error) ~ s_count*round,
data = d.allmsg2))
d.allmsg2 <- d.allmsg2 %>%
mutate(s_bin = ifelse(s_count < 5, "zero", "not zero"))
d.allmsg_exp1_2 <- d.allmsg_exp1_2 %>%
filter(!treatment== "unidirectional")%>%
mutate(s_bin = ifelse(s_count <5, "zero", "not zero"))
ggplot(d.allmsg2, aes(x = round, y = error, color = s_bin)) +
geom_smooth(method = 'lm') +
#geom_point() +
theme_minimal()
lmer(error ~ s_bin + (1 | gameID), data = d.allmsg2)
#glm(log(error) ~ s_bin, family = "poisson",
#    data = d.allmsg2)
ggplot(d.allmsg_exp1_2, aes(x = round, y = error, color = s_bin)) +
geom_smooth(method = 'lm') +
#geom_point() +
theme_minimal()
summary(lmer(error ~ s_count*round + (1 | gameID), data = d.allmsg_exp1_2))
summary(lmer(error ~ s_count*round + (1 | gameID), data = d.allmsg2))
heatmap_test <- d.allmsg %>%
filter(!treatment== "unidirectional")%>%
group_by(treatment, direction, nCrittersGame_bin, representation_bin) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(prop = count / sum(count, na.rm = TRUE))
ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1,
axis.text.x = element_text(angle = 45, hjust = 1)
) +
facet_wrap(~treatment #+ direction
)
heatmap_test <- d.allmsg %>%
filter(!treatment== "unidirectional")%>%
group_by(treatment, direction, entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "entropy", y = "representation") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
) +
facet_wrap(~treatment #+ direction
)
nCritters_entropy_heatmap_new <- d.allmsg %>%
filter(!treatment== "unidirectional")%>%
group_by(treatment, direction, nCrittersGame_bin, entropy_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(nCritters_entropy_heatmap_new, aes(x = entropy_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Entropy", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
) +
facet_wrap(~treatment #+ direction
)
heatmap_test <- d.allmsg_exp1 %>%
filter(!treatment== "unidirectional")%>%
group_by(treatment, direction, nCrittersGame_bin, representation_bin) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(prop = count / sum(count, na.rm = TRUE))
ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1,
axis.text.x = element_text(angle = 45, hjust = 1)
) +
facet_wrap(~treatment #+ direction
)
heatmap_test <- d.allmsg_exp1 %>%
filter(!treatment== "unidirectional")%>%
group_by(treatment, direction, entropy_bin, representation_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "entropy", y = "representation") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
) +
facet_wrap(~treatment #+ direction
)
nCritters_entropy_heatmap_new <- d.allmsg_exp1 %>%
filter(!treatment== "unidirectional")%>%
group_by(treatment, direction, nCrittersGame_bin, entropy_bin) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(count))
ggplot(nCritters_entropy_heatmap_new, aes(x = entropy_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(name = "Count of Games", low = "lightblue", high = "darkblue") +
labs(x = "Entropy", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1, axis.text.x = element_text(angle = 45, hjust = 1)
) +
facet_wrap(~treatment #+ direction
)
heatmap_test <- combined_df %>%
filter(!treatment == "unidirectional") %>%
group_by(treatment, direction, nCrittersGame_bin, representation_bin) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(prop = count / sum(count, na.rm = TRUE))
ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(
name = "Count of Games",
low = "lightgreen",  high = "darkblue",
trans = "log",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = function(x) formatC(x, format = "f", digits = 0, big.mark = ",")
) +
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1,
axis.text.x = element_text(angle = 45, hjust = 1)
) +
facet_wrap(~treatment)
heatmap_test <- combined_df %>%
filter(!treatment == "unidirectional") %>%
group_by(treatment, direction, entropy_bin, representation_bin) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(prop = count / sum(count))
ggplot(heatmap_test, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(
name = "Count of Games",
low = "lightgreen",  high = "darkblue",
trans = "log",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = function(x) formatC(x, format = "f", digits = 0, big.mark = ",")
) +
labs(x = "Entropy", y = "Representation") +
theme_few() +
theme(
aspect.ratio = 1,
axis.text.x = element_text(angle = 45, hjust = 1)
) +
facet_wrap(~treatment)
nCritters_entropy_heatmap_new <- combined_df %>%
filter(!treatment == "unidirectional") %>%
group_by(treatment, direction, nCrittersGame_bin, entropy_bin) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(prop = count / sum(count))
ggplot(nCritters_entropy_heatmap_new, aes(x = entropy_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = count), color = "white") +
scale_fill_gradient(
name = "Count of Games",
low = "lightgreen",
high = "darkblue",
trans = "log",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = function(x) formatC(x, format = "f", digits = 0, big.mark = ",")
) +
labs(x = "Entropy", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1,
axis.text.x = element_text(angle = 45, hjust = 1)
) +
facet_wrap(~treatment)
combined_df2 <- bind_rows(d.allmsg2, d.allmsg_exp1_2)
combined_df2 <- combined_df2 %>%
mutate(s_bin = cut(s_count, breaks = seq(min(s_count), max(s_count), length.out = 3), include.lowest = TRUE)) %>%
filter(!treatment == "unidirectional")
ggplot(combined_df2, aes(x = round, y = error, color = s_bin)) +
geom_smooth(method = 'lm',formula = y~poly(x,2)) +
stat_summary(fun = mean, geom = "point")+
theme_minimal()
summary(lmer(error ~ s_count*round + (1 | gameID), data = combined_df2))
d.all_minmax <- combined_df2 %>%  mutate(
entropy_median = median(entropy_new),
representation_median = median(representation),
nCrittersGame_median = median(totalCritters)
) %>%
mutate(
entropy_minmax = ifelse(entropy_new <= entropy_median, "H_etpy", "E_etpy"),
representation_minmax = ifelse(representation <= representation_median, "E_rep", "H_rep"),
nCrittersGame_minmax = ifelse(totalCritters <= nCrittersGame_median, "H_crits", "E_crits"),
group = paste(entropy_minmax, representation_minmax, nCrittersGame_minmax, sep = "\n")
) %>%
group_by(gameID, s_bin) %>%
mutate(errorAvg = mean(error, na.rm = TRUE)) %>%
ungroup()
print(unique(d.all_minmax %>% select(entropy_median, representation_median, nCrittersGame_median)))
lm_model <- lm(errorAvg ~ group, data = d.all_minmax)
# Calculate center lines and their distances
group_distances <- d.all_minmax %>%
filter(group !='E_etpy\nH_rep\nE_crits') %>%
group_by(group, s_bin) %>%
summarise(median_error = median(errorAvg)) %>%
pivot_wider(names_from = s_bin, values_from = median_error) %>%
mutate(distance = abs(`(19.5,39]` - `[0,19.5]`)) %>%
arrange(distance)
# Calculate game counts per group and s_count condition
counts <- d.all_minmax %>%
filter(group !='E_etpy\nH_rep\nE_crits') %>%
group_by(group, s_bin) %>%
summarise(nGames = n()) %>%
pivot_wider(names_from = s_bin, values_from = nGames, names_prefix = "nGames_")
# Calculate center lines for group ordering
center_lines <- d.all_minmax %>%
group_by(group, s_bin) %>%
filter(group !='E_etpy\nH_rep\nE_crits')%>%
summarise(center_line = median(errorAvg)) %>%
pivot_wider(names_from = s_bin, values_from = center_line) %>%
mutate(center_line_distance =abs(`(19.5,39]` - `[0,19.5]`))
# Reorder groups based on center line distance
d.all_minmax2 <- d.all_minmax %>%
mutate(group = factor(group, levels = center_lines %>%
arrange(center_line_distance) %>%
pull(group))) %>%
filter(group !='E_etpy\nH_rep\nE_crits') %>%
droplevels()
d <- d.all_minmax2 %>%
ggplot(aes(x = group, y = errorAvg, color = as.factor(s_bin), fill = as.factor(s_bin))) +
scale_color_brewer(palette = 'Accent') +
scale_fill_brewer(palette = 'Accent') +
geom_boxplot(alpha = 0.5) +
labs(x = "", y = "Error", color = "s_bin", fill = "s_bin") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),
legend.position = "top",
panel.background = element_rect(fill = NA, color = "black"),
panel.grid = element_blank())
d
combined_df_final_rounds <- bind_rows(d.allmsg2[d.allmsg2$round == 8, ],
d.allmsg_exp1_2[d.allmsg_exp1_2$round == 12, ])
heatmap_test <- combined_df_final_rounds%>%
group_by(representation_bin, nCrittersGame_bin, s_bin) %>%
summarize(errorAvg = mean(error, na.rm = TRUE))
ggplot(heatmap_test, aes(x = representation_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = errorAvg), color = "white") +  # Fill by error
scale_fill_gradient(name = "Error", low = "lightblue", high = "darkblue") +  # Adjust scale
labs(x = "Representation", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1,
axis.text.x = element_text(angle = 45, hjust = 1)
) +
facet_wrap(~s_bin)
heatmap_test_2 <- combined_df_final_rounds%>%
group_by(entropy_bin, nCrittersGame_bin, s_bin) %>%
summarize(errorAvg = mean(error, na.rm = TRUE))
ggplot(heatmap_test_2, aes(x = entropy_bin, y = nCrittersGame_bin)) +
geom_tile(aes(fill = errorAvg), color = "white") +  # Fill by error
scale_fill_gradient(name = "Error", low = "lightblue", high = "darkblue") +  # Adjust scale
labs(x = "Entropy", y = "nCrittersGame") +
theme_few() +
theme(
aspect.ratio = 1,
axis.text.x = element_text(angle = 45, hjust = 1)
) +
facet_wrap(~s_bin)
heatmap_test_3 <- combined_df_final_rounds%>%
group_by(representation_bin, entropy_bin, s_bin) %>%
summarize(errorAvg = mean(error, na.rm = TRUE))
ggplot(heatmap_test_3, aes(x = entropy_bin, y = representation_bin)) +
geom_tile(aes(fill = errorAvg), color = "white") +  # Fill by error
scale_fill_gradient(name = "Error", low = "lightblue", high = "darkblue") +  # Adjust scale
labs(x = "Entropy", y = "Representation") +
theme_few() +
theme(
aspect.ratio = 1,
axis.text.x = element_text(angle = 45, hjust = 1)
) +
facet_wrap(~s_bin)
combined_s_participants <- combined_df2 %>%
group_by(gameID) %>%
mutate(s_player_count = n_distinct(sender.id[str_detect(coding, "s")])) %>%
ungroup() %>%
mutate(s_player_count = as.factor(s_player_count)) %>%
filter(treatment != "unidirectional")
ggplot(combined_s_participants, aes(x = round, y = error, color = s_player_count)) +
geom_smooth(method = 'lm',
# formula = y ~ poly(x, 2)
) +
stat_summary(fun = mean, geom = "point") +
theme_minimal() +
facet_wrap(~s_bin)
combined_df2 <- combined_df2 %>%
group_by(gameID) %>%
mutate(s_player_count = n_distinct(sender.id[str_detect(coding, "s")])) %>%
ungroup() %>%
mutate(s_player_count_group = ifelse(s_player_count <= 1, "0-1", "2-4")) %>%
filter(treatment != "unidirectional")
ggplot(combined_df2, aes(x = round, y = error, color = s_player_count_group)) +
geom_smooth(method = 'lm',
# formula = y ~ poly(x, 2)
) +
stat_summary(fun = mean, geom = "point") +
theme_minimal()
model1 <-  lmerTest::lmer(error ~ s_player_count*round + (1 | gameID), data = combined_s_participants)
summary(model1)
model2 <-  lmerTest::lmer(error ~ s_player_count_group*round + (1 | gameID), data = combined_df2)
summary(model2)
combined_df %>%
ggplot(aes(x = as.numeric(error))) +
geom_histogram(binwidth =1) +
facet_wrap(~ direction, scales = "free") +
#xlim(0,100) +
labs(title = "Distribution of mleEstimate for each treatmentName") +
theme_few() #+facet_wrap(~treatment)
