---
title: "Experiment2"
format: html
editor: visual
---

### Import packages

```{r, include=FALSE}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(lmerTest)

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
```

### Read in data

```{r, include=FALSE}
d.guesses <- read_csv(here('data/merged_data_exp.csv')) %>%
  group_by(playerID) %>%
  filter(any(!is.na(treatmentName))) %>%
  ungroup()

```

## Implement exclusions

```{r}
playercount <- d.guesses %>%
   filter(idx == 1) %>%
   distinct(playerID, .keep_all = TRUE)
nrow(playercount)

```

```{r}
keeper <- d.guesses %>%
  select(gameID, playerID, idx, guess) %>%
  filter(!is.na(guess))

d.guesses <-d.guesses %>% distinct(gameID, playerID, idx, .keep_all = TRUE)

d.guesses <- d.guesses %>%
  left_join(keeper, by = c("gameID", "playerID", "idx")) %>%
  mutate(guess = coalesce(guess.x, guess.y)) %>%
  select(-guess.x, -guess.y)  # Remove redundant columns

d.guesses <- d.guesses %>%  distinct(.keep_all = TRUE)

```

```{r}
#confused <- d.guesses %>%
 # filter(idx == 1) %>%
#  mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
 # mutate(discrepency = abs(guess - mleEstimate)) %>% 
#  filter(discrepency > 70) %>% 
 # pull(playerID)

persistentnoClick <- c()  
for (i in 1:7) {
  idx_pair <- c(i, i+1)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx %in% idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}
print(length(unique(persistentnoClick)))


d.guesses <- d.guesses %>%
  mutate(indvPercent = ifelse(nRabbits > 0 & nSquirrels == 0, 100, 
                   ifelse(nSquirrels > 0 & nRabbits == 0, 1, 
                          ifelse(nRabbits + nSquirrels == 0, 0, 
                                 floor((nRabbits / (nRabbits + nSquirrels)) * 100))))) %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv)) %>% 
  mutate(nCrittersGame = nSquirrelsGame+nRabbitsGame)

d.guesses_filtered <- d.guesses %>%
  filter(!(playerID %in% persistentnoClick)) %>%
    mutate(treatmentName = case_when(
    treatmentName == "experiment1-0.7" ~ 'unidirectional-0.7',
    treatmentName == "experiment1-0.3" ~ 'unidirectional-0.3',
    treatmentName =="experiment2-interactive-0.3" ~ 'interactive-0.3',
    treatmentName =="experiment2-interactive-0.7" ~ 'interactive-0.7',
    treatmentName =="experiment2-slider-0.3" ~ 'slider-0.3',
    treatmentName =="experiment2-slider-0.7" ~ 'slider-0.7'
  )) %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-')



```

## Result #1: Convergence (based on assigned p)

```{r}
d.guesses_filtered %>%  
  group_by(treatment, condition, idx, gameID, mleEstimateGame) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm= T)) %>%
  group_by(condition, idx) %>%
  tidyboot::tidyboot_mean(error, na.rm = T) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = condition, linetype = condition == 'interactive')) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none') +
    scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
    labs(y = 'average error', x = 'round #', color = '')  +
    theme(aspect.ratio = 1, legend.position = 'top')
```

```{r}
d.guesses %>%  filter(!(playerID %in% persistentnoClick)) %>%

  group_by(treatmentName, idx, gameID) %>%
  summarize(guess = mean(guess, na.rm = TRUE)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(guess, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
  geom_hline(yintercept = c(30,70), linetype = 'dotted') +
  theme_few() +
  labs(y = 'average guess', x = 'round #') +
  scale_color_colorblind()
```

## Result #2: Examine error (collapsing across treatment)

## in-game treatment average from the player's critters

```{r}
d.guesses %>%
  group_by(gameID, treatmentName) %>%
  summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
  ggplot(aes(x = mleEstimate)) +
    geom_histogram(binwidth = 10) +
    facet_wrap(~ treatmentName, scales = "free") +
    labs(title = "Distribution of mleEstimate for each treatmentName")

```

```{r}
trueP <- d.guesses %>% 
  group_by(treatmentName) %>%
  summarize(mean_mleEstimateGame = mean(mleEstimateIndiv, na.rm = TRUE))

d.guesses <- left_join(d.guesses, trueP, by = "treatmentName")

```

## 

```{r}
d.guesses %>% 
  filter(!(playerID %in% persistentnoClick)) %>%
  mutate(target = ifelse(treatmentName=='experiment1-0.3', 30, 70),
         error = abs(guess - target)) %>%
  lmerTest::lmer(error ~ poly(idx, 1) + treatmentName
                + (1 + poly(idx, 1) | gameID) 
                + (1 + poly(idx, 1) | playerID:gameID), 
       data = .) %>% 
  summary()
```

```{r}
d.guesses %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  mutate(mleEstimate = 100 * nRabbits / (nRabbits + nSquirrels),
         distance = abs(guess - mleEstimate)) %>%
  lme4::lmer(distance ~ poly(idx, 1) + treatmentName
                + (1 + poly(idx, 1) | gameID) 
                + (1 + poly(idx, 1) | playerID:gameID), 
       data = .) %>% 
summary()
```

```{r}
d.guesses %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  mutate(mleEstimate = 100 * nRabbits / (nRabbits + nSquirrels),
         distance = abs(guess - mleEstimate),
         target = ifelse(treatmentName=='experiment1-0.3', 30, 70),
         error = abs(guess - target)) %>%
  pivot_longer(names_to = 'measure', values_to = 'value', cols = c('distance', 'error')) %>%
  group_by(gameID, idx, measure) %>%
  summarize(value = mean(value, na.rm = TRUE)) %>%
  group_by(idx, measure) %>%
  tidyboot_mean(value, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = measure)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2)) +
    theme_few()

```

## 

# Result #3: Wisdom of Crowds

## participant error without absolute

```{r}
d.guesses <- d.guesses %>%
  mutate(wisError = guess-mleEstimateGame)%>% 
  mutate(treatmentP = as.integer(str_extract(treatmentName, "\\d+$"))) %>%
  mutate(collapsedTreatment = str_replace(treatmentName, "-0\\.3|-0\\.7", "")) # %>%
 # mutate(treatError = guess-mean_mleEstimateGame)

d.guesses_filtered <- d.guesses_filtered %>%
  mutate(wisError = guess-mleEstimateGame) %>%
  mutate(treatError = guess-mean(mleEstimateGame))
```

```{r}
d.gameError <- d.guesses %>%
  group_by(gameID) %>%
  summarize(gameError = mean(wisError))

d.guesses <- left_join(d.guesses, d.gameError, by = "gameID")

```

# Result #4: Does individual data being an outlier create a consistent rate of error

```{r}
d.guesses <- d.guesses %>%
  mutate(outlierPercent = abs(mleEstimateIndiv-mleEstimateGame))

d.guesses_filtered <- d.guesses_filtered %>%
  mutate(outlierPercent = abs(mleEstimateIndiv-mleEstimateGame))
```

```{r}

d.guesses_filtered <-d.guesses %>%  
  filter(!(playerID %in% persistentnoClick))%>%
  mutate(outlierPercent = abs(mleEstimateIndiv - mleEstimateGame)) %>%
  mutate(error = guess - mleEstimateGame)

# Assuming you have a linear model fit earlier
ggplot(d.guesses_filtered, aes(x = outlierPercent, y = error, color = idx)) +
  geom_jitter(alpha = 0.1) +
  labs(y = "average error", x = "outlier degree", color= "round") +
  geom_smooth(aes(group = idx), method = "lm", se = FALSE, alpha = 0.3) +
  theme_few() +
  scale_color_continuous_tableau(palette = 'Classic Blue') +
  guides(color = guide_colorbar(nbin = 9, barheight = 7,barwidth=0.5,
                                 title.position = "top"))+
  theme(legend.position = "right", aspect.ratio = 1)  +
  ylim(-80,80) +
  xlim(0, 80)

#ggsave(here('exp1_outlier.pdf'), height=3, width = 3)
d.guesses_filtered %>%
  lme4::lmer(error ~ scale(outlierPercent) * scale(idx) + (1 + scale(outlierPercent) + scale(idx) | gameID), 
       data = .) %>% 
  summary()


```

```{r}
validity <- d.guesses_filtered %>%   
  distinct(playerID, .keep_all = TRUE) %>%
  group_by(round(outlierPercent)) %>%
  summarize(count = n())
print(validity)
```

## Correlation in-game

```{r}
combined_data <-read_csv(here('analysis/0_exploratory/extracted_messages_exp2.csv'))

d.guesses_2 <- left_join(d.guesses, combined_data, by = c("playerID" = "recipient", "idx"= "round"))


d.neighbours <- d.guesses_2 %>%
  select(playerID, guess, idx) %>%
  rename(sender.id = playerID) %>%
  rename(NeighborGuess = guess) %>%
  ungroup()

d.guesses_2 <- left_join(d.guesses_2, d.neighbours, by = c("sender.id", "idx"))%>%
  rename(gameID = gameID.x)

```

```{r}
d.guesses <- d.guesses %>% 
  filter(!is.na(guess)) %>%
  separate(treatmentName, into = c('condition', 'treatment'), sep = '-') 
```

# error to nCritters (information quantity)

```{r}


d.guesses %>%
  mutate(nCrittersGroup = case_when(
    nCrittersGame >= 10 & nCrittersGame <= 20 ~ 20,
    nCrittersGame >= 21 & nCrittersGame <= 30 ~ 30,
    nCrittersGame >= 31 & nCrittersGame <= 40 ~ 40,
    nCrittersGame >= 41 & nCrittersGame <= 50 ~ 50,
    nCrittersGame >= 51 & nCrittersGame <= 60 ~ 60,
    nCrittersGame >= 61 & nCrittersGame <= 70 ~ 70,
    nCrittersGame >= 71 & nCrittersGame <= 80 ~ 80,
    nCrittersGame >= 81 & nCrittersGame <= 90 ~ 90,
    nCrittersGame >= 91 & nCrittersGame <= 100 ~ 100,
    TRUE ~ NA_real_
  )) %>%
  filter(!is.na(nCrittersGroup)) %>%
  filter(treatment == 'interactive') %>%
  group_by(nCrittersGroup) %>%
  summarise(unique_games = n_distinct(gameID)) %>%
  print()

d.guesses <- d.guesses%>%
  mutate(nCrittersGroup = case_when(
    nCrittersGame >= 0 & nCrittersGame <= 12 ~ "12",
    nCrittersGame >= 13 & nCrittersGame <= 24 ~ "24",
    nCrittersGame >= 25 & nCrittersGame <= 60 ~ "36",
  )) %>%
    filter(!is.na(nCrittersGroup)) 

custom_colors <- c("lightgreen", "forestgreen",  "seagreen")

d.guesses%>% 
  group_by(treatment, idx, gameID, mleEstimateGame, nCrittersGroup) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE), .groups = 'drop') %>%
  group_by(treatment, idx, nCrittersGroup) %>%
  tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
  filter(treatment == 'interactive')%>%
 ggplot(aes(x = idx, y = empirical_stat, color = nCrittersGroup)) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = 0, linetype = 'dotted') +
  theme_few() +
  scale_color_manual(values = custom_colors) +
  scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
  labs(y = 'average error', x = 'round #', color = 'Free Chat Condition') +
  theme(aspect.ratio = 1, legend.position = 'top')
```

```{r}
d.guesses %>%
  mutate(nCrittersGroup = case_when(
    nCrittersGame >= 10 & nCrittersGame <= 20 ~ 20,
    nCrittersGame >= 21 & nCrittersGame <= 30 ~ 30,
    nCrittersGame >= 31 & nCrittersGame <= 40 ~ 40,
    nCrittersGame >= 41 & nCrittersGame <= 50 ~ 50,
    nCrittersGame >= 51 & nCrittersGame <= 60 ~ 60,
    nCrittersGame >= 61 & nCrittersGame <= 70 ~ 70,
    nCrittersGame >= 71 & nCrittersGame <= 80 ~ 80,
    nCrittersGame >= 81 & nCrittersGame <= 90 ~ 90,
    nCrittersGame >= 91 & nCrittersGame <= 100 ~ 100,
    TRUE ~ NA_real_
  )) %>%
  filter(!is.na(nCrittersGroup)) %>%
  filter(condition == 'slider') %>%
  group_by(nCrittersGroup) %>%
  summarise(unique_games = n_distinct(gameID)) %>%
  print()
d.guesses <- d.guesses%>%
  mutate(nCrittersGroup = case_when(
    nCrittersGame >= 0 & nCrittersGame <= 12 ~ "12",
    nCrittersGame >= 13 & nCrittersGame <= 24 ~ "24",
    nCrittersGame >= 25 & nCrittersGame <= 60 ~ "36",
  )) %>%
    filter(!is.na(nCrittersGroup)) 

custom_colors <-c("#e0bbff", "#b874ff", "#7e30ff")

d.guesses%>% 
  group_by(treatment, idx, gameID, mleEstimateGame, nCrittersGroup) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE), .groups = 'drop') %>%
  group_by(treatment, idx, nCrittersGroup) %>%
  tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
  filter(treatment == 'slider')%>%
 ggplot(aes(x = idx, y = empirical_stat, color = nCrittersGroup)) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = 0, linetype = 'dotted') +
  theme_few() +
  scale_color_manual(values = custom_colors) +
  scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
  labs(y = 'average error', x = 'round #', color = 'Scalar Condition') +
  theme(aspect.ratio = 1, legend.position = 'top')
```

```{r}
d.guesses %>%
  mutate(nCrittersGroup = case_when(
    nCrittersGame >= 10 & nCrittersGame <= 20 ~ 20,
    nCrittersGame >= 21 & nCrittersGame <= 30 ~ 30,
    nCrittersGame >= 31 & nCrittersGame <= 40 ~ 40,
    nCrittersGame >= 41 & nCrittersGame <= 50 ~ 50,
    nCrittersGame >= 51 & nCrittersGame <= 60 ~ 60,
    nCrittersGame >= 61 & nCrittersGame <= 70 ~ 70,
    nCrittersGame >= 71 & nCrittersGame <= 80 ~ 80,
    nCrittersGame >= 81 & nCrittersGame <= 90 ~ 90,
    nCrittersGame >= 91 & nCrittersGame <= 100 ~ 100,
    TRUE ~ NA_real_
  )) %>%
  filter(!is.na(nCrittersGroup)) %>%
  filter(condition == 'unidirectional') %>%
  group_by(nCrittersGroup) %>%
  summarise(unique_games = n_distinct(gameID)) %>%
  print()
d.guesses <- d.guesses%>%
  mutate(nCrittersGroup = case_when(
    nCrittersGame >= 0 & nCrittersGame <= 12 ~ "12",
    nCrittersGame >= 13 & nCrittersGame <= 24 ~ "24",
    nCrittersGame >= 25 & nCrittersGame <= 60 ~ "36",
  )) %>%
    filter(!is.na(nCrittersGroup)) 

custom_colors <- c("#ffe0b3", "#ff9933", "#cc5200")


d.guesses%>% 
  group_by(treatment, idx, gameID, mleEstimateGame, nCrittersGroup) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE), .groups = 'drop') %>%
  group_by(treatment, idx, nCrittersGroup) %>%
  tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
filter(treatment %in% c('0.3')) %>% ggplot(aes(x = idx, y = empirical_stat, color = nCrittersGroup)) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = 0, linetype = 'dotted') +
  theme_few() +
  scale_color_manual(values = custom_colors) +
  scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
  labs(y = 'average error', x = 'round #', color = 'Unidirectional Condition') +
  theme(aspect.ratio = 1, legend.position = 'top')
```

# error based on assigned p

```{r}
d.guesses %>% mutate(treatment = recode(treatment, `0.7` = "unidirectional", `0.3` = "unidirectional")) %>%
  mutate(nCrittersGroup = case_when(
    nCrittersGame >= 0 & nCrittersGame <= 17 ~ "< 18",
    nCrittersGame >= 18 & nCrittersGame <= 22 ~ "18-22",
    nCrittersGame >= 23 & nCrittersGame <= 60 ~ "> 22",
  )) %>%
  filter(!is.na(nCrittersGroup)) %>%
  group_by(treatment, idx, gameID, mleEstimateGame, nCrittersGroup) %>%
  summarize(error = mean(abs(guess - mleEstimateGame), na.rm = TRUE), .groups = 'drop') %>%
  group_by(treatment, idx, nCrittersGroup) %>%
  tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
  ungroup() %>%
  mutate(nCrittersGroup = fct_relevel(nCrittersGroup, '< 18', '18-22', '> 22')) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatment)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
    geom_hline(yintercept = 0, linetype = 'dotted') +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
    facet_wrap(~ nCrittersGroup) +
    labs(y = 'average error', x = 'round #') +
    theme(aspect.ratio = 1, legend.position = 'top')
```

```{r}
playercount <- d.guesses %>%
   filter(idx == 1) %>%
   distinct(playerID, .keep_all = TRUE)

nrow(playercount)
```

# error based on game-level p

```{r}
d.guesses.collapsed <- d.guesses %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels),
         nCrittersGame = nSquirrelsGame+nRabbitsGame) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         AvgPercent = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv)) %>%
  mutate(wisError = guess-AvgPercent) %>% mutate(treatment = recode(treatment, `0.7` = "unidirectional", `0.3` = "unidirectional")) %>%
  filter(!is.na(guess))
```

```{r}
d.guesses.collapsed %>%
 # filter(idx != 1) %>%
  mutate(nCrittersGroup = case_when(
    nCrittersGame >= 0 & nCrittersGame <= 17 ~ "< 18",
    nCrittersGame >= 18 & nCrittersGame <= 22 ~ "18-22",
    nCrittersGame >= 23 & nCrittersGame <= 60 ~ "> 22",
  )) %>%
  filter(!is.na(nCrittersGroup)) %>%
  group_by(treatment, idx, gameID, AvgPercent, nCrittersGroup) %>%
  summarize(error = mean(abs(guess - AvgPercent), na.rm = TRUE), .groups = 'drop') %>%
  group_by(treatment, idx, nCrittersGroup) %>%
  tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
  ungroup() %>%
  mutate(nCrittersGroup = fct_relevel(nCrittersGroup, '< 18', '18-22', '> 22')) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatment)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
    geom_hline(yintercept = 0, linetype = 'dotted') +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
    facet_wrap(~ nCrittersGroup) +
    labs(y = 'average error', x = 'round #') +
    theme(aspect.ratio = 1, legend.position = 'top')
```

```{r}
d.guesses.collapsed  %>% 
  group_by(treatment, condition, idx, gameID, AvgPercent) %>%
  summarize(error = mean(abs(guess - AvgPercent), na.rm= T)) %>%
  group_by(treatment, idx) %>%
  tidyboot::tidyboot_mean(error, na.rm = T) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatment, linetype = treatment == 'unidirectional')) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none') +
    scale_x_continuous(breaks = c(1,3,5,7,9,11)) +
    labs(y = 'average error', x = 'round #', color = '')  +
    theme(aspect.ratio = 1, legend.position = 'top')
```

```{r}
conflicts_prefer(lme4::lmer)
stats <- d.guesses.collapsed %>%
  mutate(treatment = recode(treatment, `0.7` = "unidirectional", `0.3` = "unidirectional")) %>%
  group_by(treatment, condition, idx, AvgPercent) %>%
  summarize(error = mean(abs(guess - AvgPercent), na.rm = TRUE)) %>%
  group_by(treatment, idx) %>%
  tidyboot::tidyboot_mean(error, na.rm = TRUE)

# Fit the mixed-effects model
model <- lmer(empirical_stat ~ treatment * poly(idx, 2) + (1 | idx), data = stats)

# Summarize the model to get fixed effects and p-values
summary(model)
```

```{r}
d.guesses.collapsed %>%
    mutate(treatment = recode(treatment, `0.7` = "unidirectional", `0.3` = "unidirectional")) %>%
  ungroup() %>%
  group_by(treatment, gameID, idx) %>%
  summarize(gameError = abs(mean(AvgPercent) - mean(guess, na.rm= T)),
            nCrittersGame = mean(nCrittersGame)) %>%
  ggplot(aes(x = nCrittersGame, y = log1p(gameError), color = treatment)) +
    geom_point(alpha = 0.25) +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 1), se = FALSE) +
    theme_few() +
    scale_color_brewer(palette = 'Accent') +
    facet_grid(~ treatment) +
    labs(y = 'average error', x = 'total sample size') +
    theme(aspect.ratio = 2, legend.position = 'none')
```

```{r}
d.guesses.collapsed %>% 
      mutate(treatment = recode(treatment, `0.7` = "unidirectional", `0.3` = "unidirectional")) %>%
  group_by(playerID) %>%
  mutate(prevGuess = lag(guess)) %>% 
  arrange(playerID, idx) %>%
  mutate(distToSelf = abs(guess - prevGuess)) %>%
  group_by(idx, treatment) %>% 
  filter(idx>1) %>%
  tidyboot_mean(distToSelf, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatment)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y~ poly(x, 1), se = F) +
    scale_color_brewer(palette = 'Accent') +
    guides(linetype = 'none') +
    scale_x_continuous(breaks = c(2,4,6,8)) +
    labs(y = 'change from previous guess', x = 'reference point (round #)', color = '') +
    theme_few() +
    theme(aspect.ratio = 1, legend.position = 'top')
```

```{r}
d.guesses.collapsed %>%
        mutate(treatment = recode(treatment, `0.7` = "unidirectional", `0.3` = "unidirectional")) %>%
  mutate(nCrittersGroup = case_when(
    nCrittersGame >= 10 & nCrittersGame <= 20 ~ 20,
    nCrittersGame >= 21 & nCrittersGame <= 30 ~ 30,
    nCrittersGame >= 31 & nCrittersGame <= 40 ~ 40,
    nCrittersGame >= 41 & nCrittersGame <= 50 ~ 50,
    nCrittersGame >= 51 & nCrittersGame <= 60 ~ 60,
    nCrittersGame >= 61 & nCrittersGame <= 70 ~ 70,
    nCrittersGame >= 71 & nCrittersGame <= 80 ~ 80,
    nCrittersGame >= 81 & nCrittersGame <= 90 ~ 90,
    nCrittersGame >= 91 & nCrittersGame <= 100 ~ 100,
    TRUE ~ NA_real_
  )) %>%
  filter(!is.na(nCrittersGroup)) %>%
  filter(treatment == 'interactive') %>%
  group_by(nCrittersGroup) %>%
  summarise(unique_games = n_distinct(gameID)) %>%
  print()

d.guesses.collapsed %>%
  mutate(nCrittersGroup = case_when(
    nCrittersGame >= 0 & nCrittersGame <= 10 ~ "0-10",
    nCrittersGame > 10 & nCrittersGame <= 20 ~ "11-20",
    nCrittersGame > 20 & nCrittersGame <= 30 ~ "21-30",
    nCrittersGame > 30 & nCrittersGame <= 40 ~ "31-40",
    TRUE ~ NA_character_
  )) %>%
  filter(!is.na(nCrittersGroup)) %>% 
  group_by(treatment, idx, gameID, AvgPercent, nCrittersGroup) %>%
  summarize(error = mean(abs(guess - AvgPercent), na.rm = TRUE), .groups = 'drop') %>%
  group_by(treatment, idx, nCrittersGroup) %>%
  tidyboot::tidyboot_mean(error, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = nCrittersGroup, group = nCrittersGroup, linetype = 'interactive')) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = 0, linetype = 'dotted') +
  theme_few() +
  scale_color_manual(values = c("0-10" = "lightblue", "11-20" = "blue", "21-30" = "darkblue", "31-40" = "navy")) +
  guides(linetype = 'none') +
  scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11)) +
  labs(y = 'average error', x = 'round #', color = 'Number of Critters') +
  theme(aspect.ratio = 1, legend.position = 'top')

```

```{r}
d.guesses <- d.guesses %>%
  mutate(indvPercent = ifelse(nRabbits > 0 & nSquirrels == 0, 100, 
                   ifelse(nSquirrels > 0 & nRabbits == 0, 1, 
                          ifelse(nRabbits + nSquirrels == 0, 0, 
                                 floor((nRabbits / (nRabbits + nSquirrels)) * 100))))) %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         AvgPercent = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))

d.guesses.collapsed %>%
  group_by(gameID, treatment) %>%
  #summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
  ggplot(aes(x = nCrittersGame)) +
    geom_histogram(binwidth = 5) +
    #facet_wrap(~ treatmentName, scales = "free") +
   # labs(title = "Critters ") +
    theme_few()
```
