---
title: "Experiment1"
format: html
editor: visual
---

# Import packages

```{r, include=FALSE}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
library(lmerTest)
conflicts_prefer(lmerTest::lmer)
library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
```

## Read in data

```{r, include=FALSE}
ParseJSONColumn <- function(x) {
  str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>% 
    fromJSON(flatten = T) 
}

# map game IDs to their treatments
d.treatments <- read_csv(here('data/0_experiment1_exploratory/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()

# map game IDs to their treatments
d.players <- read_csv(here('data/0_experiment1_exploratory/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

# map round IDs to their indices
d.rounds <- read_csv(here('data/0_experiment1_exploratory/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()

# create long-form dataframe of all messages sent in each game
d.msgs <- read_csv(here('data/0_experiment1_exploratory/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)

# create long-form dataframe of all guesses made in each game
d.guesses <- read_csv(here('data/0_experiment1_exploratory/playerStages.csv')) %>% 
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% # experimenter practice game
  filter(!is.na(guess)) %>%
  select(gameID, roundID, playerID, guess) %>%
  left_join(d.rounds) %>%
  left_join(d.treatments) %>%
  left_join(d.players) %>% 
  distinct() %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         mleEstimateGame = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))

```

## Implement exclusions

```{r}
persistentnoClick <- c()  
for (i in 1:7) {
  idx_pair <- c(i, i+1)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx %in% idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}

confused <- d.guesses %>%
  filter(idx == 1) %>%
  mutate(discrepency = abs(guess - mleEstimateIndiv)) %>% 
  filter(discrepency > 70) %>% 
  pull(playerID)


d.guesses_filtered <-d.guesses %>%
 # filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick))%>%
  mutate(outlierPercent = abs(mleEstimateIndiv - mleEstimateGame)) %>%
  mutate(error = guess - mleEstimateGame)

cat('excluding', length(confused), 'for being >70 points off estimate at the beginning. ') 
cat('excluding', length(persistentnoClick %>% unique()), 'more for inattentiveness')
```

# Result #1: Absolute convergence

```{r}
truePs <- d.guesses %>% 
  filter(idx == 1) %>%
  group_by(treatmentName, gameID, nSquirrelsGame, nRabbitsGame) %>%
  tally() %>%
  group_by(treatmentName) %>%
  summarize(p = mean(nRabbitsGame / (nSquirrelsGame + nRabbitsGame)))

d.guesses_filtered %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(guess = mean(guess)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(guess) %>%
  mutate(treatmentName = case_when(treatmentName == 'experiment1-0.3' ~ 'p=0.3',
                                   treatmentName == 'experiment1-0.7' ~ 'p=0.7')) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(31.63546	, 68.64803), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill=treatmentName),color=NA, alpha = 0.1) +
    theme_few() +
    labs(y = 'average guess', x = 'round #', color = '') +
    scale_color_colorblind() +
    scale_fill_colorblind(guide='none') +
    scale_x_continuous(breaks = c(1,3,5,7,9)) +
    theme(aspect.ratio = 1, legend.position = 'top')

```

```{r}
d.guesses_filtered %>%
  lmerTest::lmer(guess ~ poly(idx, 2) + treatmentName
                + (1 + poly(idx, 1) || gameID) 
                + (1 + poly(idx, 1) || playerID:gameID), 
       data = ., 
       contrasts = list(treatmentName = contr.sum(2))) %>% 
  summary()
```

# Result #2: Examine error (collapsing across treatment)

```{r}
d.guesses_filtered %>%
  group_by(gameID, treatmentName) %>%
  summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
  ggplot(aes(x = mleEstimate)) +
    geom_histogram(binwidth = 10) +
    facet_wrap(~ treatmentName, scales = "free") +
    #xlim(0,100) +
    labs(title = "Distribution of mleEstimate for each treatmentName") +
  theme_few()

d.guesses %>% 
  group_by(gameID, treatmentName) %>%
  summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
  ggplot(aes(x = mleEstimate)) +
    geom_histogram(binwidth = 10) +
    facet_wrap(~ treatmentName, scales = "free") +
    #xlim(0,100) +
    labs(title = "Distribution of mleEstimate for each treatmentName") +
  theme_few()
```

```{r}
d.guesses_filtered %>%
  filter(!(playerID %in% confused)) %>%
  filter(!(playerID %in% persistentnoClick)) %>%
  mutate(error = abs(guess - mleEstimateGame)) %>%
  lmerTest::lmer(error ~ poly(idx, 2) * treatmentName
                + (1 + poly(idx, 1) | gameID) 
                + (1 + poly(idx, 1) | playerID:gameID), 
       data = ., 
       contrasts = list(treatmentName = contr.sum(2))) %>% 
  summary()
```

```{r}
d.guesses_filtered %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(error = mean(abs(guess - mleEstimateGame))) %>%
  group_by(treatmentName, idx) %>%
  tidyboot_mean(error) %>%
  mutate(treatmentName = case_when(treatmentName == 'experiment1-0.3' ~ 'p=0.3',
                                  treatmentName == 'experiment1-0.7' ~ 'p=0.7')) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill = treatmentName), 
                color = NA, 
                alpha = 0.1) +
    geom_hline(yintercept = 0, linetype = 'dotted') +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se =F) +
    theme_few() +
    labs(y = 'average error', x = 'round #', color = '') +
    scale_color_colorblind() +
    scale_fill_colorblind(guide="none") +
    ylim(0, 30) +
    scale_x_continuous(breaks = c(1,3,5,7,9)) +
    theme(aspect.ratio = 1, legend.position = 'top')
```

# Result #3: Does individual data being an outlier create a consistent rate of error

```{r}
# Assuming you have a linear model fit earlier
ggplot(d.guesses_filtered, aes(x = outlierPercent, y = error, color = idx)) +
  geom_jitter(alpha = 0.1) +
  labs(y = "average error", x = "outlier degree", color= "round") +
  geom_smooth(aes(group = idx), method = "lm", se = FALSE, alpha = 0.3) +
  theme_few() +
  scale_color_continuous_tableau(palette = 'Classic Blue') +
  guides(color = guide_colorbar(nbin = 9, barheight = 7,barwidth=0.5,
                                 title.position = "top"))+
  theme(legend.position = "right", aspect.ratio = 1)  +
  ylim(-80,80) +
  xlim(0, 80)

#ggsave(here('exp1_outlier.pdf'), height=3, width = 3)
d.guesses_filtered %>%
  lmer(error ~ scale(outlierPercent) * scale(idx) + (1 + scale(outlierPercent) + scale(idx) | gameID), 
       data = .) %>% 
  summary()

```

```{r}
d.guesses_filtered%>% 
  mutate(groupConsistency = guess- mleEstimateGame)
ggplot(d.guesses, aes(x = groupConsistency, fill = factor(-idx))) +
  geom_density(alpha = 0.5) +
  labs(title = "Density of Player's Guess Difference from Collective Over Time",
       x = "Difference (Guess - p)",
       y = "Density",
       fill = "Round") +
  theme_minimal()
```
