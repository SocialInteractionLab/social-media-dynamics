---
title: "Experiment2"
format: html
editor: visual
---

### Import packages

```{r}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
```

### Read in data

```{r}
ParseJSONColumn <- function(x) {
  str_c("[ ", str_c(x, collapse = ",", sep=" "), " ]")  %>% 
    fromJSON(flatten = T) 
}

# map game IDs to their treatments
d.treatments.b1 <- read_csv(here('data/experiment2/batch1/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()
d.treatments.b2 <- read_csv(here('data/experiment2/batch2/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()
d.treatments.b3 <- read_csv(here('data/experiment2/batch3/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()
d.treatments.b4 <- read_csv(here('data/experiment2/batch4/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()
# map game IDs to their treatments
d.treatmentse1 <- read_csv(here('data/experiment1/games.csv')) %>%
  select(gameID = id, treatmentName) %>% 
  distinct()


```

```{r}

# map game IDs to their treatments
d.players.b1 <- read_csv(here('data/experiment2/batch1/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

d.players.b2 <- read_csv(here('data/experiment2/batch2/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

d.players.b3 <- read_csv(here('data/experiment2/batch3/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

d.players.b4 <- read_csv(here('data/experiment2/batch4/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()

# map game IDs to their treatments
d.playerse1 <- read_csv(here('data/experiment1/players.csv')) %>%
  mutate(nSquirrels = str_count(emojiArray, '🐿️'),
         nRabbits = str_count(emojiArray, '🐇')) %>%
  select(playerID = id, gameID, nSquirrels, nRabbits) %>%
  distinct()


```

```{r}


# map round IDs to their indices
d.rounds.b1 <- read_csv(here('data/experiment2/batch1/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()
d.rounds.b2 <- read_csv(here('data/experiment2/batch2/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()
d.rounds.b3 <- read_csv(here('data/experiment2/batch3/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()
d.rounds.b4 <- read_csv(here('data/experiment2/batch4/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()
# map round IDs to their indices
d.roundse1 <- read_csv(here('data/experiment1/rounds.csv')) %>%
  select(gameID, roundID = id, idx) %>%
  distinct()


```

```{r}

# create long-form dataframe of all messages sent in each game
d.msgs.b1 <- read_csv(here('data/experiment2/batch1/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)%>%
  rename(playerID = recipient) %>% rename(idx = round)%>% 
  filter(!is.na(idx))

d.msgs.b2 <- read_csv(here('data/experiment2/batch2/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)%>%
  rename(playerID = recipient)%>% rename(idx = round)%>% 
  filter(!is.na(idx))

d.msgs.b3 <- read_csv(here('data/experiment2/batch3/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)%>%
  rename(playerID = recipient)%>% rename(idx = round)%>% 
  filter(!is.na(idx))

d.msgs.b4 <- read_csv(here('data/experiment2/batch4/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)%>%
  rename(playerID = recipient)%>% rename(idx = round)%>% 
  filter(!is.na(idx))


# create long-form dataframe of all messages sent in each game
d.msgse1 <- read_csv(here('data/experiment1/games.csv')) %>% 
  mutate(messages = ifelse(is.na(messages), '[{}]', messages)) %>%
  select(gameID = id, treatmentName, messages) %>%
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% #excluding experimenter test round
  mutate(messages = map(messages, .f = ParseJSONColumn)) %>%
  unnest(messages) %>% unnest(messages)%>%
  rename(playerID = recipient)%>% rename(idx = round)%>% 
  filter(!is.na(idx))

d.msgs <-rbind(d.msgs.b1, d.msgs.b2,d.msgs.b3,d.msgs.b4, d.msgse1)
rm(d.msgs.b1, d.msgs.b2,d.msgs.b3,d.msgs.b4, d.msgse1)
```

```{r}
# create long-form dataframe of all guesses made in each game
d.guesses.b1 <- read_csv(here('data/experiment2/batch1/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess) %>%
  left_join(d.rounds.b1) %>%
  left_join(d.treatments.b1) %>%
  left_join(d.players.b1) 

d.guesses.b2 <- read_csv(here('data/experiment2/batch2/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess) %>%
  left_join(d.rounds.b2) %>%
  left_join(d.treatments.b2) %>%
  left_join(d.players.b2) 

d.guesses.b3 <- read_csv(here('data/experiment2/batch3/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess) %>%
  left_join(d.rounds.b3) %>%
  left_join(d.treatments.b3) %>%
  left_join(d.players.b3) 


d.guesses.b4 <- read_csv(here('data/experiment2/batch4/playerStages.csv')) %>% 
  select(gameID, roundID, playerID, guess) %>%
  left_join(d.rounds.b4) %>%
  left_join(d.treatments.b4) %>%
  left_join(d.players.b4) 


# create long-form dataframe of all guesses made in each game
d.guessese1 <- read_csv(here('data/experiment1/playerStages.csv')) %>% 
  filter(gameID != '01HMFD6NG3J7CA3Y2NKT362RRC') %>% # experimenter practice game
  select(gameID, roundID, playerID, guess) %>%
  left_join(d.roundse1) %>%
  left_join(d.treatmentse1) %>%
  left_join(d.playerse1)

```

```{r}
d.guesses.b1$treatmentName <- paste0(d.guesses.b1$treatmentName, "-0.7")
d.guesses.b3$treatmentName <- paste0(d.guesses.b3$treatmentName, "-0.3")
d.guesses.b4$treatmentName <- paste0(d.guesses.b4$treatmentName, "-0.3")
```

```{r}
d.guesses <- rbind(d.guesses.b1, d.guesses.b2, d.guesses.b3, d.guesses.b4, d.guessese1)
rm(d.guesses.b1,d.guesses.b2,d.guesses.b3,d.guesses.b4,d.msgs.b1,d.msgs.b2,d.msgs.b3,d.msgs.b4,d.players.b1, d.players.b2,d.players.b3,d.players.b4,d.rounds.b1,
   d.rounds.b2,d.rounds.b3,d.rounds.b4,d.treatments.b1,d.treatments.b2,d.treatments.b3,d.treatments.b4, d.guessese1, d.msgse1, d.playerse1, d.roundse1, d.treatmentse1)
```

## Implement exclusions

```{r}
playercount <- d.guesses %>%
   filter(idx == 1) %>%
   distinct(playerID, .keep_all = TRUE)
nrow(playercount)

```

```{r}
keeper <- d.guesses %>%
  select(gameID, playerID, idx, guess) %>%
  filter(!is.na(guess))

d.guesses <-d.guesses %>% distinct(gameID, playerID, idx, .keep_all = TRUE)

d.guesses <- d.guesses %>%
  left_join(keeper, by = c("gameID", "playerID", "idx")) %>%
  mutate(guess = coalesce(guess.x, guess.y)) %>%
  select(-guess.x, -guess.y)  # Remove redundant columns

d.guesses <- d.guesses %>%  distinct(.keep_all = TRUE)

```

```{r}
confused <- d.guesses %>%
  filter(idx == 1) %>%
  mutate(mleEstimate = floor((nRabbits / (nRabbits + nSquirrels)) * 100)) %>%
  mutate(discrepency = abs(guess - mleEstimate)) %>% 
  filter(discrepency > 70) %>% 
  pull(playerID)


```

```{r}
persistentnoClick <- c()  
for (i in 1:7) {
  idx_pair <- c(i, i+1)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx %in% idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  persistentnoClick <- c(persistentnoClick, filtered_players)
}
print(length(unique(persistentnoClick)))

```

```{r}
squares <- c()  
for (i in 1:7) {
  idx_pair <- c(i, i+1)
  filtered_players <- d.guesses %>%
    group_by(playerID) %>%
    filter(all(is.na(guess[idx %in% idx_pair]))) %>%
    distinct(playerID, .keep_all = TRUE) %>%
    pull(playerID)
  squares <- c(squares, filtered_players)
}
print(length(unique(squares)))
```

```{r}
square_games <- d.guesses %>%
  filter(playerID %in% squares) %>%
  group_by(gameID) %>%
  summarize(distinct_playerIDs = n_distinct(playerID))%>%
  filter(distinct_playerIDs != 1)


```

## Result #1: Convergence

```{r}
d.guesses %>%
  filter(!(playerID %in% persistentnoClick)) %>%
   #filter(!(gameID %in% square_games)) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(guess = mean(guess, na.rm = TRUE)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(guess, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(30,70), linetype = 'dotted') +
    geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average guess', x = 'round #') +
    scale_color_colorblind()
```

## Result #2: Examine error (collapsing across treatment)

## in-game treatment average from the player's critters

```{r}

d.guesses <- d.guesses %>%
  mutate(indvPercent = ifelse(nRabbits > 0 & nSquirrels == 0, 100, 
                   ifelse(nSquirrels > 0 & nRabbits == 0, 1, 
                          ifelse(nRabbits + nSquirrels == 0, 0, 
                                 floor((nRabbits / (nRabbits + nSquirrels)) * 100))))) %>%
  group_by(idx, gameID) %>%
  mutate(nRabbitsGame = sum(nRabbits),
         nSquirrelsGame = sum(nSquirrels)) %>%
  mutate(mleEstimateIndiv = floor((nRabbits / (nRabbits + nSquirrels)) * 100),
         AvgPercent = floor((nRabbitsGame / (nRabbitsGame + nSquirrelsGame)) * 100),
         mleEstimateIndiv = ifelse(is.na(mleEstimateIndiv), 50, mleEstimateIndiv))

d.guesses %>%
  group_by(gameID, treatmentName) %>%
  summarize(mleEstimate = mean(mleEstimateIndiv)) %>%
  ggplot(aes(x = mleEstimate)) +
    geom_histogram(binwidth = 10) +
    facet_wrap(~ treatmentName, scales = "free") +
    labs(title = "Distribution of mleEstimate for each treatmentName")

```

```{r}
trueP <- d.guesses %>%
  group_by(treatmentName) %>%
  summarize(mean_AvgPercent = mean(mleEstimateIndiv, na.rm = TRUE))

d.guesses <- left_join(d.guesses, trueP, by = "treatmentName")

```

```{r}
list <- as.list(as.numeric(trueP$mean_AvgPercent)) 
d.guesses %>%
  filter(!(playerID %in% confused)) %>% 
  filter(!(playerID %in% persistentnoClick)) %>%
  #filter(!(playerID %in% GamingTheSystem)) %>%
  group_by(treatmentName, idx, gameID) %>%
  summarize(guess = mean(guess, na.rm = TRUE)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(guess, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
  geom_hline(yintercept = c(65,37,64,32), linetype = 'dotted')+
  geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average guess', x = 'round #') +
    scale_color_colorblind()
```

## 

```{r}
library(lmerTest)
d.guesses %>%
   filter(!(playerID %in% confused)) %>% 
  filter(!(gameID %in% persistentnoClick)) %>%
  mutate(target = ifelse(treatmentName=='experiment1-0.3', 30, 70),
         error = abs(guess - target)) %>%
  lmerTest::lmer(error ~ poly(idx, 1) + treatmentName
                + (1 + poly(idx, 1) | gameID) 
                + (1 + poly(idx, 1) | playerID:gameID), 
       data = .) %>% 
  summary()
```

```{r}
d.guesses %>%
   filter(!(playerID %in% confused)) %>% 
  filter(!(gameID %in% persistentnoClick)) %>%
  mutate(mleEstimate = 100 * nRabbits / (nRabbits + nSquirrels),
         distance = abs(guess - mleEstimate)) %>%
  lme4::lmer(distance ~ poly(idx, 1) + treatmentName
                + (1 + poly(idx, 1) | gameID) 
                + (1 + poly(idx, 1) | playerID:gameID), 
       data = .) %>% 
summary()
```

```{r}
d.guesses %>%
  filter(!(playerID %in% confused)) %>% 
  filter(!(gameID %in% persistentnoClick)) %>%
  mutate(mleEstimate = 100 * nRabbits / (nRabbits + nSquirrels),
         distance = abs(guess - mleEstimate),
         target = ifelse(treatmentName=='experiment1-0.3', 30, 70),
         error = abs(guess - target)) %>%
  pivot_longer(names_to = 'measure', values_to = 'value', cols = c('distance', 'error')) %>%
  group_by(gameID, idx, measure) %>%
  summarize(value = mean(value, na.rm = TRUE)) %>%
  group_by(idx, measure) %>%
  tidyboot_mean(value, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = measure)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2)) +
    theme_few()

```

## 

# Result #3: Wisdom of Crowds

## participant error without absolute

```{r}
d.guesses <- d.guesses %>%
  mutate(wisError = guess-AvgPercent) %>%
  mutate(treatError = guess-mean_AvgPercent)

```

## average error per player within-game ratios

```{r}
d.guesses %>%
  filter(!(playerID %in% confused)) %>% 
  filter(!(playerID %in% persistentnoClick)) %>%
  #filter(!(gameID %in% square_games)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(wisError, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = treatmentName)) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    #geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.1) +
    theme_few() +
    labs(y = 'average error per player within game', x = 'round #') +
    scale_color_manual(values = c("experiment1-0.3" = "blue",
                                   "experiment1-0.7" = "blue",
                                   "experiment2-interactive-0.3" = "red",
                                   "experiment2-interactive-0.7" = "pink",
                                   "experiment2-slider-0.3" = "black",
                                   "experiment2-slider-0.7" = "black"))

```

```{r}
d.guesses <- d.guesses %>% 
  mutate(treatmentP = as.integer(str_extract(treatmentName, "\\d+$"))) %>%
  mutate(collapsedTreatment = str_replace(treatmentName, "-0\\.3|-0\\.7", ""))
```

```{r}
d.guesses %>%
  filter(!(playerID %in% confused)) %>% 
  filter(!(playerID %in% persistentnoClick)) %>%
  #filter(!(gameID %in% square_games)) %>%
  group_by(treatmentName, idx) %>%
  tidyboot::tidyboot_mean(wisError, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = factor(treatmentName))) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    labs(y = 'average error per player within game', x = 'round #') 
```

```{r}
d.guesses %>%
  filter(!(playerID %in% confused)) %>% 
  filter(!(playerID %in% persistentnoClick)) %>%
  #filter(!(gameID %in% square_games)) %>%
  group_by(treatmentP, idx) %>%
  tidyboot::tidyboot_mean(wisError, na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = factor(treatmentP))) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    labs(y = 'average error per player within game', x = 'round #') 
```

```{r}
plot <- d.guesses %>%
  filter(!(playerID %in% confused)) %>% 
  filter(!(playerID %in% persistentnoClick)) %>%
 # filter(!(gameID %in% square_games)) %>%
  group_by(collapsedTreatment, idx) %>%
  tidyboot::tidyboot_mean(abs(wisError), na.rm = TRUE) %>%
  ggplot(aes(x = idx, y = empirical_stat, color = factor(collapsedTreatment))) +
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = c(0), linetype = 'dotted') +
    theme_few() +
    labs(y = 'average error per player within game', x = 'Stage', color = "Treatment")
plot + scale_color_manual(
  breaks = c("experiment1", "experiment2-slider","experiment2-interactive"),  
  labels = c("message", "slider", "interactive"),
  values = c("blue","black", "red")
)
```

## within-game error per player and average

```{r}
d.gameError <- d.guesses %>%
  group_by(gameID) %>%
  summarize(gameError = mean(wisError))

d.guesses <- left_join(d.guesses, d.gameError, by = "gameID")

```

```{r}
# Filter the data frame outside the loop
filtered_df <- d.guesses%>%  
  filter(!(playerID %in% confused)) %>% 
  filter(!(playerID %in% persistentnoClick))#%>%
  #filter(!(playerID %in% GamingTheSystem)) 
# Create a ggplot for error over idx for both treatment names
plot_combined <- 
  ggplot(filtered_df, aes(x = idx, y = wisError, color = treatmentName)) +
  geom_point() +
  geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
  geom_hline(yintercept = mean(filtered_df$wisError), linetype = 'dotted') +
  theme_few() +
  labs(y = 'average error per game', x = 'round #') +
  scale_color_colorblind()

# Print the combined plot
print(plot_combined)

```

# Result #4: Does individual data being an outlier create a consistent rate of error

```{r}
d.MLE <- d.guesses %>%
  mutate(outlierPercent = abs(mleEstimateIndiv-AvgPercent))
```

```{r}
# Assuming you have a linear model fit earlier
model <- lm(abs(wisError) ~ outlierPercent, data = d.MLE)

# Calculate the slope difference
slope_difference <- coef(model)[2] - coef(model)[1]

# Now you can use it in the annotate function
ggplot(d.MLE, aes(x = outlierPercent, y = abs(wisError), color = idx)) +
  geom_point() +
  labs(y = "Error", x = "Outlier Percent") +
  ggtitle("Scatter Plot of Outlier Percent vs Error") +
  geom_smooth(method = "lm", se = FALSE, aes(group = idx)) +
  theme_minimal() +
  coord_cartesian(clip = "off") +  
  theme(legend.position = "bottom") + 
  annotate("text", x = max(d.MLE$outlierPercent), y = max(d.MLE$error), 
           label = paste("Change across rounds:", round(slope_difference, 3)),
           hjust = 1, vjust = 1, color = "black", size = 3)

```

```{r}
first <- d.MLE %>%   
  distinct(playerID, .keep_all = TRUE) %>%
  mutate(rounded_outlier = ceiling(outlierPercent/10)*10) %>%
  select(playerID, rounded_outlier)

second <- first %>% ungroup %>%
  select(playerID, rounded_outlier)
d.MLE <- d.MLE %>%
  left_join(select(second, playerID, rounded_outlier), by = "playerID")
```

```{r}
ggplot(d.MLE, aes(x = idx, y = abs(wisError), color = as.factor(rounded_outlier))) +
  geom_point() +
  labs(y = "Error", x = "Time", color = "Outlier Group") +  # Specify legend title here
  ggtitle("Scatter Plot of Error Over Time by Outlier Group") +
  geom_smooth(method = "lm", se = FALSE, aes(group = rounded_outlier)) +
  theme_minimal() +
  coord_cartesian(clip = "off") +  
  theme(legend.position = "bottom")
```

```{r}
validity <- d.MLE %>%   distinct(playerID, .keep_all = TRUE) %>%
  group_by(rounded_outlier) %>%
  summarize(count = n())
print(validity)
```

## Individual MLE

```{r}
d.guesses$individualConsistency <- d.guesses$guess - d.guesses$indvPercent

# Create a line plot
ggplot(d.guesses, aes(x = idx, y = individualConsistency, group = playerID, )) +
  geom_line() +
  geom_point() +
  labs(title = "Player's Guess Difference from Personal Avg Over Time",
       x = "idx",
       y = "Difference (Guess - Truth)",
       color = "Player") +
  theme_minimal()
```

```{r}
ggplot(d.guesses, aes(x = individualConsistency, fill = factor(idx))) +
  geom_density(alpha = 0.2) +
  labs(title = "Density of Player's Guess Difference from Individual Over Time",
       x = "Difference (Guess - Personal p)",
       y = "Density",
       fill = "Round") +
  theme_minimal()
```

## Correlation in-game

```{r}
d.msgs <- d.msgs%>% distinct(playerID, idx, .keep_all = TRUE) %>% select(playerID, sender.id,idx)
d.guesses <- left_join(d.guesses, d.msgs, by = c("playerID", "idx"))
library(dplyr)

d.neighbours <- d.guesses %>%
  select(playerID, guess, idx) %>%
  rename(sender.id = playerID) %>%
  rename(NeighborGuess = guess) %>%
  ungroup()

d.guesses <- left_join(d.guesses, d.neighbours, by = c("sender.id", "idx")) %>%
  rename(gameID = gameID.x)

```

```{r}
d.language <- d.guesses %>%
  filter(!is.na(sender.id)) %>%
  rowwise() %>%  
  mutate(correlationSender = sqrt(sum((guess - NeighborGuess)^2))) %>%  group_by(gameID, idx) 
 
d.language <-d.language %>% 
 group_by(playerID, gameID) %>%
  mutate(guess_past = lag(guess, default = NA, order_by = idx)) %>%
  fill(guess_past, .direction = "down") %>%
  ungroup %>%
  mutate(diffNeig = abs(guess-NeighborGuess)) %>%
  mutate(diffPast = abs(guess-guess_past)) %>% filter(!is.na(guess)) %>% filter(!is.na(NeighborGuess)) %>%filter(!is.na(guess_past))
 # group_by(gameID, idx) %>% filter(!is.na(guess)) %>% filter(!is.na(NeighborGuess)) %>%
#  mutate(correlationSender = cor(guess, NeighborGuess,use = "complete.obs")) %>% filter(TRUE) %>%
 # filter(!is.na(guess)) %>% filter(!is.na(guess_past)) %>%
  #mutate(correlationPast = cor(guess,guess_past, use = "complete.obs"))



```

```{r}

unique_gameIDs <- unique(d.language$gameID)

plots_list <- list()

unique_gameIDs <- unique(d.language$gameID)
for (gameID in unique_gameIDs) {
  merged_df <- d.language %>%
    filter(gameID == !!gameID)

  correlation_guess <- merged_df %>%
    summarise(correlation = cor(guess, NeighborGuess))

  print(correlation_guess)

  plot <- ggplot(merged_df, aes(x = guess, y = NeighborGuess)) +
    geom_point() +
    ggtitle(paste("Game ID:", gameID))

  plots_list[[as.character(gameID)]] <- plot
}
```

```{r}
ggplot(d.language, aes(x = idx, y = diffPast, group = playerID)) +
  geom_line() +
  ggtitle("diffPast Over Time for 645 Players") +
  xlab("Time") +
  ylab("diffPast") +
  theme_minimal()

# Plotting diffNeig over time for each player
ggplot(d.language, aes(x = idx, y = diffNeig, group = playerID)) +
  geom_line() +
  ggtitle("diffNeig Over Time for 645 Players") +
  xlab("Time") +
  ylab("diffNeig") +
  theme_minimal()

# If you want to combine both plots into one
ggplot(d.language, aes(x = idx, group = playerID)) +
  geom_line(aes(y = diffPast, color = "diffPast"), alpha = 0.7) +
  geom_line(aes(y = diffNeig, color = "diffNeig"), alpha = 0.7) +
  ggtitle("diffPast and diffNeig Over Time for 645 Players") +
  xlab("Time") +
  ylab("Values") +
  scale_color_manual(values = c("diffPast" = "blue", "diffNeig" = "red")) +
  theme_minimal()
```

```{r}
ggplot(d.language, aes(x = diffNeig, fill = factor(-idx))) +
  geom_density(alpha = 0.2) +
  labs(title = "Density of Player's Guess Difference from Individual Over Time",
       x = "Difference (Guess - Personal p)",
       y = "Density",
       fill = "Round") +
  theme_minimal()
```

```{r}
ggplot(d.language, aes(x = diffPast, fill = factor(-idx))) +
  geom_density(alpha = 0.4) +
  labs(title = "Density of Player's Guess Difference from Individual Over Time",
       x = "Difference (Guess - Personal p)",
       y = "Density",
       fill = "Round") +
  theme_minimal()
```

```{r}
library(tidyr)
library(dplyr)
library(ggplot2)

d.language %>%
  filter(!(playerID %in% confused)) %>%
  group_by(treatmentName, idx) %>%
  tidyr::drop_na(diffNeig, diffPast) %>%
  ggplot(aes(x = idx, color = treatmentName)) +
  # geom_point(aes(y = diffNeig), shape = 16) +
  #  geom_point(aes(y = diffPast), shape = 17) +
    geom_smooth(aes(y = diffNeig), method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
    geom_smooth(aes(y = diffPast), method = 'lm', formula = y ~ poly(x, 2), se = FALSE) +
    geom_hline(yintercept = 0, linetype = 'dotted') +
    theme_few() +
    labs(y = 'average error', x = 'round', color = "condition")


```

```{r}


for (gameID in unique_gameIDs) {
  subset_df <- d.language[d.language$gameID == gameID, ]

  plot <- 
    ggplot(subset_df, aes(x = idx, y = diffNeig)) +  
    geom_point() +
    geom_smooth(method = 'lm', formula = y ~ poly(x, 2), se = F) +
    geom_hline(yintercept = subset_df$gameError[1], linetype = 'dotted') +
    theme_few() +
    labs(y = 'average error per game', x = 'round #') +
    scale_color_colorblind()
  print(plot) 
}

```

## group accuracy vs total data (sum critters)

```{r}
d.guesses <- d.guesses %>% 
  mutate(sumCritters= nRabbits+nSquirrels) %>%
  group_by(gameID) %>% 
  mutate(TotalCritters = sum(sumCritters)) %>%
  mutate(binCritters = ceiling(TotalCritters/10) * 10)


unique_treatments <- unique(d.guesses$collapsedTreatment)

for (treatment in unique_treatments) {
  subset_data <- d.guesses[d.guesses$collapsedTreatment == treatment, ]
  
  plot <- ggplot(subset_data, aes(x = binCritters, y = abs(wisError), color = factor(idx))) +
    geom_smooth(method = "lm", se = FALSE, aes(group = idx)) +
    labs(y = "Error", x = "TotalCritters") +
    ggtitle(paste("Scatter Plot of TotalCritters vs Error -", treatment)) +
    theme_minimal() +
    coord_cartesian(clip = "off") +  
    theme(legend.position = "bottom")
 print(plot) 
}

```

```{r}
# Assuming you have a linear model fit earlier
model <- lm(abs(wisError) ~ binCritters, data = d.guesses)

# Calculate the slope difference
slope_difference <- coef(model)[2] - coef(model)[1]

# Now you can use it in the annotate function
# Create separate plots for each idx
plots <- lapply(unique(d.guesses$idx), function(idx_value) {
  ggplot(subset(d.guesses, idx == idx_value), aes(x = binCritters, y = abs(wisError), color = factor(ceiling(binCritters)))) +
    geom_point() +
    labs(y = "Error", x = "Total Critters") +
    ggtitle(paste("Scatter Plot of idx =", idx_value, "vs Error")) +
    geom_smooth(method = "lm", se = FALSE, aes(group = binCritters)) +
    theme_minimal() +
    coord_cartesian(clip = "off") +  
    theme(legend.position = "bottom")
})

# Print or arrange the plots as needed
plots[[1]]
plots[[2]]
# Add more plots if there are more unique idx values

```

## group level analysis - group accuracy improval

```{r}
d.guesses <- left_join(
  d.guesses, 
  d.language %>% select("playerID", "idx", "diffPast", "diffNeig"), 
  by = c("playerID", "idx")
)# %>% 
  #rename(diffPast = diffPast.x, diffNeig = diffNeig.x)


```

```{r}

for (treatment in unique_treatments) {
  subset_data <- d.guesses[d.guesses$collapsedTreatment == treatment, ]
  
plot <- ggplot(subset_data, aes(x = idx, y = abs(wisError), color = sum(diffPast))) +
  geom_smooth(method = "lm", se = FALSE, aes(group = gameID)) +
  labs(y = "Error", x = "time") +
  ggtitle(paste("Scatter Plot of TotalCritters vs Error -", treatment)) +
  theme_minimal() +
  coord_cartesian(clip = "off") +  
  scale_color_gradient(low = "blue", high = "green") +  # Change the color scale
  theme(legend.position = "none")

  print(plot) 
}

```

## gini coeffient

```{r}

```

## another attempt at weights

```{r}
#library(brms)
#model <- brm(wisError ~ idx, data = d.guesses)
#marginal_effects_plot <- marginal_effects(model)
#plot(marginal_effects_plot)
```

group acc vs heterogenetity

```{r}
crashMyRerun <-
```
