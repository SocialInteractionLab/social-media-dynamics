---
title: "experiment 2"
format: html
editor: visual
---

## Import packages

```{r, include=FALSE}
library(conflicted)  
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")

library(tidyverse)
library(tidyboot)
library(lme4)
library(here)
library(jsonlite)
library(ggthemes)
library(plotly)


theme_set(theme_few())
```

## Read in data

```{r}
d.all <- read_csv(here('analysis/2_experiment_2/exp2_clean_data_jan17.csv')) %>%separate(treatmentName.x, into = c("direction","treatment"), sep = "_")%>% select(-stageName, -ended.x, -roundID, -stageID.x, -participantID,-recipient, -participantIdentifier, -exitSurvey, -designatedGame)  %>% mutate(error = if_else(direction == "RS", abs((100-guess) - (mleGame*100)), abs(guess - (mleGame*100))))


d.guesses <- read_csv(here('data/PreregMergedGuesses.csv'))%>%
  rename_with(~ gsub("\\.x$", "", .x), ends_with(".x")) %>% separate(treatmentName, into = c("prefix", "treatment", "direction"), sep = "-")%>%
  select(-ends_with(".y")) %>% select(-"...1", -roundID,-prefix)%>% mutate(nCritters = nRabbits+nSquirrels) %>% mutate(mleEstimate = mleEstimateIndiv/100, mleGame = mleEstimateGame/100) %>%
  group_by(gameID,idx) %>%
  mutate(
   nRabbitsGame = sum(nRabbits),
    nSquirrelsGame = sum(nSquirrels),
    mleGame = nRabbitsGame / (nRabbitsGame + nSquirrelsGame),
    prob = nCritters / (nRabbitsGame + nSquirrelsGame),
    entropy = -sum(ifelse(prob > 0, prob * log(prob), 0)),
    representation = mean(abs(mleEstimate - mleGame))
  ) %>% ungroup() %>% select(-mleEstimateIndiv, -mleEstimateGame) %>% mutate(nCrittersGame = nSquirrelsGame+nRabbitsGame)%>% mutate (error = abs(mleEstimate*100-guess))

combined_df <- bind_rows(d.all, d.guesses)%>% 
  group_by(gameID, idx) %>%
  filter(n_distinct(playerID) == 4) %>%
  ungroup()%>%
    mutate(
     entropy_bin = cut(entropy,breaks = c(seq(0, 2, 0.27), Inf),right = TRUE,include.lowest = TRUE, dig.lab = 2),
      representation_bin = cut((representation), breaks = seq(0, 1, .12), right = TRUE, include.lowest = TRUE, dig.lab = 2),
      nCrittersGame_bin = cut(nCrittersGame, breaks = seq(10, 100, by = 5), right = TRUE, include.lowest = TRUE)) 

```

# combine data & calculate bins

```{r}
persistentnoClick <- data.frame(gameID = character(), playerID = character(), stringsAsFactors = FALSE)

for (i in 1:7) {
  idx_pair <- c(i + 1, i + 2)
    filtered_players <- combined_df %>%
    group_by(gameID, playerID) %>%
    filter(all(is.na(guess[idx_pair]))) %>%
    select(gameID, playerID) %>%
    distinct()
    persistentnoClick <- bind_rows(persistentnoClick, filtered_players)
}
persistentnoClick <- distinct(persistentnoClick)

gameIDs_to_remove <- persistentnoClick %>%
  count(gameID) %>%
  filter(n >= 2) %>%
  pull(gameID)

```

```{r}
combined_df <-combined_df %>% filter(!is.na(treatment))

d.all_minmax <- combined_df %>%  mutate(
    entropy_median = median(entropy),
    representation_median = median(representation),
    nCrittersGame_median = median(nCrittersGame)
  ) %>%
  mutate(
    entropy_minmax = ifelse(entropy <= entropy_median, "H_etpy", "E_etpy"),
    representation_minmax = ifelse(representation <= representation_median, "E_rep", "H_rep"),
    nCrittersGame_minmax = ifelse(nCrittersGame <= nCrittersGame_median, "H_crits", "E_crits"),
    group = paste(entropy_minmax, representation_minmax, nCrittersGame_minmax, sep = "\n")
  ) %>%
 #group_by(representation_bin, entropy_bin, nCrittersGame_bin, treatment) %>%
  group_by(gameID, treatment)%>%
  mutate(errorAvg = mean(error, na.rm = TRUE)) %>%
  ungroup()  #%>%
  #filter(idx == 8)

#print(unique(d.all_minmax %>% select(entropy_median, representation_median, nCrittersGame_median)))

lm_model <- lm(errorAvg ~ group, data = d.all_minmax)

# Calculate center lines and their distances
group_distances <- d.all_minmax %>%
  #filter(group !='E_etpy\nH_rep\nE_crits') %>%
  group_by(group, treatment) %>% 
  summarise(median_error = median(errorAvg)) %>%
  pivot_wider(names_from = treatment, values_from = median_error) %>%
  mutate(distance = abs(interactive - slider)) %>%
  arrange(distance)

# Calculate game counts per group and treatment
counts <- d.all_minmax %>%
  #filter(group !='E_etpy\nH_rep\nE_crits') %>%
  group_by(group, treatment) %>%
  summarise(nGames = n()) %>%
  pivot_wider(names_from = treatment, values_from = nGames, names_prefix = "nGames_")

# Calculate center lines for group ordering
center_lines <- d.all_minmax %>%
  group_by(group, treatment) %>%
  #filter(group !='E_etpy\nH_rep\nE_crits')%>%
  summarise(center_line = median(errorAvg)) %>%
  pivot_wider(names_from = treatment, values_from = center_line) %>%
  mutate(center_line_distance = abs(interactive - slider))

# Reorder groups based on center line distance
d.all_minmax2 <- d.all_minmax %>%
  mutate(group = factor(group, levels = center_lines %>%
                          arrange(center_line_distance) %>%
                          pull(group))) %>% #filter(group !='E_etpy\nH_rep\nE_crits') %>%
  droplevels()

d <-d.all_minmax2 %>%
  ggplot(aes(x = group, y = errorAvg, color = treatment, fill = treatment)) +  
   scale_color_brewer(palette = 'Accent') +
  scale_fill_brewer(palette = 'Accent') + 
  geom_boxplot(alpha = 0.5) +
  #geom_text(data = counts, 
           # aes(x = group, y = Inf, 
                #label = paste0("I: ", nGames_interactive, 
                              # "\nS: ", nGames_slider)),
           # vjust = 1.5, inherit.aes = FALSE) +
  labs(x = "", y = "Error") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust = 1),
        legend.position = "top",
        panel.background = element_rect(fill = NA, color = "black"),
        panel.grid = element_blank())
d

#ggsave(
#  "difficulty.png",
#  plot = d,
 # width = 3.5,  
 # height = 10,
#  units = "in",
#  device = "png",
#  dpi = 300 
#)

levels(d.all_minmax2$group)
unique(d.all_minmax2$group)
```

```{r}
combined_df %>% 
  summarise(unique_games = n_distinct(gameID))
```
